"""
Copyright (c) Contributors to the Open 3D Engine Project.
For complete copyright and license terms please see the LICENSE at the root of this distribution.

SPDX-License-Identifier: Apache-2.0 OR MIT
"""

from __future__ import annotations
import logging
from os import PathLike, path, listdir
from pprint import pformat
from typing import List, Tuple, Pattern

from ly_test_tools.o3de.pipeline_utils import get_differences_between_lists, compare_lists, compare_assets_with_cache

from assetpipeline.assetpipeline_utils.assetpipeline_constants import XML_NUMBER_REGEX, HASH_REGEX
import assetpipeline.scene_tests_fixtures.scene_tests_utilities as helper

logger = logging.getLogger(__name__)


def detect_hash_difference(first: List[str],
                           second: List[str]) -> None:
    """
    Helper that compares the debug lists after removal of the numeric hash values.
    Emits a warning if the lists are identical as this would indicate the only difference was a hash difference.
    """
    hashes_removed_diffs_identical = compare_lists(first, second)
    if hashes_removed_diffs_identical:
        logger.warning(f"Hash value difference detected between expected and actual results.")


def diff_is_none(*args: List[str] | None) -> bool:
    """
    Verifies whether any number of provided lists are empty.
    :returns: Returns True if all provided lists are empty, otherwise, returns False.
    """
    return not any(args)


def is_same_length_lists(first: List[str],
                         second: List[str]) -> bool:
    """
    Compare the length of two lists.
    :returns: Returns True if the length of each list is the same, otherwise, returns False.
    """
    if len(first) == len(second):
        return True
    return False


def known_hash_difference(list_to_verify: List[str],
                          known_hashes: List[str],
                          regex_pattern: Pattern[str]) -> None:
    """
    Extract the hash from the target list and compare it to the known list of hashes.
    If this regex fails or the extracted hash isn't in the known hash list, then it means this is a non-hash difference
    and the test fails.
    The regex is looking for pattern matching a literal string.
    Group 1 will be an integer number contained in the "value" field of the string.
    """

    for list_entry in list_to_verify:
        match_result = regex_pattern.match(list_entry)
        # If no result is matched, the test fails.
        assert match_result, f"Scene mismatch, could not match {regex_pattern} to {list_entry}"
        data_value = match_result.group(1)
        # If data_value does not match the list of known hash differences, the test fails.
        assert (data_value in known_hashes), f"Scene mismatch, {data_value} was not found in {known_hashes}"


def missing_assets(expected_product_list: List[str],
                   cache_folder: str | bytes | PathLike[str] | PathLike[bytes]) -> bool:
    """Helper: Compare expected products with products in cache, report on missing products."""
    assets_missing, _ = compare_assets_with_cache(expected_product_list, cache_folder)

    # If the test is going to fail, print information to help track down the cause of failure.
    if assets_missing:
        in_cache = listdir(cache_folder)
        logger.error(f"The following assets were missing from cache: {pformat(missing_assets)}")
        logger.error(f"The cache {cache_folder} contains this content: {pformat(in_cache)}")
        return False
    return True


def parse_and_compare_scene_graphs(first: str | bytes | PathLike[str] | PathLike[bytes],
                                   second: str | bytes | PathLike[str] | PathLike[bytes]) -> [List[str], List[str]]:
    """
    Parse two scene graphs into lists.
    Gathers the differences per lists and returns them separately.
    """
    first = helper.parse_scene_graph(first)
    second = helper.parse_scene_graph(second)

    return get_differences_between_lists(first, second)


def compare_scene_debug_file(expected_file_path: str | bytes | PathLike[str] | PathLike[bytes],
                             actual_file_path: str | bytes | PathLike[str] | PathLike[bytes]) \
        -> Tuple[List[str], List[str]] | (None, None):
    """
    Loads the debug scene graph generated by re-processing the test scene file, and the last known good debug
    scene graph for that file. Scans both files for differences, returning the hashes of any differences encountered.

    o3de/o3de#13713: We need to stabilize the output of product assets.
    o3de/o3de#13714: Hashes are generated differently on different platforms right now, it will be important
    to stabilize the output of product assets.
    Warnings are emitted on the known issues o3de/o3de#13713 and o3de/o3de#13714, a failure will emit on unknown issues.

    :param expected_file_path: Path to the dbgsg file containing the expected debug output to compare against.
    :param actual_file_path: Path to the dbgsg file containing the debug output of the source asset under test.
    :returns: expected_hashes_to_skip: A list containing the expected hashes of products generated during the test that
    will be skipped during XML comparison.
    actual_hashes_to_skip: A list containing the hashes of products generated during the test that will be skipped
    during XML comparison.
    """

    diff_expected, diff_actual = parse_and_compare_scene_graphs(expected_file_path, actual_file_path)
    assert is_same_length_lists(diff_expected, diff_actual), \
        "Scene Mismatch - Different line counts detected between debug files before decimal truncation."

    # Trim the floating point values from each list.
    trimmed_diff_expected, trimmed_diff_actual = helper.stabilize_floating_point_values_from_same_length_lists(
        diff_expected, diff_actual, expected_file_path, actual_file_path)

    # Verify the 'lists of differences' are still the same length after trimming their decimal values.
    assert is_same_length_lists(trimmed_diff_expected, trimmed_diff_actual), \
        "Scene Mismatch - Different line counts detected between debug files after decimal truncation."

    # Return early if there are no differences between the trimmed lists.
    if diff_is_none(trimmed_diff_expected, trimmed_diff_actual):
        return None, None

    # If differences were found, extract the hashes from each debug list.
    diff_expected_hashes_removed, expected_hashes = helper.split_hash_at_numeric_value(trimmed_diff_expected,
                                                                                       HASH_REGEX)
    diff_actual_hashes_removed, actual_hashes = helper.split_hash_at_numeric_value(trimmed_diff_actual, HASH_REGEX)

    # Emit a warning if the only difference is a hash difference.
    detect_hash_difference(diff_expected_hashes_removed, diff_actual_hashes_removed)

    # Return the hashes extracted from the trimmed lists for testing against the XML file.
    return expected_hashes, actual_hashes


def compare_scene_debug_xml_file(expected_file_path,
                                 actual_file_path,
                                 expected_hashes_to_skip: List[str],
                                 actual_hashes_to_skip: List[str]) -> None:
    """
    Loads the XML debug scene graph generated by re-processing the test scene file, and the last known good XML debug
    scene graph for that file. Scans both files for differences.

    o3de/o3de#13713: We need to stabilize the output of product assets.
    o3de/o3de#13714: Hashes are generated differently on different platforms right now, it will be important
    to stabilize the output of product assets.

    :param expected_file_path: Path to the dbgsg.xml file containing the expected debug output to compare against.
    :param actual_file_path: Path to the dbgsg.xml file containing the debug output of the source asset under test.
    :param expected_hashes_to_skip: A list containing the hashes of expected products that will be skipped during XML
    comparison.
    :param actual_hashes_to_skip: A list containing the hashes of products generated during the test that will be
    skipped during XML comparison.
    """

    diff_expected, diff_actual = parse_and_compare_scene_graphs(expected_file_path, actual_file_path)
    assert len(expected_hashes_to_skip) == len(diff_expected) and len(actual_hashes_to_skip) == len(diff_actual), \
        "Scene mismatch, test failed due to a non-hash error."

    # Verify the hash number against the list of known hashes, if the number isn't in the list, fail the test.
    known_hash_difference(diff_expected, expected_hashes_to_skip, XML_NUMBER_REGEX)
    known_hash_difference(diff_actual, actual_hashes_to_skip, XML_NUMBER_REGEX)
