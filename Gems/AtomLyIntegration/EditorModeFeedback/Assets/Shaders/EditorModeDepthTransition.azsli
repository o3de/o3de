/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

partial ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    /* -----------------
        \      E      /
         \#####|#####/
          \####|####/
           \###|###/
            \##|##/
             \-S-/
              \ /
               V

        V = View position
        S = Depth transition start
        E = Depth transition end

        When E is a non-zero value, the binary mask value will be transformed into a value from [m_minDepthTransitionValue, 1.0]
        according to the fragment's depth position in the transition band (#) spanning from S to E. This is to allow feedback 
        effects to be scaled according to the distance of non-mask fragments to the viewer.
    */

    //! The minimum blend amount that will be calculated through depth transitioning.
    float m_minDepthTransitionValue;
    
    //! Start of depth transtion for non-mask effect blending.
    //! @note S in the diagram above.
    float m_depthTransitionStart;

    //! The duration (depth) of the depth transition band (0.0 = no depth transitioning will be applied).
    //! @note E - S in the diagram above.
    float m_depthTransitionDuration;

    //! Calculates the blend amount (0.0 = input color, 1.0 = final effect) as scaled by the fragment's linear depth according to the depth transition values.
    float CalculateTransitionBlendAmountFromLinearDepth(const float linearDepth, const float maskValue)
    {
        if(PassSrg::m_depthTransitionDuration > 0.0)
        {
            const float depthTransition = clamp((linearDepth - PassSrg::m_depthTransitionStart) / (PassSrg::m_depthTransitionDuration), PassSrg::m_minDepthTransitionValue, 1.0);
            return clamp((1.0 - maskValue) * depthTransition, 0.0, 1.0);
        }

        return 1.0 - maskValue;
    }

    //! Calculates the blend amount (0.0 = input color, 1.0 = final effect) as scaled by the fragment's non-linear depth according to the depth transition values.
    float CalculateTransitionBlendAmountFromDepth(const float zDepth, const float maskValue)
    {
        const float linearDepth = CalculateLinearDepth(zDepth);
        return CalculateTransitionBlendAmountFromLinearDepth(linearDepth, maskValue);
    }
}