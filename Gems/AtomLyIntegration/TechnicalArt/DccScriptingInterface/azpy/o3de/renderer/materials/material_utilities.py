# coding:utf-8
#!/usr/bin/python
#
# Copyright (c) Contributors to the Open 3D Engine Project.
# For complete copyright and license terms please see the LICENSE at the root of this distribution.
#
# SPDX-License-Identifier: Apache-2.0 OR MIT
#
#
# -------------------------------------------------------------------------
import os
from pathlib import Path
from box import Box
import logging as _logging
import azpy.config_utils
from azpy.dcc.maya.helpers import maya_materials
from azpy.dcc.blender.helpers import blender_materials
from azpy.o3de.utils import o3de_utilities as o3de_helpers
from azpy.constants import FRMT_LOG_LONG
from SDK.Python import general_utilities as helpers
import click

"""

convert_material.py

Location:
azpy/o3de/renderer/materials/

Main functions:
- Get all properties material info
- Validate material
- read atom material
- write atom material
- convert legacy material
- convert spec/gloss to metal/rough

"""

_LOGGER = _logging.getLogger('azpy.dcc.maya.utils.maya_materials')

dcc_controller = {
    'Maya': maya_materials,
    'Blender': blender_materials
}


def run_cli():
    _LOGGER.info('Material Conversion called in CLI Mode')


def process_materials(dcc_app: str, operation: str, scope: str, source=None, output=None):
    """
    Entry point of the material operations process.
    :param dcc_app: Source application where conversion files were created
    :param operation: Specifies operation to perform - 'query', 'validate', 'modify', 'convert'
    :param scope: What gets converted- 'selected', 'by_name', 'scene', 'directory'
    :param source: Provides a slot for passing source value for "by_name", "scene" and directory scope
    :param output: Specifies location of output (if applicable)
    :return:
    """
    controller = dcc_controller[dcc_app]
    if scope == 'selected' or scope == 'by_name':
        material_info = process_object_materials(controller, operation, source, output)
    elif scope == 'scene':
        material_info = process_scene_materials(controller, operation, source, output)
    elif scope == 'directory':
        pass
    _LOGGER.info(f'\nProcessMaterialsFired:\nResults: {material_info}')


def process_object_materials(controller, operation, source, output):
    source_file = controller.get_current_scene()
    process_dictionary = {source_file: {}}
    target_objects = source if source else controller.get_selected_objects()

    for target_object in target_objects:
        temp_dict = {}
        target_object = target_object[1:] if target_object.startswith('|') else target_object
        target_materials = controller.get_mesh_materials(target_object)
        for target_material in target_materials:
            temp_dict[target_material] = controller.get_material_info(target_material)
        process_dictionary[source_file].update({target_object: temp_dict})
    controller.run_operation(process_dictionary, operation, output)
    controller.cleanup(target_objects)

    return process_dictionary if process_dictionary else []


def process_scene_materials(controller, operation, source, output):
    if source and controller.get_current_scene() != source:
        # TODO - Open a dialog saying the operation will close current scene- give option to cancel
        pass
    scene_objects = controller.get_scene_objects()
    process_dictionary = process_object_materials(controller, operation, scene_objects, output)
    return process_dictionary


def process_directory_materials(controller, operation, source, output):
    pass


def get_o3de_material_properties(material_type: str) -> Box:
    """
    Get the autogenerated "all properties" template file for given material type for cross reference with DCC materials/
    plugging material values into a new O3DE material (.material) definition
    :param material_type: Destination material type for O3DE material output
    :return:
    """
    pass


if __name__ == '__main__':
    run_cli()



