/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>
#include <viewsrg.srgi>
#include <TerrainCommon.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <Atom/Features/PBR/ForwardPassOutput.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/Shadow/DirectionalLightShadow.azsli>
#include <Atom/Features/PBR/Decals.azsli>

struct VSOutput
{
    float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV2;
    float2 m_uv : UV1;
};

VSOutput TerrainPBR_MainPassVS(VertexInput IN)
{
    VSOutput OUT;
 
    ObjectSrg::TerrainData terrainData = ObjectSrg::m_terrainData;

    float2 uv = IN.m_uv;
    float2 origUv = lerp(terrainData.m_uvMin, terrainData.m_uvMax, uv);
    float3 worldPosition = GetTerrainWorldPosition(terrainData, IN.m_position, origUv);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));
    OUT.m_worldPosition = worldPosition;

    // Calculate normal
    float up    = GetHeight(origUv + terrainData.m_uvStep * float2( 0.0f, -1.0f));
    float right = GetHeight(origUv + terrainData.m_uvStep * float2( 1.0f,  0.0f));
    float down  = GetHeight(origUv + terrainData.m_uvStep * float2( 0.0f,  1.0f));
    float left  = GetHeight(origUv + terrainData.m_uvStep * float2(-1.0f,  0.0f));

    OUT.m_bitangent = normalize(float3(0.0, terrainData.m_sampleSpacing * 2.0f, down - up));
    OUT.m_tangent = normalize(float3(terrainData.m_sampleSpacing * 2.0f, 0.0, right - left));
    OUT.m_normal = cross(OUT.m_tangent, OUT.m_bitangent);
    OUT.m_uv = uv;

    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
    {
        DirectionalLightShadow::GetShadowCoords(
            shadowIndex,
            worldPosition,
            OUT.m_shadowCoords);
    }
    
    return OUT;
}

ForwardPassOutput TerrainPBR_MainPassPS(VSOutput IN)
{
    // ------- Surface -------

    Surface surface;
    
    // Position, Normal, Roughness
    surface.position = IN.m_worldPosition.xyz;
    surface.normal = normalize(IN.m_normal);
    surface.roughnessLinear = TerrainMaterialSrg::m_roughness;
    surface.CalculateRoughnessA();

    // Albedo, SpecularF0
    const float specularF0Factor = 0.5f;
    float3 color = TerrainMaterialSrg::m_baseColor;
    surface.SetAlbedoAndSpecularF0(color, specularF0Factor, 0.0);

    // Clear Coat, Transmission
    surface.clearCoat.InitializeToZero();
    surface.transmission.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);

    // Shadow, Occlusion
    lightingData.shadowCoords = IN.m_shadowCoords;

    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}
