/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <TerrainSrg.azsli>
#include <TerrainCommon.azsli>
#include <TerrainDetailHelpers.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <Atom/Features/PBR/ForwardPassOutput.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/Shadow/DirectionalLightShadow.azsli>
#include <Atom/Features/PBR/Decals.azsli>

struct VSOutput
{
    float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_worldPosition : UV0;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV2;
};

VSOutput TerrainPBR_MainPassVS(VertexInput IN)
{
    VSOutput OUT;
 
    HeightContext heightContext;
    heightContext.Initialize(SceneSrg::m_heightmapImage, IN.m_position, ObjectSrg::m_patchData, SceneSrg::m_terrainWorldData.m_min, SceneSrg::m_terrainWorldData.m_max);

    if (heightContext.IsVertexOutsideOfTerrainBounds())
    {
        // Output a NaN to remove this vertex.
        OUT.m_position = 1.0 / 0.0;
        return OUT;
    }

    float height = 0.0;

    if (o_useTerrainSmoothing)
    {
        height = heightContext.GetSmoothedHeight(SceneSrg::m_heightmapImage, SceneSrg::HeightmapSampler);
    }
    else
    {
        height = heightContext.GetHeight(SceneSrg::m_heightmapImage);
    }

    OUT.m_worldPosition = float3(heightContext.m_xyPosition, height);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    OUT.m_normal = heightContext.CalculateNormal(SceneSrg::m_heightmapImage);

    // directional light shadow 
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
    {
        DirectionalLightShadow::GetShadowCoords(
            shadowIndex,
            OUT.m_worldPosition,
            OUT.m_normal,
            OUT.m_shadowCoords);
    }
    
    return OUT;
}

ForwardPassOutput TerrainPBR_MainPassPS(VSOutput IN)
{
    // ------- Surface -------
    Surface surface;
    surface.position = IN.m_worldPosition.xyz;
    surface.vertexNormal = normalize(IN.m_normal);

    float viewDistance = length(ViewSrg::m_worldPosition - surface.position);
    float detailFactor = saturate((viewDistance - TerrainMaterialSrg::m_detailFadeDistance) / max(TerrainMaterialSrg::m_detailFadeLength, EPSILON));
    float2 detailUv = IN.m_worldPosition.xy * TerrainMaterialSrg::m_detailTextureMultiplier;
    
    // ------- Normal -------
    float3 macroNormal = normalize(IN.m_normal);
    
    // ------- Macro Color / Normal -------
    float3 macroColor = TerrainMaterialSrg::m_baseColor.rgb;

    uint2 macroGridResolution = uint2(TerrainSrg::m_macroMaterialGrid.m_resolution >> 16, TerrainSrg::m_macroMaterialGrid.m_resolution & 0xFFFF);
    float macroTileSize = TerrainSrg::m_macroMaterialGrid.m_tileSize;
    float2 macroGridOffset = TerrainSrg::m_macroMaterialGrid.m_offset;
    uint2 macroGridPosition = (surface.position.xy - macroGridOffset) / macroTileSize;

    uint macroTileIndex = macroGridResolution.x * macroGridPosition.y + macroGridPosition.x;
    static const uint NumMacroMaterialsPerTile = 4;
    macroTileIndex *= NumMacroMaterialsPerTile;

    [unroll] for (uint i = 0; i < NumMacroMaterialsPerTile; ++i)
    {
        TerrainSrg::MacroMaterialData macroMaterialData = TerrainSrg::m_macroMaterialData[macroTileIndex + i];
        if ((macroMaterialData.m_flags & 1) == 0)
        {
            break; // No more macro materials for this tile
        }

        if (any(surface.position.xy < macroMaterialData.m_boundsMin) || any (surface.position.xy > macroMaterialData.m_boundsMax))
        {
            continue; // Macro material exists for this tile but is out of the bounds of this particular position
        }

        float2 macroUvSize = macroMaterialData.m_boundsMax - macroMaterialData.m_boundsMin;
        macroUvSize.x = -macroUvSize.x;
        float2 macroUv = (macroMaterialData.m_boundsMin - surface.position.xy) / macroUvSize;

        // The macro uv gradient can vary massively over the quad because different pixels may choose different macro materials with different UVs.
        // To fix, we use the world position scaled by the macro uv scale which should be fairly uniform across macro materials.
        float2 macroUvScale = IN.m_worldPosition.xy / macroUvSize;
        float2 ddx_macroUv = ddx(macroUvScale);
        float2 ddy_macroUv = ddy(macroUvScale);

        if (macroMaterialData.m_colorMapId != 0xFFFF)
        {
            macroColor = TerrainSrg::m_textures[macroMaterialData.m_colorMapId].SampleGrad(TerrainMaterialSrg::m_sampler, macroUv, ddx_macroUv, ddy_macroUv).rgb;
            macroColor = TransformColor(macroColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
        }

        if (macroMaterialData.m_normalMapId != 0xFFFF)
        {
            bool flipX = macroMaterialData.m_flags & 2;
            bool flipY = macroMaterialData.m_flags & 4;
            float factor = macroMaterialData.m_normalFactor;
        
            float2 sampledValue = SampleNormalXY(TerrainSrg::m_textures[macroMaterialData.m_normalMapId], TerrainMaterialSrg::m_sampler, macroUv, flipX, flipY);
            macroNormal = normalize(GetTangentSpaceNormal_Unnormalized(sampledValue, factor));
        }
        break;
    }
    
    // ------- Base Color -------

    DetailSurface detailSurface = GetDefaultDetailSurface();
    float2 detailRegionCoord = surface.position.xy * TerrainSrg::m_detailMaterialIdScale;
    bool hasDetailSurface = false;

    // Only sample detail textures if inside where detail materials should be drawn.
    if (detailFactor < 1.0)
    {
        hasDetailSurface = GetDetailSurface(detailSurface, detailRegionCoord, detailUv);
    }

    const float macroRoughness = 1.0;
    const float macroSpecularF0 = 0.5;
    const float macroMetalness = 0.0;

    if (hasDetailSurface)
    {
        float3 blendedColor = lerp(detailSurface.m_color, macroColor, detailFactor);
        float blendedSpecularF0 = lerp(detailSurface.m_specularF0, macroSpecularF0, detailFactor);
        surface.SetAlbedoAndSpecularF0(blendedColor, blendedSpecularF0, detailSurface.m_metalness * (1.0 - detailFactor));

        surface.roughnessLinear = lerp(detailSurface.m_roughness, macroRoughness, detailFactor);
        surface.CalculateRoughnessA();

        detailSurface.m_normal = ReorientTangentSpaceNormal(macroNormal, detailSurface.m_normal);
        surface.normal = lerp(detailSurface.m_normal, macroNormal, detailFactor);
        surface.normal = normalize(surface.normal);
    }
    else
    {
        surface.normal = macroNormal;
        surface.SetAlbedoAndSpecularF0(macroColor, macroSpecularF0, macroMetalness);
        surface.roughnessLinear = macroRoughness;
        surface.CalculateRoughnessA();
    }

    // Clear Coat, Transmission (Not used for terrain)
    surface.clearCoat.InitializeToZero();
    surface.transmission.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);

    // Shadow, Occlusion
    lightingData.shadowCoords = IN.m_shadowCoords;
    lightingData.diffuseAmbientOcclusion = detailSurface.m_occlusion;

    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}
