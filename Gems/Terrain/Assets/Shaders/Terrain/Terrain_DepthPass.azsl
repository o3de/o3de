/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>
#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include "TerrainCommon.azsli"
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <TerrainSrg.azsli>

struct VSDepthOutput
{
    float4 m_position : SV_Position;
    float2 m_cullDistance : SV_CullDistance;
};

VSDepthOutput MainVS(in VertexInput input)
{
    VSDepthOutput output;

    HeightContext heightContext;
    heightContext.Initialize(SceneSrg::m_heightmapImage, input.m_position, ObjectSrg::m_patchData, SceneSrg::m_terrainWorldData.m_min, SceneSrg::m_terrainWorldData.m_max);

    if (heightContext.IsVertexOutsideOfTerrainBounds())
    {
        // Output a NaN to remove this vertex.
        output.m_position = 1.0 / 0.0;
        return output;
    }

    float height = 0.0;

    if (o_useTerrainSmoothing)
    {
        height = heightContext.GetSmoothedHeight(SceneSrg::m_heightmapImage, SceneSrg::HeightmapSampler);
    }
    else
    {
        height = heightContext.GetHeight(SceneSrg::m_heightmapImage);
    }

    float3 worldPosition = float3(heightContext.m_xyPosition, height);
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));

    output.m_cullDistance = TerrainSrg::CalculateCullDistance(ObjectSrg::m_patchData.m_lodLevel, worldPosition);

    return output;
}
