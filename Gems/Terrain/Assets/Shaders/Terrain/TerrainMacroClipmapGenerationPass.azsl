/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <TerrainSrg.azsli>
#include <TerrainMaterialSrg.azsli>
#include "ClipmapComputeHelpers.azsli"
#include "TerrainMacroHelpers.azsli"

#define THREAD_NUM_X 8
#define THREAD_NUM_Y 8

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    RWTexture2DArray<float4> m_macroColorClipmaps;
    RWTexture2DArray<float2> m_macroNormalClipmaps;
}

[numthreads(THREAD_NUM_X,THREAD_NUM_Y,1)]
void MainCS(
    uint3 groupID : SV_GroupID,
    uint3 groupThreadID : SV_GroupThreadID)
{
    uint numberOfGroups = TerrainSrg::m_clipmapData.m_macroDispatchGroupCountX * TerrainSrg::m_clipmapData.m_macroDispatchGroupCountY;
    uint numberOfGroupThreads = THREAD_NUM_X * THREAD_NUM_Y;

    for (uint clipmapLevel = 0; clipmapLevel < TerrainSrg::m_clipmapData.m_macroClipmapStackSize; ++clipmapLevel)
    {
        for (uint updateRegionIndex = 0; updateRegionIndex < UpdateRegionMax; ++updateRegionIndex)
        {
            uint4 updateRegion = TerrainSrg::m_clipmapData.m_macroClipmapBoundsRegions[clipmapLevel + MacroClipmapStackSizeMax * updateRegionIndex];
            uint2 size = uint2(updateRegion.z - updateRegion.x, updateRegion.w - updateRegion.y);
            uint totalNumberOfTexels = size.x * size.y;

            uint totalStride = (totalNumberOfTexels + numberOfGroups - 1) / numberOfGroups;
            uint totalBegin = min(totalStride * (groupID.x + groupID.y * TerrainSrg::m_clipmapData.m_macroDispatchGroupCountX), totalNumberOfTexels);
            uint totalEnd = min(totalBegin + totalStride, totalNumberOfTexels);

            uint groupTotal = totalEnd - totalBegin;
            uint groupStride = (groupTotal + numberOfGroupThreads - 1) / numberOfGroupThreads;
            uint groupBegin = min(groupStride * (groupThreadID.x + groupThreadID.y * THREAD_NUM_X), groupTotal);
            uint groupEnd = min(groupBegin + groupStride, groupTotal);

            for (uint i = groupBegin; i < groupEnd; ++i)
            {
                uint texelFlatIndex = totalBegin + i;
                uint2 texelPosition = uint2(texelFlatIndex % size.x + updateRegion.x, texelFlatIndex / size.x + updateRegion.y);
                uint3 texelIndex = uint3(texelPosition, clipmapLevel);

                float2 worldPosition = GetCurrentWorldPositionFromMacroClipmaps(texelPosition, clipmapLevel);
                float clipmapScaleInv = GetMacroClipmapScaleInv(clipmapLevel);
                float2 positionDdx = ddxPosition(TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius, clipmapScaleInv);
                float2 positionDdy = ddyPosition(TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius, clipmapScaleInv);

                float3 macroColor = TerrainMaterialSrg::m_baseColor.rgb;
                float3 macroNormal = float3(0.0, 0.0, 1.0);
                SampleMacroTexture(worldPosition, positionDdx, positionDdy, macroColor, macroNormal);

                PassSrg::m_macroColorClipmaps[texelIndex] = float4(macroColor, 1.0);
                PassSrg::m_macroNormalClipmaps[texelIndex] = macroNormal.xy;
            }
        }
    }
}

