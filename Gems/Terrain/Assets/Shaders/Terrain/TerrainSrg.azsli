/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

static const uint MacroClipmapStackSizeMax = 16u;
static const uint DetailClipmapStackSizeMax = 16u;
static const uint SharedClipmapStackSizeMax = 16u; // = max(MacroClipmapStackSizeMax, DetailClipmapStackSizeMax)
// Each clipmap can have at most 6 update regions based on the current algorithm.
// Due to compilation limitation, the size of arrays must be direct constant.
static const uint UpdateRegionMax = 6u;
static const uint MacroClipmapUpdateRegionMax = 96u; // = MacroClipmapStackSizeMax * 6
static const uint DetailClipmapUpdateRegionMax = 96u; // = DetailClipmapStackSizeMax * 6

ShaderResourceGroupSemantic SRG_Terrain
{
    FrequencyId = 7;
};

ShaderResourceGroup TerrainSrg : SRG_Terrain
{
    struct MeshData
    {
        float3 m_mainCameraPosition;
        float m_firstLodDistance;
        float m_rcpClodDistance;
        float m_rcpGridSize;
        float m_gridToQuadScale;
    };

    struct DetailMaterialData
    {
        // Uv
        row_major float3x4 m_uvTransform;

        float3 m_baseColor;

        // Factor / Scale / Bias for input textures
        float m_baseColorFactor;

        float m_normalFactor;
        float m_metalFactor;
        float m_roughnessScale;
        float m_roughnessBias;

        float m_specularF0Factor;
        float m_occlusionFactor;
        float m_heightFactor;
        float m_heightOffset;

        float m_heightBlendFactor;
        float m_heightWeightClampFactor;

        // Flags
        uint m_flags; // see DetailTextureFlags

        // Image indices
        uint m_colorNormalImageIndices;
        uint m_roughnessMetalnessImageIndices;

        uint m_specularF0OcclusionImageIndices;
        uint m_heightImageIndex; // only first 16 bits used

        // 16 byte aligned
        uint m_padding;
    };

    struct MacroMaterialData
    {
        // bit 1 : Is this macro material used.
        // bit 2 : flip normal x
        // bit 3 : flip normal y
        uint m_flags;

        uint m_colorMapId;
        uint m_normalMapId;
        float m_normalFactor;
        float2 m_boundsMin;
        float2 m_boundsMax;
    };

    struct MacroMaterialGridInfo
    {
        uint m_resolution; // How many x/y tiles in grid. x & y stored in 16 bits each. Total number of entries in m_macroMaterialData will be x * y
        float m_tileSize; // Size of a tile in meters.
        float2 m_offset; // x/y offset of min x/y corner of grid.
    };

    struct MacroMaterialRefs
    {
        uint m_index01;
        uint m_index23;
    };

    struct ClipmapUpdateRegion
    {
        uint4 m_clipmapRegion;
        uint m_clipmapLevel;
        uint3 m_padding;
    };

    struct ClipmapData
    {
        // Current viewport size.
        float2 m_viewportSize;

        // The max range that the clipmap is covering.
        float m_macroClipmapMaxRenderRadius;
        float m_detailClipmapMaxRenderRadius;

        // The scale base between two adjacent clipmap layers.
        // For example, 3 means the (n+1)th clipmap covers 3^2 = 9 times
        // to what is covered by the nth clipmap.
        float m_macroClipmapScaleBase;
        float m_detailClipmapScaleBase;

        // Size of the clipmap stack.
        uint m_macroClipmapStackSize;
        uint m_detailClipmapStackSize;

        // The margin size of the edge of the clipmap where the data won't be used.
        float m_macroClipmapMarginSize;
        float m_detailClipmapMarginSize;

        // In addition to the above margin size used for updating,
        // this margin is a safety margin to avoid edge cases when blending or sampling.
        float m_extendedClipmapMarginSize;

        // The size of the clipmap image in each layer.
        // Given 2 copies in different types to save casting.
        float m_clipmapSizeFloat;
        uint m_clipmapSizeUint;

        // The texel position where blending to the next level should start. Equivalent to:
        // m_clipmapSizeFloat / 2.0 - m_macroClipmapMarginSize - m_extendedClipmapMarginSize
        // Cached for frequent access.
        float m_validMacroClipmapRadius;
        // Same as above, equivalent to:
        // m_clipmapSizeFloat / 2.0 - m_detailClipmapMarginSize - m_extendedClipmapMarginSize
        float m_validDetailClipmapRadius;

        // The size of the blending area between each clipmap level.
        float m_clipmapBlendSize;

        // The number of regions to be updated during the current frame.
        uint m_macroClipmapUpdateRegionCount;
        uint m_detailClipmapUpdateRegionCount;

        // Numbers match the compute shader invoking call dispatch(X, Y, 1).
        uint m_macroDispatchGroupCountX;
        uint m_macroDispatchGroupCountY;
        uint m_detailDispatchGroupCountX;
        uint m_detailDispatchGroupCountY;

        // Debug data
        // Enables debug overlay to indicate clipmap levels.
        float m_enableMacroClipmapOverlay;
        float m_enableDetailClipmapOverlay;

        // 0: macro color clipmap
        // 1: macro normal clipmap
        // 2: detail color clipmap
        // 3: detail normal clipmap
        // 4: detail height clipmap
        // 5: detail roughness clipmap
        // 6: detail specularF0 clipmap
        // 7: detail metalness clipmap
        // 8: detail occlusion clipmap
        uint m_debugClipmapId;

        // Which clipmap level to sample from, or texture array index.
        float m_debugClipmapLevel; // cast to float in CPU

        // How big the clipmap should appear on the screen.
        float m_debugScale;

        // Multiplier adjustment for final color output.
        float m_debugBrightness;

        // Clipmap centers in texel coordinates ranging [0, size).
        // Clipmap centers are the logical center of the texture, based on toroidal addressing.
        struct ClipmapCenter
        {
            uint2 m_macro;
            uint2 m_detail;
        };
        ClipmapCenter m_clipmapCenters[SharedClipmapStackSizeMax];

        // Clipmap centers in world coordinates.
        struct ClipmapWorldCenter
        {
            float2 m_macro;
            float2 m_detail;
        };
        ClipmapWorldCenter m_clipmapWorldCenters[SharedClipmapStackSizeMax];

        // A scale converting the length from the texture space to the world space.
        // For example: given texel (u0, v0) and (u1, v1), dtexel = sqrt((u0 - u1)^2, (v0 - v1)^2)
        //              dworld = dtexel * clipmapToWorldScale.
        struct ClipmapToWorldScale
        {
            float m_macro;
            float m_detail;
            float2 m_padding;
        };
        ClipmapToWorldScale m_clipmapToWorldScale[SharedClipmapStackSizeMax];
    };

    MeshData m_meshData;

    // Clipmap SRG
    ClipmapData m_clipmapData;

    // Clipmap Sampler
    Sampler m_clipmapSampler
    {
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
    
    // The region of the clipmap that needs update.
    // Each clipmap can have 0-6 regions to update each frame.
    StructuredBuffer<ClipmapUpdateRegion> m_macroClipmapUpdateRegions;
    StructuredBuffer<ClipmapUpdateRegion> m_detailClipmapUpdateRegions;

    Texture2DArray<float4> m_macroColorClipmaps;
    Texture2DArray<float2> m_macroNormalClipmaps;
    Texture2DArray<float4> m_detailColorClipmaps;
    Texture2DArray<float2> m_detailNormalClipmaps;
    Texture2DArray<float> m_detailHeightClipmaps;
    Texture2DArray<float> m_detailRoughnessClipmaps;
    Texture2DArray<float> m_detailSpecularF0Clipmaps;
    Texture2DArray<float> m_detailMetalnessClipmaps;
    Texture2DArray<float> m_detailOcclusionClipmaps;

    Texture2D<uint4> m_detailMaterialIdImage;
    StructuredBuffer<DetailMaterialData> m_detailMaterialData;

    StructuredBuffer<MacroMaterialData> m_macroMaterialData;
    StructuredBuffer<MacroMaterialRefs> m_macroMaterialGridRefs;
    MacroMaterialGridInfo m_macroMaterialGridInfo;
    
    Texture2D m_textures[]; // bindless array of all textures for detail and macro materials
    float m_detailMaterialIdScale;

    uint2 GetMacroGridResolution()
    {
        return uint2(m_macroMaterialGridInfo.m_resolution >> 16, m_macroMaterialGridInfo.m_resolution & 0xFFFF);
    }
    
    float CalculateClodDistance(uint lodLevel, float3 worldPosition)
    {
        float maxRange = m_meshData.m_firstLodDistance * float(1u << lodLevel);
        float viewDistanceToWorldPosition = length(m_meshData.m_mainCameraPosition - worldPosition);
        return maxRange - viewDistanceToWorldPosition;
    }
}

static const float MacroMaterialsPerTile = 4;
