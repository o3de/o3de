/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

static const uint MacroClipmapStackSizeMax = 16u;
static const uint DetailClipmapStackSizeMax = 16u;
static const uint StackSizeMax = 16u; // = max(MacroClipmapStackSizeMax, DetailClipmapStackSizeMax)

ShaderResourceGroupSemantic SRG_Terrain
{
    FrequencyId = 7;
};

ShaderResourceGroup TerrainSrg : SRG_Terrain
{
    struct DetailMaterialData
    {
        // Uv
        row_major float3x4 m_uvTransform;

        float3 m_baseColor;

        // Factor / Scale / Bias for input textures
        float m_baseColorFactor;

        float m_normalFactor;
        float m_metalFactor;
        float m_roughnessScale;
        float m_roughnessBias;

        float m_specularF0Factor;
        float m_occlusionFactor;
        float m_heightFactor;
        float m_heightOffset;

        float m_heightBlendFactor;
        float m_heightWeightClampFactor;

        // Flags
        uint m_flags; // see DetailTextureFlags

        // Image indices
        uint m_colorNormalImageIndices;
        uint m_roughnessMetalnessImageIndices;

        uint m_specularF0OcclusionImageIndices;
        uint m_heightImageIndex; // only first 16 bits used

        // 16 byte aligned
        uint m_padding;
    };

    struct MacroMaterialData
    {
        // bit 1 : Is this macro material used.
        // bit 2 : flip normal x
        // bit 3 : flip normal y
        uint m_flags;

        uint m_colorMapId;
        uint m_normalMapId;
        float m_normalFactor;
        float2 m_boundsMin;
        float2 m_boundsMax;
    };

    struct MacroMaterialGrid
    {
        uint m_resolution; // How many x/y tiles in grid. x & y stored in 16 bits each. Total number of entries in m_macroMaterialData will be x * y
        float m_tileSize; // Size of a tile in meters.
        float2 m_offset; // x/y offset of min x/y corner of grid.
    };

    struct ClipmapData
    {
        // The 2D xy-plane view position where the main camera is.
        float2 m_previousViewPosition;
        float2 m_currentViewPosition;

        // 2D xy-plane world bounds defined by the terrain.
        float2 m_worldBoundsMin;
        float2 m_worldBoundsMax;

        //! The max range that the clipmap is covering.
        float m_macroClipmapMaxRenderRadius;
        float m_detailClipmapMaxRenderRadius;

        //! The scale base between two adjacent clipmap layers.
        //! For example, 3 means the (n+1)th clipmap covers 3^2 = 9 times
        //! to what is covered by the nth clipmap.
        float m_macroClipmapScaleBase;
        float m_detailClipmapScaleBase;

        //! Size of the clipmap stack.
        uint m_macroClipmapStackSize;
        uint m_detailClipmapStackSize;

        //! The size of the clipmap image in each layer.
        float m_clipmapSize;
        
        uint m_padding;

        // Clipmap centers in normalized UV coordinates [0, 1].
        // xy represent previous clipmap centers, zw represent current clipmap centers.
        // (Array elements will always be padded to 16, a float4 size. Storing both centers in float4 saves bandwidth.)
        // They are used for toroidal addressing and may move each frame based on the view point movement.
        // The move distance is scaled differently in each layer.
        float4 m_macroClipmapCenters[MacroClipmapStackSizeMax];
        float4 m_detailClipmapCenters[DetailClipmapStackSizeMax];

        // A list of reciprocal the clipmap scale [s],
        // where 1 pixel in the current layer of clipmap represents s meters. 
        // Fast lookup list to avoid redundant calculation in shaders.
        // x: macro; y: detail
        float4 m_clipmapScaleInv[StackSizeMax];
    };

    // Clipmap SRG
    ClipmapData m_clipmapData;

    Texture2DArray<float4> m_macroColorClipmaps;
    Texture2DArray<float2> m_macroNormalClipmaps;
    Texture2DArray<float4> m_detailColorClipmaps;
    Texture2DArray<float2> m_detailNormalClipmaps;
    Texture2DArray<float> m_detailHeightClipmaps;
    Texture2DArray<float> m_detailRoughnessClipmaps;
    Texture2DArray<float> m_detailSpecularF0Clipmaps;
    Texture2DArray<float> m_detailMetalnessClipmaps;
    Texture2DArray<float> m_detailOcclusionClipmaps;

    Texture2D<uint4> m_detailMaterialIdImage;
    StructuredBuffer<DetailMaterialData> m_detailMaterialData;

    StructuredBuffer<MacroMaterialData> m_macroMaterialData;
    MacroMaterialGrid m_macroMaterialGrid;
    
    Texture2D m_textures[]; // bindless array of all textures for detail and macro materials
    float m_detailMaterialIdScale;

    uint2 GetMacroGridResolution()
    {
        return uint2(m_macroMaterialGrid.m_resolution >> 16, m_macroMaterialGrid.m_resolution & 0xFFFF);
    }
}

static const float MacroMaterialsPerTile = 4;
