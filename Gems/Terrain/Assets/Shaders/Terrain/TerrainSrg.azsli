/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroupSemantic SRG_Terrain
{
    FrequencyId = 7;
};

ShaderResourceGroup TerrainSrg : SRG_Terrain
{
    struct DetailMaterialData
    {
        // Uv
        row_major float3x4 m_uvTransform;

        float3 m_baseColor;

        // Factor / Scale / Bias for input textures
        float m_baseColorFactor;

        float m_normalFactor;
        float m_metalFactor;
        float m_roughnessScale;
        float m_roughnessBias;

        float m_specularF0Factor;
        float m_occlusionFactor;
        float m_heightFactor;
        float m_heightOffset;

        float m_heightBlendFactor;
        float m_heightWeightClampFactor;

        // Flags
        uint m_flags; // see DetailTextureFlags

        // Image indices
        uint m_colorNormalImageIndices;
        uint m_roughnessMetalnessImageIndices;

        uint m_specularF0OcclusionImageIndices;
        uint m_heightImageIndex; // only first 16 bits used

        // 16 byte aligned
        uint m_padding;
    };

    struct MacroMaterialData
    {
        // bit 1 : Is this macro material used.
        // bit 2 : flip normal x
        // bit 3 : flip normal y
        uint m_flags;

        uint m_colorMapId;
        uint m_normalMapId;
        float m_normalFactor;
        float2 m_boundsMin;
        float2 m_boundsMax;
    };

    struct MacroMaterialGrid
    {
        uint m_resolution; // How many x/y tiles in grid. x & y stored in 16 bits each. Total number of entries in m_macroMaterialData will be x * y
        float m_tileSize; // Size of a tile in meters.
        float2 m_offset; // x/y offset of min x/y corner of grid.
    };

    Texture2D<uint4> m_detailMaterialIdImage;
    StructuredBuffer<DetailMaterialData> m_detailMaterialData;

    StructuredBuffer<MacroMaterialData> m_macroMaterialData;
    MacroMaterialGrid m_macroMaterialGrid;
    
    Texture2D m_textures[]; // bindless array of all textures for detail and macro materials
    float m_detailMaterialIdScale;

}

static const float MacroMaterialsPerTile = 4;
