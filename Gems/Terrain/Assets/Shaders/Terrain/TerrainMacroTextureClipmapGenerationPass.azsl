/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include "TerrainMacroTextureClipmapPassSrg.azsli"
#include "ClipmapComputeHelpers.azsli"
#include <Atom/RPI/TangentSpace.azsli>

void SampleMacroTexture(float2 worldPosition, uint clipmapLevel, out float3 macroColor, out float2 macroNormal)
{
    uint2 macroGridResolution = uint2(TerrainSrg::m_macroMaterialGrid.m_resolution >> 16, TerrainSrg::m_macroMaterialGrid.m_resolution & 0xFFFF);
    float macroTileSize = TerrainSrg::m_macroMaterialGrid.m_tileSize;
    float2 macroGridOffset = TerrainSrg::m_macroMaterialGrid.m_offset;
    uint2 macroGridPosition = (worldPosition - macroGridOffset) / macroTileSize;

    uint macroTileIndex = macroGridResolution.x * macroGridPosition.y + macroGridPosition.x;
    static const uint NumMacroMaterialsPerTile = 4;
    macroTileIndex *= NumMacroMaterialsPerTile;


    for (uint i = 0; i < NumMacroMaterialsPerTile; ++i)
    {
        TerrainSrg::MacroMaterialData macroMaterialData = TerrainSrg::m_macroMaterialData[macroTileIndex + i];
        if ((macroMaterialData.m_flags & 1) == 0)
        {
            break; // No more macro materials for this tile
        }

        if (any(worldPosition < macroMaterialData.m_boundsMin.xy) || any(worldPosition > macroMaterialData.m_boundsMax.xy))
        {
            continue; // Macro material exists for this tile but is out of the bounds of this particular position
        }

        float2 macroUvSize = macroMaterialData.m_boundsMax - macroMaterialData.m_boundsMin;
        macroUvSize.x = -1.0 / macroUvSize.x;
        macroUvSize.y = 1.0 / macroUvSize.y;
        float2 macroUv = (macroMaterialData.m_boundsMin - worldPosition) * macroUvSize;

        // The macro uv gradient can vary massively over the quad because different pixels may choose different macro materials with different UVs.
        // To fix, we use the world position scaled by the macro uv scale which should be fairly uniform across macro materials.
        float2 ddx_macroUv = ddxPosition(clipmapLevel) * macroUvSize;
        float2 ddy_macroUv = ddyPosition(clipmapLevel) * macroUvSize;

        if (macroMaterialData.m_colorMapId != 0xFFFF)
        {
            macroColor = TerrainSrg::m_textures[macroMaterialData.m_colorMapId].SampleGrad(TerrainMaterialSrg::m_sampler, macroUv, ddx_macroUv, ddy_macroUv).rgb;
            macroColor = TransformColor(macroColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
        }
        else
        {
            macroColor = TerrainMaterialSrg::m_baseColor.rgb;
        }

        if (macroMaterialData.m_normalMapId != 0xFFFF)
        {
            float2 sampledValue = TerrainSrg::m_textures[macroMaterialData.m_normalMapId][macroUv].xy;

            macroNormal = sampledValue;
        }
        else
        {
#if AZ_TRAIT_ASTC_COMPRESSION
            macroNormal = float2(0.5, 0.5);
#else
            macroNormal = float2(0.0, 0.0);
#endif
        }

        break;
    }
}

[numthreads(32,32,1)]
void MainCS(
    uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint2 pixelPosition = dispatchThreadID.xy;

    for (uint clipmapLevel = 0; clipmapLevel < CLIPMAP_STACK_SIZE; ++clipmapLevel)
    {
        float2 worldPosition = GetCurrentWorldPosition(pixelPosition, clipmapLevel);

        float3 macroColor;
        float2 macroNormal;
        SampleMacroTexture(worldPosition, clipmapLevel, macroColor, macroNormal);
        PassSrg::m_macroColorClipmaps[uint3(dispatchThreadID.xy, clipmapLevel)].rgba = float4(macroColor, 1.0);
        PassSrg::m_macroNormalClipmaps[uint3(dispatchThreadID.xy, clipmapLevel)].xy = macroNormal;
    }
}

