/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <TerrainSrg.azsli>
#include <TerrainMaterialSrg.azsli>
#include "ClipmapComputeHelpers.azsli"
#include "TerrainDetailHelpers.azsli"

#define THREAD_NUM_X 8
#define THREAD_NUM_Y 8
#define NO_DETAIL 0.0
#define HAS_DETAIL 1.0

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture2DArray<float4> m_macroColorClipmaps;
    Texture2DArray<float2> m_macroNormalClipmaps;
    RWTexture2DArray<float4> m_detailColorClipmaps;
    RWTexture2DArray<float2> m_detailNormalClipmaps;
    RWTexture2DArray<float> m_detailHeightClipmaps;
    RWTexture2DArray<float> m_detailRoughnessClipmaps;
    RWTexture2DArray<float> m_detailSpecularF0Clipmaps;
    RWTexture2DArray<float> m_detailMetalnessClipmaps;
    RWTexture2DArray<float> m_detailOcclusionClipmaps;
}

[numthreads(THREAD_NUM_X,THREAD_NUM_Y,1)]
void MainCS(
    uint3 groupID : SV_GroupID,
    uint3 groupThreadID : SV_GroupThreadID)
{
    uint numberOfGroups = TerrainSrg::m_clipmapData.m_detailDispatchGroupCountX * TerrainSrg::m_clipmapData.m_detailDispatchGroupCountY;
    uint numberOfGroupThreads = THREAD_NUM_X * THREAD_NUM_Y;

    for (uint clipmapLevel = 0; clipmapLevel < TerrainSrg::m_clipmapData.m_detailClipmapStackSize; ++clipmapLevel)
    {
        for (uint updateRegionIndex = 0; updateRegionIndex < UpdateRegionMax; ++updateRegionIndex)
        {
            uint4 updateRegion = TerrainSrg::m_clipmapData.m_detailClipmapBoundsRegions[clipmapLevel + DetailClipmapStackSizeMax * updateRegionIndex];
            uint2 size = uint2(updateRegion.z - updateRegion.x, updateRegion.w - updateRegion.y);
            uint totalNumberOfTexels = size.x * size.y;

            uint totalStride = (totalNumberOfTexels + numberOfGroups - 1) / numberOfGroups;
            uint totalBegin = min(totalStride * (groupID.x + groupID.y * TerrainSrg::m_clipmapData.m_detailDispatchGroupCountX), totalNumberOfTexels);
            uint totalEnd = min(totalBegin + totalStride, totalNumberOfTexels);

            uint groupTotal = totalEnd - totalBegin;
            uint groupStride = (groupTotal + numberOfGroupThreads - 1) / numberOfGroupThreads;
            uint groupBegin = min(groupStride * (groupThreadID.x + groupThreadID.y * THREAD_NUM_X), groupTotal);
            uint groupEnd = min(groupBegin + groupStride, groupTotal);

            for (uint i = groupBegin; i < groupEnd; ++i)
            {
                uint texelFlatIndex = totalBegin + i;
                uint2 texelPosition = uint2(texelFlatIndex % size.x + updateRegion.x, texelFlatIndex / size.x + updateRegion.y);
                uint3 texelIndex = uint3(texelPosition, clipmapLevel);

                float2 worldPosition = GetCurrentWorldPositionFromDetailClipmaps(texelPosition, clipmapLevel);

                if (any(worldPosition < TerrainSrg::m_clipmapData.m_worldBoundsMin) || any(worldPosition > TerrainSrg::m_clipmapData.m_worldBoundsMax))
                {
                    // alpha represents hasDetailSurface
                    PassSrg::m_detailColorClipmaps[texelIndex] = float4(TerrainMaterialSrg::m_baseColor.rgb, NO_DETAIL);
                    PassSrg::m_detailNormalClipmaps[texelIndex] = float2(0.0, 0.0);
                    PassSrg::m_detailHeightClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailRoughnessClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailSpecularF0Clipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailMetalnessClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailOcclusionClipmaps[texelIndex] = 0.0;
                    continue;
                }

                DetailSurface detailSurface;
                float2 detailRegionCoord = worldPosition * TerrainSrg::m_detailMaterialIdScale;
                float2 detailUv = worldPosition * TerrainMaterialSrg::m_detailTextureMultiplier;
                float clipmapScaleInv = GetDetailClipmapScaleInv(clipmapLevel);
                float2 detailUvDdx = ddxPosition(TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius, clipmapScaleInv) * TerrainMaterialSrg::m_detailTextureMultiplier;
                float2 detailUvDdy = ddyPosition(TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius, clipmapScaleInv) * TerrainMaterialSrg::m_detailTextureMultiplier;

                float2 distance = worldPosition - TerrainSrg::m_clipmapData.m_currentViewPosition;
                ClipmapLevel macroClipmapLevel = CalculateClosestClipmapLevel(
                    distance,
                    TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
                    TerrainSrg::m_clipmapData.m_macroClipmapScaleBase,
                    TerrainSrg::m_clipmapData.m_macroClipmapStackSize
                );

                float3 macroColor;
                if (macroClipmapLevel.m_nextLevel == TerrainSrg::m_clipmapData.m_macroClipmapStackSize)
                {
                    BilinearUvs macroClipmapUvs = CalculateClipmapUv(
                        distance,
                        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
                        GetMacroClipmapScaleInv(macroClipmapLevel.m_closestLevel),
                        GetCurrentMacroClipmapCenter(macroClipmapLevel.m_closestLevel)
                    );

                    macroColor = ColorBilinearSampling(TerrainSrg::m_macroColorClipmaps, macroClipmapUvs, macroClipmapLevel.m_closestLevel, 0.0).rgb;
                }
                else
                {
                    BilinearUvs macroClipmapUvs1 = CalculateClipmapUv(
                        distance,
                        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
                        GetMacroClipmapScaleInv(macroClipmapLevel.m_closestLevel),
                        GetCurrentMacroClipmapCenter(macroClipmapLevel.m_closestLevel)
                    );

                    BilinearUvs macroClipmapUvs2 = CalculateClipmapUv(
                        distance,
                        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
                        GetMacroClipmapScaleInv(macroClipmapLevel.m_nextLevel),
                        GetCurrentMacroClipmapCenter(macroClipmapLevel.m_nextLevel)
                    );

                    macroColor = ColorTrilinearSampling(TerrainSrg::m_macroColorClipmaps, macroClipmapUvs1, macroClipmapUvs2, macroClipmapLevel, 0.0).rgb;
                }

                bool hasDetailSurface = GetDetailSurface(detailSurface, detailRegionCoord, detailUv, detailUvDdx, detailUvDdy, macroColor);

                if (hasDetailSurface)
                {
                    float3 normal = normalize(detailSurface.m_normal);

                    // alpha represents hasDetailSurface
                    PassSrg::m_detailColorClipmaps[texelIndex] = float4(detailSurface.m_color, HAS_DETAIL);
                    PassSrg::m_detailNormalClipmaps[texelIndex] = float2(normal.xy);
                    PassSrg::m_detailHeightClipmaps[texelIndex] = detailSurface.m_height;
                    PassSrg::m_detailRoughnessClipmaps[texelIndex] = detailSurface.m_roughness;
                    PassSrg::m_detailSpecularF0Clipmaps[texelIndex] = detailSurface.m_specularF0;
                    PassSrg::m_detailMetalnessClipmaps[texelIndex] = detailSurface.m_metalness;
                    PassSrg::m_detailOcclusionClipmaps[texelIndex] = detailSurface.m_occlusion;
                }
                else
                {
                    // alpha represents hasDetailSurface
                    PassSrg::m_detailColorClipmaps[texelIndex] = float4(TerrainMaterialSrg::m_baseColor.rgb, NO_DETAIL);
                    PassSrg::m_detailNormalClipmaps[texelIndex] = float2(0.0, 0.0);
                    PassSrg::m_detailHeightClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailRoughnessClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailSpecularF0Clipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailMetalnessClipmaps[texelIndex] = 0.0;
                    PassSrg::m_detailOcclusionClipmaps[texelIndex] = 0.0;
                }
            }
        }
    }
}

