/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <../Materials/Types/MaterialInputs/RoughnessInput.azsli>
#include <../Materials/Types/MaterialInputs/MetallicInput.azsli>
#include <../Materials/Types/MaterialInputs/SpecularInput.azsli>
#include <../Materials/Types/MaterialInputs/NormalInput.azsli>
#include <TerrainSrg.azsli>
#include <TerrainMaterialSrg.azsli>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    struct PatchData
    {
        float2 m_xyTranslation;
        float m_xyScale;
        uint m_lodLevel;
        float m_rcpLodLevel;
    };

    PatchData m_patchData;

    // The below shouldn't be in this SRG but needs to be for now because the lighting functions depend on them.

    //! Reflection Probe (smallest probe volume that overlaps the object position)
    struct ReflectionProbeData
    {
        row_major float3x4 m_modelToWorld;
        row_major float3x4 m_modelToWorldInverse; // does not include extents
        float3 m_outerObbHalfLengths;
        float3 m_innerObbHalfLengths;
        float m_padding;
        bool m_useReflectionProbe;
        bool m_useParallaxCorrection;
        float m_exposure;
    };

    ReflectionProbeData m_reflectionProbeData;
    TextureCube m_reflectionProbeCubeMap;
    
    float4x4 GetReflectionProbeWorldMatrix()
    {
        float4x4 modelToWorld = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorld[0] = m_reflectionProbeData.m_modelToWorld[0];
        modelToWorld[1] = m_reflectionProbeData.m_modelToWorld[1];
        modelToWorld[2] = m_reflectionProbeData.m_modelToWorld[2];
        return modelToWorld;
    }

    float4x4 GetReflectionProbeWorldMatrixInverse()
    {
        float4x4 modelToWorldInverse = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorldInverse[0] = m_reflectionProbeData.m_modelToWorldInverse[0];
        modelToWorldInverse[1] = m_reflectionProbeData.m_modelToWorldInverse[1];
        modelToWorldInverse[2] = m_reflectionProbeData.m_modelToWorldInverse[2];
        return modelToWorldInverse;
    }
}

option bool o_useClipmap = false;
option bool o_useTerrainClod = true;

static const uint GridSize = 64;
static const float RcpGridSize = rcp(GridSize);

struct VertexInput
{
    float2 m_xyPosition : POSITION0;
    float1 m_zPosition : POSITION1;
    float2 m_xyNormal : NORMAL0;
    float1 m_lodZPosition : POSITION2;
    float2 m_lodXYNormal : NORMAL1;

    uint m_vertexId : SV_VertexID; // Used for continuous lod
};

float2 GetWorldXYPosition(in ObjectSrg::PatchData patchData, in float2 vertexPosition)
{
    return float2(patchData.m_xyTranslation + vertexPosition * patchData.m_xyScale);
}

void CalculateTerrainPosition(
    in SceneSrg::TerrainWorldData worldData, in ObjectSrg::PatchData patchData, in VertexInput input,
    out float3 worldPosition, out float4 position, out float2 cullDistance, out float3 normal)
{
    float2 worldXyPosition = GetWorldXYPosition(ObjectSrg::m_patchData, input.m_xyPosition);
    if (input.m_zPosition == 1.0)
    {
        // 1.0 means there is no height data at this vertex, so output a NaN to remove this vertex.
        position = 1.0 / 0.0;
        return;
    }

    float height = worldData.m_zMin + input.m_zPosition * worldData.m_zExtents;

    worldPosition = float3(GetWorldXYPosition(patchData, input.m_xyPosition), height);
    cullDistance = TerrainSrg::CalculateCullDistance(patchData.m_lodLevel, worldPosition);
    normal = float3(input.m_xyNormal, 0.0);

    if (o_useTerrainClod)
    {
        const float quadSize = patchData.m_xyScale * RcpGridSize;
        const float quadDiagonal = quadSize * sqrt(2.0);
        float clodPadding = quadDiagonal * 2; // pad enough to handle a diagonal on the quad from the next lod (which will be 2x the size).
        float clodBlend = saturate((cullDistance.y - clodPadding) * TerrainSrg::m_meshData.m_rcpClodDistance * patchData.m_rcpLodLevel);
        float lodHeight = worldData.m_zMin + input.m_lodZPosition * worldData.m_zExtents;
        worldPosition.z = lerp(lodHeight, height, clodBlend);

        normal = float3(lerp(input.m_lodXYNormal, input.m_xyNormal, clodBlend), 0.0);
    }

    normal.z = saturate(sqrt(1.0 - normal.x * normal.x - normal.y * normal.y));
    position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));
}
