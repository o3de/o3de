/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <TerrainSrg.azsli>
#include <TerrainMaterialSrg.azsli>
#include <Atom/Features/PBR/Lights/ReflectionProbeData.azsli>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    struct PatchData
    {
        float2 m_xyTranslation;
        float m_xyScale;
        uint m_lodLevel;
        float m_rcpLodLevel;
    };

    PatchData m_patchData;

    // These shouldn't be in this SRG but needs to be for now because the lighting functions depend on them.
    ReflectionProbeData m_reflectionProbeData;
    TextureCube m_reflectionProbeCubeMap;
}

option bool o_useClipmap = false;
option bool o_useTerrainClod = true;

struct VertexInput
{
    float2 m_xyPosition : POSITION0;
    float1 m_zPosition : POSITION1;
    float2 m_xyNormal : NORMAL0;
    float1 m_lodZPosition : POSITION2;
    float2 m_lodXYNormal : NORMAL1;
};

float2 GetWorldXYPosition(in ObjectSrg::PatchData patchData, in float2 vertexPosition)
{
    return float2(patchData.m_xyTranslation + vertexPosition * patchData.m_xyScale);
}

void CalculateTerrainPosition(
    in SceneSrg::TerrainWorldData worldData, in ObjectSrg::PatchData patchData, in VertexInput input,
    out float3 worldPosition, out float4 position, out float3 normal)
{
    float2 worldXyPosition = GetWorldXYPosition(ObjectSrg::m_patchData, input.m_xyPosition);
    if (input.m_zPosition == 1.0)
    {
        // 1.0 means there is no height data at this vertex, so output a NaN to remove this vertex.
        position = 1.0 / 0.0;
        return;
    }

    float height = worldData.m_zMin + input.m_zPosition * worldData.m_zExtents;

    worldPosition = float3(GetWorldXYPosition(patchData, input.m_xyPosition), height);
    float clodDistance = TerrainSrg::CalculateClodDistance(patchData.m_lodLevel, worldPosition);
    normal = float3(input.m_xyNormal, 0.0);

    if (o_useTerrainClod)
    {
        float clodBlend = saturate(clodDistance * TerrainSrg::m_meshData.m_rcpClodDistance * patchData.m_rcpLodLevel);
        float lodHeight = worldData.m_zMin + input.m_lodZPosition * worldData.m_zExtents;
        worldPosition.z = lerp(lodHeight, height, clodBlend);

        normal = float3(lerp(input.m_lodXYNormal, input.m_xyNormal, clodBlend), 0.0);
    }

    normal.z = saturate(sqrt(1.0 - normal.x * normal.x - normal.y * normal.y));
    position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));
}
