/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <../Materials/Types/MaterialInputs/RoughnessInput.azsli>
#include <../Materials/Types/MaterialInputs/MetallicInput.azsli>
#include <../Materials/Types/MaterialInputs/SpecularInput.azsli>
#include <../Materials/Types/MaterialInputs/NormalInput.azsli>
#include <TerrainMaterialSrg.azsli>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    struct PatchData
    {
        float2 m_xyTranslation;
        float m_xyScale;
    };

    PatchData m_patchData;

    // The below shouldn't be in this SRG but needs to be for now because the lighting functions depend on them.

    //! Reflection Probe (smallest probe volume that overlaps the object position)
    struct ReflectionProbeData
    {
        row_major float3x4 m_modelToWorld;
        row_major float3x4 m_modelToWorldInverse; // does not include extents
        float3 m_outerObbHalfLengths;
        float3 m_innerObbHalfLengths;
        float m_padding;
        bool m_useReflectionProbe;
        bool m_useParallaxCorrection;
        float m_exposure;
    };

    ReflectionProbeData m_reflectionProbeData;
    TextureCube m_reflectionProbeCubeMap;
    
    float4x4 GetReflectionProbeWorldMatrix()
    {
        float4x4 modelToWorld = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorld[0] = m_reflectionProbeData.m_modelToWorld[0];
        modelToWorld[1] = m_reflectionProbeData.m_modelToWorld[1];
        modelToWorld[2] = m_reflectionProbeData.m_modelToWorld[2];
        return modelToWorld;
    }

    float4x4 GetReflectionProbeWorldMatrixInverse()
    {
        float4x4 modelToWorldInverse = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorldInverse[0] = m_reflectionProbeData.m_modelToWorldInverse[0];
        modelToWorldInverse[1] = m_reflectionProbeData.m_modelToWorldInverse[1];
        modelToWorldInverse[2] = m_reflectionProbeData.m_modelToWorldInverse[2];
        return modelToWorldInverse;
    }
}

option bool o_useTerrainSmoothing = false;
option bool o_useClipmap = false;

struct VertexInput
{
    float2 m_position : POSITION;
};

// This class is used to calculate heights and normals for terrain. Using a class for this was the easiest way to
// de-duplicate code between the forward and depth shaders.
class HeightContext
{
    float3 m_worldMin;
    float3 m_worldMax;
    float2 m_xyPosition;

    float2 m_textureSize;
    float2 m_rcpTextureSize;
    float2 m_sampleSpacing;
    float2 m_rcpSampleSpacing;

    float m_heightScale;
    int2 m_heightmapCoord;

    
    // Sample a texture with a 5 tap B-Spline. Consider ripping this out and putting in a more general location.
    // This function samples a 4x4 neighborhood around the uv. Normally this would take 16 samples, but by taking
    // advantage of bilinear filtering this can be done with 9 taps on the edges between pixels. The cost is further
    // reduced by dropping the diagonals.
    float SampleBSpline5Tap(Texture2D texture, SamplerState textureSampler, float2 uv, float2 textureSize, float2 rcpTextureSize)
    {
        // Think of sample locations in the 4x4 neighborhood as having a top left coordinate of 0,0 and
        // a bottom right coordinate of 3,3.

        // Find the position in texture space then round it to get the center of the 1,1 pixel (tc1)
        float2 texelPos = uv * textureSize;
        float2 tc1= floor(texelPos - 0.5) + 0.5;

        // Offset from center position to texel
        float2 f = texelPos - tc1;

        // Compute B-Spline weights based on the offset
        float2 OneMinusF = (1.0 - f);
        float2 OneMinusF2 = OneMinusF * OneMinusF;
        float2 OneMinusF3 = OneMinusF2 * OneMinusF;
        float2 w0 = OneMinusF3;
        float2 w1 = 4.0 + 3.0 * f * f * f - 6.0 * f * f;
        float2 w2 = 4.0 + 3.0 * OneMinusF3 - 6.0 * OneMinusF2;
        float2 w3 = f * f * f;

        float2 w12 = w1 + w2;

        // Compute uv coordinates for sampling the texture
        float2 tc0 = (tc1 - 1.0f) * rcpTextureSize;
        float2 tc3 = (tc1 + 2.0f) * rcpTextureSize;
        float2 tc12 = (tc1 + w2 / w12) * rcpTextureSize;

        // Compute sample weights
        float sw0 = w12.x * w12.y; // middle
        float sw1 = w12.x * w0.y;  // top
        float sw2 = w0.x  * w12.y; // left
        float sw3 = w12.x * w3.y;  // bottom
        float sw4 = w3.x  * w12.y; // right

        // total weight of samples to normalize result.
        float totalWeight = sw0 + sw1 + sw2 + sw3 + sw4;

        float result = 0.0f;
        result += texture.SampleLevel(textureSampler, float2(tc12.x, tc12.y), 0.0).r * sw0;
        result += texture.SampleLevel(textureSampler, float2(tc12.x,  tc0.y), 0.0).r * sw1;
        result += texture.SampleLevel(textureSampler, float2( tc0.x, tc12.y), 0.0).r * sw2;
        result += texture.SampleLevel(textureSampler, float2(tc12.x,  tc3.y), 0.0).r * sw3;
        result += texture.SampleLevel(textureSampler, float2( tc3.x, tc12.y), 0.0).r * sw4;

        return result / totalWeight;
    }

    float2 GetWorldXYPosition(in ObjectSrg::PatchData patchData, in float2 vertexPosition)
    {
        return float2(patchData.m_xyTranslation + vertexPosition * patchData.m_xyScale);
    }

    float2 GetHeightmapUv(in float2 position, in float2 worldMin, in float2 worldMax)
    {
        return (position - worldMin) / (worldMax - worldMin);
    }

    int2 GetHeightmapCoord(in float2 position, in float2 rcpSampleSpacing, in float2 worldMin)
    {
        return int2((position - worldMin) * rcpSampleSpacing);
    }

    float GetHeight(Texture2D heightmapImage, int2 offset = int2(0, 0))
    {
        float height = heightmapImage.Load(int3(m_heightmapCoord + offset, 0)).r;
        return m_worldMin.z + height * m_heightScale;
    }

    float GetSmoothedHeight(Texture2D heightmapImage, SamplerState heightmapSampler)
    {
        float2 uv = GetHeightmapUv(m_xyPosition, m_worldMin.xy, m_worldMax.xy);
        float2 halfStep = m_rcpTextureSize * 0.5;
        uv = uv * (1.0 - m_rcpTextureSize) + halfStep;
        float height = SampleBSpline5Tap(heightmapImage, heightmapSampler, uv, m_textureSize, m_rcpTextureSize);
        return m_worldMin.z + height * (m_worldMax.z - m_worldMin.z);
    }

    float3 CalculateNormal(Texture2D heightmapImage)
    {
        float up    = GetHeight(heightmapImage, int2( 0, -1));
        float right = GetHeight(heightmapImage, int2( 1,  0));
        float down  = GetHeight(heightmapImage, int2( 0,  1));
        float left  = GetHeight(heightmapImage, int2(-1,  0));

        float3 bitangent = normalize(float3(0.0, m_sampleSpacing.y * 2.0f, down - up));
        float3 tangent = normalize(float3(m_sampleSpacing.x * 2.0f, 0.0, right - left));
        return normalize(cross(tangent, bitangent));
    }

    bool IsVertexOutsideOfTerrainBounds()
    {
        return (any(m_xyPosition < m_worldMin.xy) ||
                any(m_xyPosition > m_worldMax.xy));
    }

    void Initialize(Texture2D heightmapImage, float2 vertexPosition, ObjectSrg::PatchData patchData, float3 worldMin, float3 worldMax)
    {
        m_worldMin = worldMin;
        m_worldMax = worldMax;
        m_xyPosition = GetWorldXYPosition(patchData, vertexPosition);

        heightmapImage.GetDimensions(m_textureSize.x, m_textureSize.y);
        m_rcpTextureSize = rcp(m_textureSize);
        m_sampleSpacing = (worldMax.xy - worldMin.xy) * m_rcpTextureSize;
        m_rcpSampleSpacing = rcp(m_sampleSpacing);

        m_heightScale = worldMax.z - worldMin.z;
        m_heightmapCoord = GetHeightmapCoord(m_xyPosition, m_rcpSampleSpacing, worldMin.xy);
    }
};
