/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>
#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include "TerrainCommon.azsli"

struct VertexOutput
{
    linear centroid float4 m_position : SV_Position;
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float m_height : UV;
};

struct ForwardPassOutput
{
    float4 m_diffuseColor  : SV_Target0;     //!< RGB = Diffuse Lighting, A = Blend Alpha (for blended surfaces) OR A = special encoding of surfaceScatteringFactor, m_subsurfaceScatteringQuality, o_enableSubsurfaceScattering
    float4 m_specularColor : SV_Target1;     //!< RGB = Specular Lighting, A = Unused
    float4 m_albedo : SV_Target2;            //!< RGB = Surface albedo pre-multiplied by other factors that will be multiplied later by diffuse GI, A = specularOcclusion
    float4 m_specularF0 : SV_Target3;        //!< RGB = Specular F0, A = roughness
    float4 m_normal : SV_Target4;            //!< RGB10 = EncodeNormalSignedOctahedron(worldNormal), A2 = multiScatterCompensationEnabled
};

struct PixelOutput
{
     float4 m_color : SV_Target0;
};  

VertexOutput MainVS(in VertexInput input)
{
    VertexOutput output;
    ObjectSrg::TerrainData terrainData = ObjectSrg::m_terrainData;

    float2 uv = input.m_uv;
    float2 origUv = lerp(terrainData.m_uvMin, terrainData.m_uvMax, uv);
    output.m_position = GetTerrainProjectedPosition(terrainData, input.m_position, origUv);

    // Calculate normal
    float up    = GetHeight(origUv + terrainData.m_uvStep * float2( 0.0f, -1.0f));
    float right = GetHeight(origUv + terrainData.m_uvStep * float2( 1.0f,  0.0f));
    float down  = GetHeight(origUv + terrainData.m_uvStep * float2( 0.0f,  1.0f));
    float left  = GetHeight(origUv + terrainData.m_uvStep * float2(-1.0f,  0.0f));

    output.m_bitangent = normalize(float3(0.0, terrainData.m_sampleSpacing * 2.0f, down - up));
    output.m_tangent = normalize(float3(terrainData.m_sampleSpacing * 2.0f, 0.0, right - left));
    output.m_normal = cross(output.m_tangent, output.m_bitangent);

    output.m_height = GetHeight(origUv);
    return output;
}

ForwardPassOutput MainPS(in VertexOutput input)
{
    ForwardPassOutput output;

    float3 lightDirection = normalize(float3(-1.0, 1.0, -1.0));
    float3 lightIntensity = float3(1.0, 1.0, 1.0);
    if (SceneSrg::m_directionalLightCount > 0)
    {
        lightDirection = SceneSrg::m_directionalLights[0].m_direction;
        lightIntensity = SceneSrg::m_directionalLights[0].m_rgbIntensityLux;
    }
    
    // Fake light intensity ranges from 1.0 for normals directly facing the light to zero for those
    // directly facing away.
    const float minLight = 0.01;
    const float midLight = 0.1;
    float lightDot = dot(normalize(input.m_normal), -lightDirection);
    lightIntensity *= lightDot > 0.0 ? 
        lightDot * (1.0 - midLight) + midLight : // surface facing light
        (lightDot + 1.0) * (midLight - minLight) + minLight; // surface facing away

    output.m_diffuseColor.rgb = 0.5 * lightIntensity;
    output.m_diffuseColor.a = 0.0f;

    output.m_specularColor.rgb = 0.0;

    output.m_albedo.rgb = 0.25 + input.m_height * 0.5;
    output.m_albedo.a = 0.0;

    output.m_specularF0.rgb = 0.04;
    output.m_specularF0.a = 1.0;

    output.m_normal.rgb = input.m_normal;
    output.m_normal.a = 0.0;

    return output;
}
