/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <TerrainDetailHelpers.azsli>

// Clipmap levels
//         |<- clipmap size ->|
// --------|------------------|-------- level 0
//   ------|------------------|------   level 1
//     ----|------------------|----     level 2
//       --|------------------|--       level 3
//                 ...                   ...
//         |------------------|         level n = stack size - 1 (always covers the area defined by max render size)

float GetMacroClipmapScaleInv(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_clipmapScaleInv[clipmapLevel].x;
}

float GetDetailClipmapScaleInv(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_clipmapScaleInv[clipmapLevel].y;
}

float2 GetPreviousMacroClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_macroClipmapCenters[clipmapLevel].xy;
}

float2 GetCurrentMacroClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_macroClipmapCenters[clipmapLevel].zw;
}

float2 GetPreviousDetailClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_detailClipmapCenters[clipmapLevel].xy;
}

float2 GetCurrentDetailClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_detailClipmapCenters[clipmapLevel].zw;
}

// Get the world position at the pixel position in a clipmap.
// Note: clipmap center is dynamic because we are using toroidal addressing. It's not always at the middle.
float2 GetWorldPosition(float2 clipmapCenter, uint2 pixelPosition, uint clipmapLevel, float clipmapScaleInv, float maxRenderDistance)
{
    float2 normalizedPixelPosition = (pixelPosition.xy + 0.5) / TerrainSrg::m_clipmapData.m_clipmapSize;

    float2 distance = normalizedPixelPosition - clipmapCenter;

    // Toroidal addressing:
    // If distance is out of the normalized range (-0.5, 0.5), meaning we need to start from the other side.
    // The logic is equivalent to a modulation. Using step function for acceleration.
    distance.x -= step(0.5, distance.x);
    distance.x += step(distance.x, -0.5);
    distance.y -= step(0.5, distance.y);
    distance.y += step(distance.y, -0.5);

    float2 viewRelativePosition = distance * (maxRenderDistance * 2.0f * clipmapScaleInv);
    return TerrainSrg::m_clipmapData.m_currentViewPosition + viewRelativePosition;
}

float2 GetCurrentWorldPositionFromMacroClipmaps(uint2 pixelPosition, uint clipmapLevel)
{
    float2 currentClipmapCenter = GetCurrentMacroClipmapCenter(clipmapLevel);
    float clipmapScaleInv = GetMacroClipmapScaleInv(clipmapLevel);
    float maxRenderDistance = TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderDistance;
    return GetWorldPosition(currentClipmapCenter, pixelPosition, clipmapLevel, clipmapScaleInv, maxRenderDistance);
}

float2 GetCurrentWorldPositionFromDetailClipmaps(uint2 pixelPosition, uint clipmapLevel)
{
    float2 currentClipmapCenter = GetCurrentDetailClipmapCenter(clipmapLevel);
    float clipmapScaleInv = GetDetailClipmapScaleInv(clipmapLevel);
    float maxRenderDistance = TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderDistance;
    return GetWorldPosition(currentClipmapCenter, pixelPosition, clipmapLevel, clipmapScaleInv, maxRenderDistance);
}

float2 ddxPosition(float maxRenderDistance, float clipmapScaleInv)
{
    float dx = maxRenderDistance * 2.0 * clipmapScaleInv / TerrainSrg::m_clipmapData.m_clipmapSize;
    return float2(dx, 0.0);
}

float2 ddyPosition(float maxRenderDistance, float clipmapScaleInv)
{
    float dy = maxRenderDistance * 2.0 * clipmapScaleInv / TerrainSrg::m_clipmapData.m_clipmapSize;
    return float2(0.0, dy);
}

struct ClipmapSample
{
    float3 m_macroColor;
    float3 m_macroNormal;
    bool   m_hasMacro;  // false if world position is out of the clipmap range. Needs increasing max render distance.
    bool   m_hasDetail; // false if the position doesn't have detail or out of the clipmap range.
    DetailSurface m_detailSurface;
};

float3 UnpackNormal(float2 packedNormal)
{
    float z = sqrt(1.0 - packedNormal.x * packedNormal.x - packedNormal.y * packedNormal.y);
    return float3(packedNormal.xy, z);
}

// Calculate the most detailed clipmap level.
uint CalculateClosestClipmapLevel(
    float2 distanceFromViewPosition,
    float maxRenderDistance,
    float clipmapScaleBase,
    uint clipmapStackSize
)
{
    float2 maxRenderSize = float2(maxRenderDistance, maxRenderDistance);
    // The top clipmap's render distance
    float2 minRenderSize = maxRenderSize / pow(clipmapScaleBase, (float)(clipmapStackSize - 1u));

    float2 clampedDistance = clamp(minRenderSize, abs(distanceFromViewPosition), maxRenderSize);
    float2 distanceRatio = maxRenderSize / clampedDistance;
    // Due to clamping, the max result of log is (clipmapStackSize - 1u), which falls into the first clipmap
    uint clipmapLevel = clipmapStackSize - 1u - uint(floor(log(min(distanceRatio.x, distanceRatio.y))/log(clipmapScaleBase)));

    return clipmapLevel;
}

uint2 CalculateClipmapUv(
    float2 distanceFromViewPosition,
    float maxRenderDistance,
    float clipmapScaleInv,
    float2 clipmapCenter
)
{
    float2 normalizedDistance = distanceFromViewPosition / (maxRenderDistance * 2.0 * clipmapScaleInv);
    float2 normalizedPixelPosition = clipmapCenter + normalizedDistance;
    // By toroidal addressing, the normalized position can only fall into [-1.0, 2.0].
    // We can use fraction after shifting 1.0 to get the actual position.
    normalizedPixelPosition = frac(normalizedPixelPosition + float2(1.0, 1.0));

    return uint2(normalizedPixelPosition * TerrainSrg::m_clipmapData.m_clipmapSize);
}

ClipmapSample SampleClipmap(float2 worldPosition)
{
    ClipmapSample data;

    float2 distance = worldPosition - TerrainSrg::m_clipmapData.m_currentViewPosition;
    float2 absDistance = abs(distance);
    if (absDistance.x > TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderDistance || absDistance.y > TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderDistance)
    {
        data.m_hasMacro = false;
        data.m_hasDetail = false;
        return data;
    }
    data.m_hasMacro = true;

    uint macroClipmapLevel = CalculateClosestClipmapLevel(
        distance,
        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderDistance,
        TerrainSrg::m_clipmapData.m_macroClipmapScaleBase,
        TerrainSrg::m_clipmapData.m_macroClipmapStackSize
    );
    uint2 macroClipmapUv = CalculateClipmapUv(
        distance,
        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderDistance,
        GetMacroClipmapScaleInv(macroClipmapLevel),
        GetCurrentMacroClipmapCenter(macroClipmapLevel)
    );
    uint3 macroTexelIndex = uint3(macroClipmapUv, macroClipmapLevel);

    float4 macroColor = TerrainSrg::m_macroColorClipmaps[macroTexelIndex];
    float2 macroNormalPacked = TerrainSrg::m_macroNormalClipmaps[macroTexelIndex];

    data.m_macroColor = macroColor.rgb;
    data.m_macroNormal = UnpackNormal(macroNormalPacked);

    if (absDistance.x > TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderDistance || absDistance.y > TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderDistance)
    {
        data.m_hasDetail = false;
    }
    else
    {
        uint detailClipmapLevel = CalculateClosestClipmapLevel(
            distance,
            TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderDistance,
            TerrainSrg::m_clipmapData.m_detailClipmapScaleBase,
            TerrainSrg::m_clipmapData.m_detailClipmapStackSize
        );
        uint2 detailClipmapUv = CalculateClipmapUv(
            distance,
            TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderDistance,
            GetDetailClipmapScaleInv(detailClipmapLevel),
            GetCurrentDetailClipmapCenter(detailClipmapLevel)
        );
        uint3 detailTexelIndex = uint3(detailClipmapUv, detailClipmapLevel);

        float4 detailColor = TerrainSrg::m_detailColorClipmaps[detailTexelIndex];
        // alpha represents hasDetailSurface, 1.0 for true and 0.0 for false.
        data.m_hasDetail = detailColor.a == 1.0;

        if (data.m_hasDetail)
        {
            float2 detailNormalPacked = TerrainSrg::m_detailNormalClipmaps[detailTexelIndex];
            float detailHeight = TerrainSrg::m_detailHeightClipmaps[detailTexelIndex];
            float detailRoughness = TerrainSrg::m_detailRoughnessClipmaps[detailTexelIndex];
            float detailSpecularF0 = TerrainSrg::m_detailSpecularF0Clipmaps[detailTexelIndex];
            float detailMetalness = TerrainSrg::m_detailMetalnessClipmaps[detailTexelIndex];
            float detailOcclusion = TerrainSrg::m_detailOcclusionClipmaps[detailTexelIndex];

            data.m_detailSurface.m_color = detailColor.rgb;
            data.m_detailSurface.m_normal = UnpackNormal(detailNormalPacked);
            data.m_detailSurface.m_roughness = detailRoughness;
            data.m_detailSurface.m_specularF0 = detailSpecularF0;
            data.m_detailSurface.m_metalness = detailMetalness;
            data.m_detailSurface.m_occlusion = detailOcclusion;
            data.m_detailSurface.m_height = detailHeight;
        }
    }

    return data;
}
