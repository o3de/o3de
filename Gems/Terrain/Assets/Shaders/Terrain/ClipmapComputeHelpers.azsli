/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <TerrainDetailHelpers.azsli>

// A bias epsilon to shift the distance by a little bit
// so that what is used to fall onto the edge of the clipmap
// will instead fall onto the next layer of clipmap.
static const float RenderDistanceBias = 1.001;
// Where 2 layers of clipmap start to blend.
// Must be bigger than the rcp of corresponding clipmap scale base.
// e.g. 0.8 means the point should blend the next layer when it is off 80% from the current clipmap center.
static const float BlendingStartFactor = 0.8;

// Clipmap levels
//         |<- clipmap size ->|
// --------|------------------|-------- level 0
//   ------|------------------|------   level 1
//     ----|------------------|----     level 2
//       --|------------------|--       level 3
//                 ...                   ...
//         |------------------|         level n = stack size - 1 (always covers the area defined by max render size)

float GetMacroClipmapScaleInv(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_clipmapScaleInv[clipmapLevel].x;
}

float GetDetailClipmapScaleInv(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_clipmapScaleInv[clipmapLevel].y;
}

float2 GetPreviousMacroClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_macroClipmapCenters[clipmapLevel].xy;
}

float2 GetCurrentMacroClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_macroClipmapCenters[clipmapLevel].zw;
}

float2 GetPreviousDetailClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_detailClipmapCenters[clipmapLevel].xy;
}

float2 GetCurrentDetailClipmapCenter(uint clipmapLevel)
{
    return TerrainSrg::m_clipmapData.m_detailClipmapCenters[clipmapLevel].zw;
}

// Get the world position at the pixel position in a clipmap.
// Note: clipmap center is dynamic because we are using toroidal addressing. It's not always at the middle.
float2 GetWorldPosition(float2 clipmapCenter, uint2 pixelPosition, uint clipmapLevel, float clipmapScaleInv, float maxRenderDistance)
{
    float2 normalizedPixelPosition = (pixelPosition.xy + 0.5) / TerrainSrg::m_clipmapData.m_clipmapSize;

    float2 distance = normalizedPixelPosition - clipmapCenter;

    // Toroidal addressing:
    // If distance is out of the normalized range (-0.5, 0.5), meaning we need to start from the other side.
    // The logic is equivalent to a modulation. Using step function for acceleration.
    distance.x -= step(0.5, distance.x);
    distance.x += step(distance.x, -0.5);
    distance.y -= step(0.5, distance.y);
    distance.y += step(distance.y, -0.5);

    float2 viewRelativePosition = distance * (maxRenderDistance * 2.0f * clipmapScaleInv);
    return TerrainSrg::m_clipmapData.m_currentViewPosition + viewRelativePosition;
}

float2 GetCurrentWorldPositionFromMacroClipmaps(uint2 pixelPosition, uint clipmapLevel)
{
    float2 currentClipmapCenter = GetCurrentMacroClipmapCenter(clipmapLevel);
    float clipmapScaleInv = GetMacroClipmapScaleInv(clipmapLevel);
    float maxRenderDistance = TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius;
    return GetWorldPosition(currentClipmapCenter, pixelPosition, clipmapLevel, clipmapScaleInv, maxRenderDistance);
}

float2 GetCurrentWorldPositionFromDetailClipmaps(uint2 pixelPosition, uint clipmapLevel)
{
    float2 currentClipmapCenter = GetCurrentDetailClipmapCenter(clipmapLevel);
    float clipmapScaleInv = GetDetailClipmapScaleInv(clipmapLevel);
    float maxRenderDistance = TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius;
    return GetWorldPosition(currentClipmapCenter, pixelPosition, clipmapLevel, clipmapScaleInv, maxRenderDistance);
}

float2 ddxPosition(float maxRenderDistance, float clipmapScaleInv)
{
    float dx = maxRenderDistance * 2.0 * clipmapScaleInv / TerrainSrg::m_clipmapData.m_clipmapSize;
    return float2(dx, 0.0);
}

float2 ddyPosition(float maxRenderDistance, float clipmapScaleInv)
{
    float dy = maxRenderDistance * 2.0 * clipmapScaleInv / TerrainSrg::m_clipmapData.m_clipmapSize;
    return float2(0.0, dy);
}

struct ClipmapSample
{
    float3 m_macroColor;
    float3 m_macroNormal;
    bool   m_hasMacro;  // false if world position is out of the clipmap range. Needs increasing max render distance.
    bool   m_hasDetail; // false if the position doesn't have detail or out of the clipmap range.
    DetailSurface m_detailSurface;
};

float3 UnpackNormal(float2 packedNormal)
{
    float z = sqrt(1.0 - packedNormal.x * packedNormal.x - packedNormal.y * packedNormal.y);
    return float3(packedNormal.xy, z);
}

struct BilinearUvs
{
    uint2 m_u0v0;
    uint2 m_u0v1;
    uint2 m_u1v0;
    uint2 m_u1v1;
    float2 m_weight;
};

struct ClipmapLevel
{
    uint m_closestLevel;
    uint m_nextLevel; // Set to clipmapStackSize if trilinear sampling doesn't apply.
    float m_weight; // Blending weight between 2 clipmap layers.
};

// Calculate the most detailed clipmap level.
ClipmapLevel CalculateClosestClipmapLevel(
    float2 distanceFromViewPosition,
    float maxRenderDistance,
    float clipmapScaleBase,
    uint clipmapStackSize
)
{
    ClipmapLevel clipmapLevel;

    float2 maxRenderSize = float2(maxRenderDistance, maxRenderDistance);
    // The top clipmap's render distance
    float2 minRenderSize = maxRenderSize / pow(clipmapScaleBase, (float)(clipmapStackSize - 1u));

    float2 clampedDistance = clamp(minRenderSize, abs(distanceFromViewPosition) * RenderDistanceBias, maxRenderSize);
    float2 distanceRatio = maxRenderSize / clampedDistance;
    // Due to clamping, the max result of log is (clipmapStackSize - 1u), which falls into the first clipmap
    clipmapLevel.m_closestLevel = clipmapStackSize - 1u - uint(floor(log(min(distanceRatio.x, distanceRatio.y))/log(clipmapScaleBase)));

    float renderDistance = maxRenderDistance / pow(clipmapScaleBase, (float)(clipmapStackSize - 1u - clipmapLevel.m_closestLevel));
    float blendingStart = renderDistance * BlendingStartFactor;
    float blendingEnd = renderDistance / RenderDistanceBias;
    float blendingValue = max(clampedDistance.x, clampedDistance.y);

    if (blendingValue > blendingStart && blendingValue < blendingEnd)
    {
        clipmapLevel.m_weight = (blendingValue - blendingStart) / (blendingEnd - blendingStart);
        clipmapLevel.m_nextLevel = clipmapLevel.m_closestLevel + 1;
    }
    else
    {
        clipmapLevel.m_weight = 0.0;
        clipmapLevel.m_nextLevel = clipmapStackSize;
    }

    return clipmapLevel;
}

BilinearUvs GetBilinearUvs(uint2 u0v0)
{
    uint clipmapSize = (uint)TerrainSrg::m_clipmapData.m_clipmapSize;
    uint u1 = (u0v0.x + 1) % clipmapSize;
    uint v1 = (u0v0.y + 1) % clipmapSize;

    BilinearUvs uvs;
    uvs.m_u0v0 = u0v0;
    uvs.m_u1v0 = uint2(u1, u0v0.y);
    uvs.m_u0v1 = uint2(u0v0.x, v1);
    uvs.m_u1v1 = uint2(u1, v1);

    return uvs;
}

BilinearUvs CalculateClipmapUv(
    float2 distanceFromViewPosition,
    float maxRenderDistance,
    float clipmapScaleInv,
    float2 clipmapCenter
)
{
    float2 normalizedDistance = distanceFromViewPosition / (maxRenderDistance * 2.0 * clipmapScaleInv);
    float2 normalizedPixelPosition = clipmapCenter + normalizedDistance;
    // By toroidal addressing, the normalized position can only fall into [-1.0, 2.0].
    // We can use fraction after shifting 1.0 to get the actual position.
    normalizedPixelPosition = frac(normalizedPixelPosition + float2(1.0, 1.0));

    float2 exactUV = normalizedPixelPosition * TerrainSrg::m_clipmapData.m_clipmapSize;

    uint2 u0v0 = uint2(exactUV);
    BilinearUvs uvs = GetBilinearUvs(u0v0);
    uvs.m_weight = frac(exactUV);

    return uvs;
}

float4 ColorPointSampling(Texture2DArray<float4> colorClipmap, uint2 uv, uint clipmapLevel)
{
    uint3 texelIndex = uint3(uv, clipmapLevel);
    return colorClipmap[texelIndex];
}

float3 NormalPointSampling(Texture2DArray<float2> normalClipmap, uint2 uv, uint clipmapLevel)
{
    uint3 texelIndex = uint3(uv, clipmapLevel);
    float2 normal = normalClipmap[texelIndex];
    return UnpackNormal(normal);
}

float GeneralFloatPointSampling(Texture2DArray<float> clipmap, uint2 uv, uint clipmapLevel)
{
    uint3 texelIndex = uint3(uv, clipmapLevel);
    return clipmap[texelIndex];
}

float4 ColorBilinearSampling(Texture2DArray<float4> colorClipmap, BilinearUvs uvs, uint clipmapLevel)
{
    float4 color00 = colorClipmap[uint3(uvs.m_u0v0, clipmapLevel)];
    float4 color10 = colorClipmap[uint3(uvs.m_u1v0, clipmapLevel)];
    float4 color01 = colorClipmap[uint3(uvs.m_u0v1, clipmapLevel)];
    float4 color11 = colorClipmap[uint3(uvs.m_u1v1, clipmapLevel)];

    float3 color0 = lerp(color00.rgb, color01.rgb, uvs.m_weight.x);
    float3 color1 = lerp(color10.rgb, color11.rgb, uvs.m_weight.x);

    // Alpha for detail color clipmap is used to represent "has detail material" using 0.0 and 1.0.
    // Detail is only valid when 4 adjecent texels are all valid. So using min is the proper choice.
    float alpha0 = min(color00.a, color01.a);
    float alpha1 = min(color10.a, color11.a);

    return float4(lerp(color0, color1, uvs.m_weight.y), min(alpha0, alpha1));
}

float3 NormalBilinearSampling(Texture2DArray<float2> normalClipmap, BilinearUvs uvs, uint clipmapLevel)
{
    float3 normal00 = UnpackNormal(normalClipmap[uint3(uvs.m_u0v0, clipmapLevel)]);
    float3 normal01 = UnpackNormal(normalClipmap[uint3(uvs.m_u1v0, clipmapLevel)]);
    float3 normal10 = UnpackNormal(normalClipmap[uint3(uvs.m_u0v1, clipmapLevel)]);
    float3 normal11 = UnpackNormal(normalClipmap[uint3(uvs.m_u1v1, clipmapLevel)]);
    
    float3 normal0 = normalize(lerp(normal00.rgb, normal01.rgb, uvs.m_weight.x));
    float3 normal1 = normalize(lerp(normal10.rgb, normal11.rgb, uvs.m_weight.x));
    return normalize(lerp(normal0, normal1, uvs.m_weight.y));
}

float GeneralFloatBilinearSampling(Texture2DArray<float> clipmap, BilinearUvs uvs, uint clipmapLevel)
{
    float value00 = clipmap[uint3(uvs.m_u0v0, clipmapLevel)];
    float value10 = clipmap[uint3(uvs.m_u1v0, clipmapLevel)];
    float value01 = clipmap[uint3(uvs.m_u0v1, clipmapLevel)];
    float value11 = clipmap[uint3(uvs.m_u1v1, clipmapLevel)];
    
    float value0 = lerp(value00, value01, uvs.m_weight.x);
    float value1 = lerp(value10, value11, uvs.m_weight.x);
    return lerp(value0, value1, uvs.m_weight.y);
}

float4 ColorTrilinearSampling(Texture2DArray<float4> colorClipmap, BilinearUvs uvs1, BilinearUvs uvs2, ClipmapLevel clipmapLevel)
{
    float4 color1 = ColorBilinearSampling(colorClipmap, uvs1, clipmapLevel.m_closestLevel);
    float4 color2 = ColorBilinearSampling(colorClipmap, uvs2, clipmapLevel.m_nextLevel);

    // Alpha for detail color clipmap is used to represent "has detail material" using 0.0 and 1.0.
    // Detail is only valid when 4 adjecent texels are all valid. So using min is the proper choice.
    float alpha = min(color1.a, color2.a);

    return float4(lerp(color1.rgb, color2.rgb, clipmapLevel.m_weight), alpha);
}

float3 NormalTrilinearSampling(Texture2DArray<float2> normalClipmap, BilinearUvs uvs1, BilinearUvs uvs2, ClipmapLevel clipmapLevel)
{
    float3 normal1 = NormalBilinearSampling(normalClipmap, uvs1, clipmapLevel.m_closestLevel);
    float3 normal2 = NormalBilinearSampling(normalClipmap, uvs2, clipmapLevel.m_nextLevel);
    
    return normalize(lerp(normal1, normal2, clipmapLevel.m_weight));
}

float GeneralFloatTrilinearSampling(Texture2DArray<float> clipmap, BilinearUvs uvs1, BilinearUvs uvs2, ClipmapLevel clipmapLevel)
{
    float value1 = GeneralFloatBilinearSampling(clipmap, uvs1, clipmapLevel.m_closestLevel);
    float value2 = GeneralFloatBilinearSampling(clipmap, uvs2, clipmapLevel.m_nextLevel);
    
    return lerp(value1, value2, clipmapLevel.m_weight);
}

ClipmapSample SampleClipmap(float2 worldPosition)
{
    ClipmapSample data;

    float2 distance = worldPosition - TerrainSrg::m_clipmapData.m_currentViewPosition;
    float2 absDistance = abs(distance);
    if (absDistance.x > TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius || absDistance.y > TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius)
    {
        data.m_hasMacro = false;
        data.m_hasDetail = false;
        return data;
    }
    data.m_hasMacro = true;

    ClipmapLevel macroClipmapLevel = CalculateClosestClipmapLevel(
        distance,
        TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
        TerrainSrg::m_clipmapData.m_macroClipmapScaleBase,
        TerrainSrg::m_clipmapData.m_macroClipmapStackSize
    );

    if (macroClipmapLevel.m_nextLevel == TerrainSrg::m_clipmapData.m_macroClipmapStackSize)
    {
        BilinearUvs macroClipmapUvs = CalculateClipmapUv(
            distance,
            TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
            GetMacroClipmapScaleInv(macroClipmapLevel.m_closestLevel),
            GetCurrentMacroClipmapCenter(macroClipmapLevel.m_closestLevel)
        );

        data.m_macroColor = ColorBilinearSampling(TerrainSrg::m_macroColorClipmaps, macroClipmapUvs, macroClipmapLevel.m_closestLevel).rgb;
        data.m_macroNormal = NormalBilinearSampling(TerrainSrg::m_macroNormalClipmaps, macroClipmapUvs, macroClipmapLevel.m_closestLevel);
    }
    else
    {
        BilinearUvs macroClipmapUvs1 = CalculateClipmapUv(
            distance,
            TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
            GetMacroClipmapScaleInv(macroClipmapLevel.m_closestLevel),
            GetCurrentMacroClipmapCenter(macroClipmapLevel.m_closestLevel)
        );

        BilinearUvs macroClipmapUvs2 = CalculateClipmapUv(
            distance,
            TerrainSrg::m_clipmapData.m_macroClipmapMaxRenderRadius,
            GetMacroClipmapScaleInv(macroClipmapLevel.m_nextLevel),
            GetCurrentMacroClipmapCenter(macroClipmapLevel.m_nextLevel)
        );

        data.m_macroColor = ColorTrilinearSampling(TerrainSrg::m_macroColorClipmaps, macroClipmapUvs1, macroClipmapUvs2, macroClipmapLevel).rgb;
        data.m_macroNormal = NormalTrilinearSampling(TerrainSrg::m_macroNormalClipmaps, macroClipmapUvs1, macroClipmapUvs2, macroClipmapLevel);
    }

    if (absDistance.x > TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius || absDistance.y > TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius)
    {
        data.m_hasDetail = false;
    }
    else
    {
        ClipmapLevel detailClipmapLevel = CalculateClosestClipmapLevel(
            distance,
            TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius,
            TerrainSrg::m_clipmapData.m_detailClipmapScaleBase,
            TerrainSrg::m_clipmapData.m_detailClipmapStackSize
        );

        if (detailClipmapLevel.m_nextLevel == TerrainSrg::m_clipmapData.m_detailClipmapStackSize)
        {
            BilinearUvs detailClipmapUvs = CalculateClipmapUv(
                distance,
                TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius,
                GetDetailClipmapScaleInv(detailClipmapLevel.m_closestLevel),
                GetCurrentDetailClipmapCenter(detailClipmapLevel.m_closestLevel)
            );

            float4 detailColor = ColorBilinearSampling(TerrainSrg::m_detailColorClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
            // alpha represents hasDetailSurface, 1.0 for true and 0.0 for false.
            data.m_hasDetail = detailColor.a == 1.0;

            if (data.m_hasDetail)
            {
                data.m_detailSurface.m_color = detailColor.rgb;
                data.m_detailSurface.m_normal = NormalBilinearSampling(TerrainSrg::m_detailNormalClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
                data.m_detailSurface.m_roughness = GeneralFloatBilinearSampling(TerrainSrg::m_detailRoughnessClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
                data.m_detailSurface.m_specularF0 = GeneralFloatBilinearSampling(TerrainSrg::m_detailSpecularF0Clipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
                data.m_detailSurface.m_metalness = GeneralFloatBilinearSampling(TerrainSrg::m_detailMetalnessClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
                data.m_detailSurface.m_occlusion = GeneralFloatBilinearSampling(TerrainSrg::m_detailOcclusionClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
                data.m_detailSurface.m_height = GeneralFloatBilinearSampling(TerrainSrg::m_detailHeightClipmaps, detailClipmapUvs, detailClipmapLevel.m_closestLevel);
            }
        }
        else
        {
            BilinearUvs detailClipmapUvs1 = CalculateClipmapUv(
                distance,
                TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius,
                GetDetailClipmapScaleInv(detailClipmapLevel.m_closestLevel),
                GetCurrentDetailClipmapCenter(detailClipmapLevel.m_closestLevel)
            );

            BilinearUvs detailClipmapUvs2 = CalculateClipmapUv(
                distance,
                TerrainSrg::m_clipmapData.m_detailClipmapMaxRenderRadius,
                GetDetailClipmapScaleInv(detailClipmapLevel.m_nextLevel),
                GetCurrentDetailClipmapCenter(detailClipmapLevel.m_nextLevel)
            );

            float4 detailColor = ColorTrilinearSampling(TerrainSrg::m_detailColorClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
            // alpha represents hasDetailSurface, 1.0 for true and 0.0 for false.
            data.m_hasDetail = detailColor.a == 1.0;

            if (data.m_hasDetail)
            {
                data.m_detailSurface.m_color = detailColor.rgb;
                data.m_detailSurface.m_normal = NormalTrilinearSampling(TerrainSrg::m_detailNormalClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
                data.m_detailSurface.m_roughness = GeneralFloatTrilinearSampling(TerrainSrg::m_detailRoughnessClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
                data.m_detailSurface.m_specularF0 = GeneralFloatTrilinearSampling(TerrainSrg::m_detailSpecularF0Clipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
                data.m_detailSurface.m_metalness = GeneralFloatTrilinearSampling(TerrainSrg::m_detailMetalnessClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
                data.m_detailSurface.m_occlusion = GeneralFloatTrilinearSampling(TerrainSrg::m_detailOcclusionClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
                data.m_detailSurface.m_height = GeneralFloatTrilinearSampling(TerrainSrg::m_detailHeightClipmaps, detailClipmapUvs1, detailClipmapUvs2, detailClipmapLevel);
            }
        }
    }

    return data;
}
