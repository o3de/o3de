{#
Copyright (c) Contributors to the Open 3D Engine Project.
For complete copyright and license terms please see the LICENSE at the root of this distribution.

SPDX-License-Identifier: Apache-2.0 OR MIT
#}

{% import 'ScriptCanvas_Macros.jinja' as macros %}
{% import 'ScriptCanvas_Nodeable_Macros.jinja' as nodemacro %}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This code was produced with AzAutoGen, any modifications made will not be preserved.
// If you need to modify this code see:
//
// Gems\ScriptCanvas\Code\Include\ScriptCanvas\AutoGen\ScriptCanvasNodeable_Header.jinja
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <AzCore/RTTI/TypeInfo.h>
#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/Serialization/EditContext.h>
#include <AzCore/RTTI/BehaviorContext.h>

#include <ScriptCanvas/Core/Nodeable.h>
#include <ScriptCanvas/Core/NodeableNode.h>

{% for xml in dataFiles %}
{%   for Class in xml.findall('Class') %}

{# Any user-provided includes #}
{%      for Include in Class.findall('Include') %}
#include <{{ Include.attrib['File'] }}>
{%      endfor %}

{# Class Attributes #}
{# ----------------------------------------------------------------------------------------- #}

{% set attribute_Namespace = undefined %}
{%- if Class.attrib['Namespace'] is defined %}
{%      if Class.attrib['Namespace'] != "None" %}
{%          set attribute_Namespace = Class.attrib['Namespace'] %}
{%      endif %}
{% endif %}

{% set attribute_Base = "ScriptCanvas::Nodeable" %}
{% if Class.attrib['Base'] is defined and Class.attrib['Base'] %}
{%    set attribute_Base = Class.attrib['Base'] %}
{% endif %}

{% if attribute_Namespace is defined %}
namespace {{attribute_Namespace}}
{
{% endif %}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
//// {{ Class.attrib['Name'] }}
////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

{% set className = Class.attrib['Name'] %}
{% set nodeableClassName = Class.attrib['Name'] %}

// The following will be injected directly into the source header file for which AZ AutoGen is being run.
// You must #include the generated header into the source header
#define SCRIPTCANVAS_NODE_{{className}} \
public: \
    AZ_RTTI({{className}}, "{{nodeableClassName|createHashGuid}}", {{attribute_Base}}); \
    static void Reflect(AZ::ReflectContext* reflection); \
    static void ExtendReflectionSerialize([[maybe_unused]] AZ::SerializeContext::ClassBuilder* builder){% if Class.attrib['ExtendReflectionSerialize'] is defined %};{% else %}{}{% endif %} \
    static void ExtendReflectionEdit([[maybe_unused]] AZ::EditContext::ClassBuilder* builder){% if Class.attrib['ExtendReflectionEdit'] is defined %};{% else %}{}{% endif %} \
    static void ExtendReflectionBehavior([[maybe_unused]] AZ::BehaviorContext::ClassBuilder<{{className}}>* builder){% if Class.attrib['ExtendReflectionBehavior'] is defined %};{% else %}{}{% endif %} \
    static const char* GetDescription() { return "{{ macros.GetAttributeAsString(Class.attrib, 'Description') }}"; } \
    ScriptCanvas::NodePropertyInterface* GetPropertyInterface(AZ::Crc32 propertyId) override; \
    bool IsActive() const override { return false; } \
{{ nodemacro.PopulateMemberVariables(Class) }}{{ nodemacro.ExecutionInDeclarations(Class) }}{{ nodemacro.ExecutionOutDeclarations(Class) }}/* end #define SCRIPTCANVAS_NODE_{{className}} */

{% if className is defined -%}
{% set nodeableNodeName = nodeableClassName + 'Node' %}

      namespace Nodes
      {
          class {{nodeableNodeName}} : public ScriptCanvas::Nodes::NodeableNode
          {
          public:

              AZ_COMPONENT({{nodeableNodeName}}, {% if Class.attrib['NodeableUuid'] is defined %}"{{Class.attrib['NodeableUuid']}}"{% else %}"{{nodeableNodeName|createHashGuid}}"{% endif %}, ScriptCanvas::Nodes::NodeableNode);

              static void Reflect(AZ::ReflectContext* context);

              static void ExtendReflectionSerialize([[maybe_unused]] AZ::SerializeContext::ClassBuilder* builder){% if Class.attrib['ExtendReflectionSerialize'] is defined %};{% else %}{}{% endif %}

              static void ExtendReflectionEdit([[maybe_unused]] AZ::EditContext::ClassBuilder* builder){% if Class.attrib['ExtendReflectionEdit'] is defined %};{% else %}{}{% endif %}

              static void ExtendReflectionBehavior([[maybe_unused]] AZ::BehaviorContext::ClassBuilder<{{nodeableNodeName}}>* builder){% if Class.attrib['ExtendReflectionBehavior'] is defined %};{% else %}{}{% endif %}

              void ConfigureSlots() override;

{% if Class.attrib['ExtendConfigureSlots'] is defined %}
              void ExtendConfigureSlots([[maybe_unused]] SlotExecution::Ins& ins, [[maybe_unused]] SlotExecution::Outs& latents);

{% else %}
              /* no slot configuration extension, Use Class attribute 'ExtendConfigureSlots' to extend them */

{% endif %}
              void ConfigureVisualExtensions() override;

              size_t GenerateFingerprint() const override;

{% if Class.attrib['GraphEntryPoint'] is defined and Class.attrib['GraphEntryPoint'] == "True" %}
              bool IsEntryPoint() const override { return true; }
{% endif %}

              {{nodeableNodeName}}();

              {{Class.attrib['NodeDeclarations']}}
          };
      }
{% endif %}

{% if attribute_Namespace is defined %}
}
{% endif %}

{{ macros.ReportErrors() }}

{%  endfor %}
{% endfor %}