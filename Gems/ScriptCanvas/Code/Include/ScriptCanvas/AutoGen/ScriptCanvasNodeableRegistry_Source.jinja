{#
Copyright (c) Contributors to the Open 3D Engine Project.
For complete copyright and license terms please see the LICENSE at the root of this distribution.

SPDX-License-Identifier: Apache-2.0 OR MIT
#}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This code was produced with AzAutoGen, any modifications made will not be preserved.
// If you need to modify this code see:
//
// Gems\ScriptCanvas\Code\Include\ScriptCanvas\AutoGen\ScriptCanvasNodeableRegistry_Source.jinja
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{% import 'ScriptCanvas_Macros.jinja' as macros %}

#include "{{filename}}.h"
#include <AzCore/RTTI/BehaviorContext.h>
#include <AzCore/Component/Component.h>
#include <ScriptCanvas/Libraries/ScriptCanvasNodeRegistry.h>
{% for ScriptCanvas in dataFiles %}
#include <{{ ScriptCanvas.attrib['Include'] }}>
{% endfor %}

namespace ScriptCanvas
{
    {{autogenTargetName}}NodeableRegistry::{{autogenTargetName}}NodeableRegistry()
    {
        ScriptCanvas::AutoGenRegistryManager::GetInstance()->RegisterRegistry(GetRegistryName(), this);
    }

    {{autogenTargetName}}NodeableRegistry::~{{autogenTargetName}}NodeableRegistry()
    {
        ScriptCanvas::AutoGenRegistryManager::GetInstance()->UnregisterRegistry(GetRegistryName());
    }

    const char* {{autogenTargetName}}NodeableRegistry::GetRegistryName() {
        return "{{autogenTargetName}}NodeableRegistry";
    }

    void {{autogenTargetName}}NodeableRegistry::Init(NodeRegistry* nodeRegistry)
    {
        if (nodeRegistry)
        {
{% for ScriptCanvas in dataFiles %}
{%     for Class in ScriptCanvas %}
{%         set nodeName = Class.attrib['Name'] %}
{%         set namespaceName = '::' %}
{%         if Class.attrib['Namespace'] is defined and Class.attrib['Namespace'] != 'None' %}
{%             set namespaceName = Class.attrib['Namespace'] + '::' %}
{%         endif %}
{%         if Class.attrib['BaseClass'] is not defined or Class.attrib['BaseClass'].lower() == "false" %}
            nodeRegistry->m_nodes.push_back(AZ::AzTypeInfo<{{namespaceName}}Nodes::{{nodeName}}Node>::Uuid());
{%         endif %}
{%     endfor %}
{% endfor %}
        }
    }

    void {{autogenTargetName}}NodeableRegistry::Reflect([[maybe_unused]] AZ::ReflectContext* context)
    {
{% for ScriptCanvas in dataFiles %}
{%     for Class in ScriptCanvas %}
{%         set nodeName = Class.attrib['Name'] %}
{%         set namespaceName = '::' %}
{%         if Class.attrib['Namespace'] is defined and Class.attrib['Namespace'] != 'None' %}
{%             set namespaceName = Class.attrib['Namespace'] + '::' %}
{%         endif %}
{%         if Class.attrib['BaseClass'] is defined and Class.attrib['BaseClass'].lower() == "true" %}
        {{Class.attrib['QualifiedName']}}::Reflect(context);
{%         endif %}
{%     endfor %}
{% endfor %}
    }

    AZStd::vector<AZ::ComponentDescriptor*> {{autogenTargetName}}NodeableRegistry::GetComponentDescriptors()
    {
        return AZStd::vector<AZ::ComponentDescriptor*>({
{% for ScriptCanvas in dataFiles %}
{%     for Class in ScriptCanvas %}
{%         set nodeName = Class.attrib['Name'] %}
{%         set namespaceName = '::' %}
{%         if Class.attrib['Namespace'] is defined and Class.attrib['Namespace'] != 'None' %}
{%             set namespaceName = Class.attrib['Namespace'] + '::' %}
{%         endif %}
{%         if Class.attrib['BaseClass'] is not defined or Class.attrib['BaseClass'].lower() == "false" %}
            {{namespaceName}}Nodes::{{nodeName}}Node::CreateDescriptor(),
{%         endif %}
{%     endfor %}
{% endfor %}
        });
    }
}
