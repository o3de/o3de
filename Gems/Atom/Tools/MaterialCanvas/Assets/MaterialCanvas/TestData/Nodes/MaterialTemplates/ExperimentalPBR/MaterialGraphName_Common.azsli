/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/SrgSemantics.azsli>

// Everything inside of the generated blocks will eventually be replaced in the generated files as the material graph is compiled. 

// O3DE_GENERATED_INCLUDES_BEGIN
// O3DE_GENERATED_INCLUDES_END

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // O3DE_GENERATED_MATERIAL_SRG_BEGIN
    // O3DE_GENERATED_MATERIAL_SRG_END
};
 
// O3DE_GENERATED_CLASSES_BEGIN
// O3DE_GENERATED_CLASSES_END
 
// O3DE_GENERATED_FUNCTIONS_BEGIN
// O3DE_GENERATED_FUNCTIONS_END

struct CommonVSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
};

struct CommonVSOutput
{
    float4 m_position;
    float3 m_normal;
    float4 m_tangent;
    float2 m_uv0;
    float2 m_uv1;
    float4 m_worldPosition;
};

void Evaluate_CommonVSInput(in CommonVSInput IN, out CommonVSOutput OUT)
{
    float4 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0));

    #define O3DE_MC_POSITION IN.m_position
    #define O3DE_MC_UV(index) (index == 0 ? IN.m_uv0 : IN.m_uv1);
    #define O3DE_MC_NORMAL IN.m_normal
    #define O3DE_MC_TANGENT IN.m_tangent
    #define O3DE_MC_BITANGENT IN.m_bitangent
    #define O3DE_MC_WORLD_POSITION worldPosition

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inPositionOffset
    float4 inPositionOffset = float4(0.0, 0.0, 0.0, 0.0);
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    OUT.m_worldPosition = worldPosition + float4(inPositionOffset.xyz, 0.0);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, OUT.m_worldPosition);
    OUT.m_normal = IN.m_normal;
    OUT.m_tangent = IN.m_tangent;
    OUT.m_uv1 = IN.m_uv0;
    OUT.m_uv1 = IN.m_uv1;
}
