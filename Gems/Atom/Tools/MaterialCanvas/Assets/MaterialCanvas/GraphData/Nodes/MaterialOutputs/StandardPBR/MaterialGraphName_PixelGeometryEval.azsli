/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluatePixelGeometry function in this file without making it the final EvaluatePixelGeometry
// used in your shader. Simply #define EvaluatePixelGeometry to your custom definition before including this file
//
#ifndef EvaluatePixelGeometry
#define EvaluatePixelGeometry EvaluatePixelGeometry_MaterialGraphName
#endif

#include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_PixelGeometryEval.azsli>
#include <Atom/Features/InstancedTransforms.azsli>

#if ENABLE_PARALLAX
#include "Atom/Feature/Common/Assets/Shaders/Materials/MaterialFunctions/ParallaxDepth.azsli"
#endif

#include <Atom/Features/Debug.azsli>

PixelGeometryData EvaluatePixelGeometry_MaterialGraphName(inout VsOutput IN, bool isFrontFace)
{
    real4x4 objectToWorld = real4x4(GetObjectToWorldMatrix(IN.m_instanceId));
    real3x3 objectToWorldIT = real3x3(GetObjectToWorldMatrixInverseTranspose(IN.m_instanceId));

    real3 normalWS, tangentWS, bitangentWS;
    ConstructTBN(real3(IN.normal), real4(IN.tangent), objectToWorld, objectToWorldIT, normalWS, tangentWS, bitangentWS);

    PixelGeometryData geoData = EvaluatePixelGeometry_BasePBR(
        IN.worldPosition,
        normalWS,
        tangentWS,
        bitangentWS,
        IN.uvs,
        isFrontFace);

    // ------- Parallax -------

    geoData.isDisplacementClipped = false;

#if ENABLE_PARALLAX
    if(ShouldHandleParallax())
    {
        SetPixelDepth(
            geoData.positionWS,
            geoData.vertexNormal,
            geoData.tangents,
            geoData.bitangents,
            geoData.uvs,
            isFrontFace,
            objectToWorld,
            IN.position.z,
            IN.position.w,
            geoData.isDisplacementClipped);
    }
#endif

    return geoData;
}

