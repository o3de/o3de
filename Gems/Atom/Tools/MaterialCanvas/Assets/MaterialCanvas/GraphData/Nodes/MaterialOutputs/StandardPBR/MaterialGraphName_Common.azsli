/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#pragma once

#ifndef ENABLE_CLEAR_COAT
#define ENABLE_CLEAR_COAT 1
#endif

#ifndef ENABLE_TRANSMISSION
#define ENABLE_TRANSMISSION 0
#endif

#ifndef ENABLE_AREA_LIGHT_VALIDATION
#define ENABLE_AREA_LIGHT_VALIDATION 0
#endif

#ifndef ENABLE_SHADER_DEBUGGING
#define ENABLE_SHADER_DEBUGGING 1
#endif

#ifndef OUTPUT_SUBSURFACE
#define OUTPUT_SUBSURFACE 0
#endif

#ifndef OUTPUT_DEPTH
#define OUTPUT_DEPTH 0
#endif

#ifndef FORCE_OPAQUE
#define FORCE_OPAQUE 0
#endif

#ifndef ENABLE_PARALLAX
// Disabled until parallax depth functions can be rewritten to not pass in the heightmap or sampler from the material SRG
#define ENABLE_PARALLAX 0
#endif

#ifndef UvSetCount
#define UvSetCount 2
#endif

#include <Atom/Features/ShaderQualityOptions.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/TangentSpace.azsli>
#include <../Shaders/Materials/MaterialFunctions/EvaluateTangentFrame.azsli>

#if ENABLE_PARALLAX
#include <../Shaders/Materials/MaterialFunctions/StandardGetAlphaAndClip.azsli>
#include <../Shaders/Materials/MaterialFunctions/ParallaxDepth.azsli>
COMMON_OPTIONS_PARALLAX()
#endif

option bool o_normal_override_enabled = false;
option bool o_opacity_affects_specular_factor = true;
option bool o_clearCoat_enabled = false;
option bool o_clearCoat_normal_override_enabled = false;

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // O3DE_GENERATED_MATERIAL_SRG_BEGIN
    // O3DE_GENERATED_MATERIAL_SRG_END
}
 
// O3DE_GENERATED_INCLUDES_BEGIN
// O3DE_GENERATED_INCLUDES_END

// O3DE_GENERATED_CLASSES_BEGIN
// O3DE_GENERATED_CLASSES_END
 
// O3DE_GENERATED_FUNCTIONS_BEGIN
// O3DE_GENERATED_FUNCTIONS_END


#if ENABLE_PARALLAX
// Callback function for ParallaxMapping.azsli
DepthResult GetDepth(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    return SampleDepthFromHeightmap(MaterialSrg::m_heightmap, MaterialSrg::m_sampler, uv, uv_ddx, uv_ddy);
}

bool ShouldHandleParallax()
{
    // Parallax mapping's non uniform uv transformations break screen space subsurface scattering, disable it when subsurface scattering is enabled.
    return !o_enableSubsurfaceScattering && o_parallax_feature_enabled && o_useHeightmap;
}

bool ShouldHandleParallaxInDepthShaders()
{
    // The depth pass shaders need to calculate parallax when the result could affect the depth buffer, or when
    // parallax could affect texel clipping.
    return ShouldHandleParallax() && (o_parallax_enablePixelDepthOffset || o_opacity_mode == OpacityMode::Cutout);
}
#endif

bool NeedsTangentFrame()
{
    return true;
}

// Use same vertex logic as BasePBR
#include <../Shaders/Materials/BasePBR/BasePBR_VertexData.azsli>
#include "MaterialGraphName_VertexEval.azsli"

#include <../Shaders/Materials/StandardPBR/StandardPBR_PixelGeometryData.azsli>
#include "MaterialGraphName_PixelGeometryEval.azsli"

#include <../Shaders/Materials/StandardPBR/StandardPBR_SurfaceData.azsli>
#include "MaterialGraphName_SurfaceEval.azsli"

