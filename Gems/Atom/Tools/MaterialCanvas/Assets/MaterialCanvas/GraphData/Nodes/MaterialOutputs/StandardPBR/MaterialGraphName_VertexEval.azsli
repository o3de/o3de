/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic allows you to use the EvaluateVertexGeometry function in this file without making it the final
// EvaluateVertexGeometry used in your shader. Simply #define EvaluateVertexGeometry before including this file
//
#ifndef EvaluateVertexGeometry
#define EvaluateVertexGeometry(IN)      EvaluateVertexGeometry_MaterialGraphName(IN)
#endif

#include <Atom/RPI/TangentSpace.azsli>

VsOutput EvaluateVertexGeometry_MaterialGraphName(
    float3 position,
    float3 normal,
    float4 tangent,
    float2 uv0,
    float2 uv1)
{
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();
    float4 worldPosition = mul(objectToWorld, float4(position, 1.0));

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(normal, tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

    #define O3DE_MC_POSITION position
    #define O3DE_MC_UV(index) (index == 0 ? uv0 : uv1);
    #define O3DE_MC_NORMAL vertexNormal
    #define O3DE_MC_TANGENT vertexTangent
    #define O3DE_MC_BITANGENT vertexBitangent
    #define O3DE_MC_WORLD_POSITION worldPosition

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inPositionOffset
    float3 inPositionOffset = {0.0, 0.0, 0.0};
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    VsOutput output;
    output.worldPosition = (float3)worldPosition + (float3)inPositionOffset;
    output.position = mul(ViewSrg::m_viewProjectionMatrix, float4(output.worldPosition, 1.0));
    output.uvs[0] = uv0;
    output.uvs[1] = uv1;
    output.normal = normal;
    output.tangent = tangent;
    return output;
}

VsOutput EvaluateVertexGeometry_MaterialGraphName(VsInput IN)
{
    return EvaluateVertexGeometry_MaterialGraphName(
        IN.position,
        IN.normal,
        IN.tangent,
        IN.uv0,
        IN.uv1);
}
