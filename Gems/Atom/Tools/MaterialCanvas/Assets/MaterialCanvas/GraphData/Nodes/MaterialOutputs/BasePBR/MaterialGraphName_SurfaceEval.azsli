/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateSurface function in this file without making it the final EvaluateSurface
// used in your shader. Simply #define EvaluateSurface to your custom definition before including this file
//
#ifndef EvaluateSurface
#define EvaluateSurface EvaluateSurface_MaterialGraphName
#endif

#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/RPI/TangentSpace.azsli>

Surface EvaluateSurface_MaterialGraphName(
    VsOutput IN,
    float3 positionWS,
    real3 normalWS,
    real3 tangents[UvSetCount],
    real3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace)
{
    const float3 bitangent = cross((float3)IN.normal, (float3)IN.tangent);
    const float3 O3DE_MC_POSITION = (float3)IN.position;
    const float3 O3DE_MC_NORMAL = (float3)IN.normal;
    const float3 O3DE_MC_TANGENT = (float3)IN.tangent;
    const float3 O3DE_MC_BITANGENT = (float3)bitangent;
    const float3 O3DE_MC_POSITION_WS = positionWS;
    const float3 O3DE_MC_NORMAL_WS = normalWS;
    const float3 O3DE_MC_TANGENT_WS = tangents[0];
    const float3 O3DE_MC_BITANGENT_WS = bitangents[0];
    #define O3DE_MC_UV(index) uvs[clamp(index, 0, UvSetCount-1)];

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inNormal, inBaseColor, inMetallic, inRoughness, inSpecularF0Factor
    real3 inNormal = normalWS;
    real3 inBaseColor = {1.0, 1.0, 1.0};
    real inMetallic = 0.0;
    real inRoughness = 0.0;
    real inSpecularF0Factor = 0.0;
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_UV

    Surface surface;
    surface.position = positionWS;
    surface.vertexNormal = normalWS;
    surface.normal = normalize(o_normal_override_enabled ? GetWorldSpaceNormal((real2)inNormal, normalWS, tangents[0], bitangents[0]) : normalWS);

    surface.roughnessLinear = inRoughness;
    surface.SetAlbedoAndSpecularF0(inBaseColor, inSpecularF0Factor, inMetallic);
    surface.CalculateRoughnessA();
    return surface;
}

Surface EvaluateSurface_MaterialGraphName(VsOutput IN, PixelGeometryData geoData)
{
    return EvaluateSurface_MaterialGraphName(
        IN,
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace);
}
