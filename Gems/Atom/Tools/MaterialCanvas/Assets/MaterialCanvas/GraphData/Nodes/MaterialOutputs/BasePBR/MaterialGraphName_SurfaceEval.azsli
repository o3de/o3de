/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateSurface function in this file without making it the final EvaluateSurface
// used in your shader. Simply #define EvaluateSurface to your custom definition before including this file
//
#ifndef EvaluateSurface
#define EvaluateSurface(geoData)        EvaluateSurface_MaterialGraphName(geoData)
#endif

#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/RPI/TangentSpace.azsli>

Surface EvaluateSurface_MaterialGraphName(
    float3 positionWS,
    float3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace)
{
    #define O3DE_MC_POSITION positionWS
    #define O3DE_MC_UV(index) uvs[clamp(index, 0, UvSetCount-1)];
    #define O3DE_MC_NORMAL vertexNormal
    #define O3DE_MC_TANGENT tangents[0]
    #define O3DE_MC_BITANGENT bitangents[0]
    #define O3DE_MC_WORLD_POSITION positionWS

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inNormal, inBaseColor, inMetallic, inRoughness, inSpecularF0Factor
    float3 inNormal = vertexNormal;
    float3 inBaseColor = {1.0, 1.0, 1.0};
    float inMetallic = 0.0;
    float inRoughness = 0.0;
    float inSpecularF0Factor = 0.0;
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    Surface surface;
    surface.position = positionWS;
    surface.vertexNormal = vertexNormal;
    surface.normal = normalize(o_normal_override_enabled ? GetWorldSpaceNormal((float2)inNormal, vertexNormal, tangents[0], bitangents[0]) : vertexNormal);
    surface.roughnessLinear = inRoughness;
    surface.SetAlbedoAndSpecularF0(inBaseColor, inSpecularF0Factor, inMetallic);
    surface.CalculateRoughnessA();
    return surface;
}

Surface EvaluateSurface_MaterialGraphName(PixelGeometryData geoData)
{
    return EvaluateSurface_MaterialGraphName(
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace);
}
