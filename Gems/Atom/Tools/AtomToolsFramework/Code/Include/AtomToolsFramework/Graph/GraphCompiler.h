/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <AtomToolsFramework/Graph/GraphCompilerRequestBus.h>
#include <AzCore/RTTI/RTTI.h>

namespace AtomToolsFramework
{
    //! GraphCompiler is a helper base class that implements basic functionality from GraphCompilerRequestBus. It will handle queuing
    //! compile requests and deferring them to the system tick as well as reporting notifications related to asset processor status for any
    //! files updated or generated by the compiler.
    class GraphCompiler : public GraphCompilerRequestBus::Handler
    {
    public:
        AZ_RTTI(GraphCompiler, "{C69E8B6F-3692-42E5-9B3C-FBC5E1F1F5CD}");
        AZ_CLASS_ALLOCATOR(GraphCompiler, AZ::SystemAllocator, 0);
        AZ_DISABLE_COPY_MOVE(GraphCompiler);

        static void Reflect(AZ::ReflectContext* context);

        GraphCompiler() = default;
        GraphCompiler(const AZ::Crc32& toolId, const AZ::Uuid& documentId);
        virtual ~GraphCompiler();

        //! Returns the value of a registry setting that enables or disables verbose logging for the compilation process.
        static bool IsCompileLoggingEnabled();

        // GraphCompilerRequestBus::Handler overrides...
        AZStd::string GetGraphPath() const override;
        const AZStd::vector<AZStd::string>& GetGeneratedFilePaths() const override;
        bool CompileGraph() override;
        void QueueCompileGraph() override;
        bool IsCompileGraphQueued() const override;
        bool ReportGeneratedFileStatus() override;

    protected:
        // These functions trace messages and send notifications relating to the status of the compiler
        void CompileGraphStarted();
        void CompileGraphFailed();
        void CompileGraphCompleted();

        // Helper function to log and report status messages.
        void ReportStatus(const AZStd::string& statusMessage);

        const AZ::Crc32 m_toolId = {};
        const AZ::Uuid m_documentId = {};

        // Flag indicating that a request to compile the graph has been queued 
        bool m_compileGraph = {};
        // Container of file paths that were affected by the compiler. 
        AZStd::vector<AZStd::string> m_generatedFiles;
        // Index of the file your status is currently being tracked in the AP.
        int m_generatedFileIndexToProcess = {};
        // Used to prevent reporting the same message repeatedly.
        AZStd::string m_lastStatusMessage;
        // The last time file status was checked
        AZStd::chrono::steady_clock::time_point m_lastStatusRequestTime = AZStd::chrono::steady_clock::now();
    };
} // namespace AtomToolsFramework
