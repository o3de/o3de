/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <AssetBuilderSDK/AssetBuilderBusses.h>
#include <Atom/RPI.Reflect/Material/MaterialTypeAsset.h>
#include <Atom/RPI.Edit/Material/MaterialPipelineSourceData.h>
#include <AzCore/JSON/document.h>

namespace AZ
{
    namespace RPI
    {
        class MaterialTypeSourceData;

        class MaterialTypeBuilder final
            : public AssetBuilderSDK::AssetBuilderCommandBus::Handler
        {
        public:
            AZ_TYPE_INFO(MaterialTypeBuilder, "{0D2D104F-9CC6-456E-88D9-24BCDA6C0465}");

            static const char* PipelineStageJobKey;
            static const char* FinalStageJobKey;

            MaterialTypeBuilder() = default;
            ~MaterialTypeBuilder();

            // Asset Builder Callback Functions
            void CreateJobs(const AssetBuilderSDK::CreateJobsRequest& request, AssetBuilderSDK::CreateJobsResponse& response) const;
            void ProcessJob(const AssetBuilderSDK::ProcessJobRequest& request, AssetBuilderSDK::ProcessJobResponse& response) const;

            // AssetBuilderSDK::AssetBuilderCommandBus interface
            void ShutDown() override;

            /// Register to builder and listen to builder command
            void RegisterBuilder();

        private:

            //! These job functions operate on .materialtype files in the "abstract" format (see MaterialTypeSourceData), by matching them with each material pipeline.
            //! This will produce an intermediate .materialtype file that uses the "direct" format, which the "Final" stage job (below) will process.
            class PipelineStage
            {
            public:
                AZStd::string GetBuilderSettingsFingerprint() const;
                void CreateJobsHelper(
                    const AssetBuilderSDK::CreateJobsRequest& request,
                    AssetBuilderSDK::CreateJobsResponse& response,
                    const AZStd::string& materialTypeSourcePath,
                    const MaterialTypeSourceData& materialTypeSourceData) const;
                void ProcessJobHelper(
                    const AssetBuilderSDK::ProcessJobRequest& request,
                    AssetBuilderSDK::ProcessJobResponse& response,
                    const AZStd::string& materialTypeSourcePath,
                    MaterialTypeSourceData& materialTypeSourceData) const;

            private:
                AZStd::set<AZStd::string> GetMaterialPipelinePaths() const;
                AZStd::map<AZ::IO::Path, MaterialPipelineSourceData> LoadMaterialPipelines() const;
                Name GetMaterialPipelineName(const AZ::IO::Path& materialPipelineFilePath) const;

            } m_pipelineStage;

            //! These job functions operate on .materialtype files in the "direct" format (see MaterialTypeSourceData), which includes a full list of shaders.
            //! The .materialtype file could be hand-authored in a source folder, or it could be an intermediate .materialtype that was generated by the "Pipeline" stage job (above).
            //! In either case, it will produce a final MaterialTypeAsset in the cache.
            class FinalStage
            {
            public:
                AZStd::string GetBuilderSettingsFingerprint() const;
                void CreateJobsHelper(
                    const AssetBuilderSDK::CreateJobsRequest& request,
                    AssetBuilderSDK::CreateJobsResponse& response,
                    const AZStd::string& materialTypeSourcePath,
                    const MaterialTypeSourceData& materialTypeSourceData) const;
                void ProcessJobHelper(
                    const AssetBuilderSDK::ProcessJobRequest& request,
                    AssetBuilderSDK::ProcessJobResponse& response,
                    const AZStd::string& materialTypeSourcePath,
                    const MaterialTypeSourceData& materialTypeSourceData) const;

            private:
                bool ShouldOutputAllPropertiesMaterial() const;

                enum class MaterialTypeProductSubId : u32
                {
                    MaterialTypeAsset = MaterialTypeAsset::SubId,
                    AllPropertiesMaterialSourceFile
                };

            } m_finalStage;

            bool m_isShuttingDown = false;
        };

    } // namespace RPI
} // namespace AZ
