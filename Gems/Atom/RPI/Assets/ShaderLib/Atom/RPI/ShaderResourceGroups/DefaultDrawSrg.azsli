/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
  
#pragma once

#include <Atom/Features/SrgSemantics.azsli>

rootconstant uint m_rootConstantInstanceDataOffset;

ShaderResourceGroup DrawSrg : SRG_PerDraw
{
    // This SRG is unique per draw packet
    uint m_uvStreamTangentBitmask;

    uint m_instanceDataOffset;
    
    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix(uint instanceId)
    {
        return SceneSrg::GetObjectToWorldMatrix(ViewSrg::m_instanceData[m_rootConstantInstanceDataOffset + instanceId]);
    }

    //! Returns the inverse-transpose of the world matrix.
    //! Commonly used to transform normals while supporting non-uniform scale.
    float3x3 GetWorldMatrixInverseTranspose(uint instanceId)
    {
        return SceneSrg::GetObjectToWorldInverseTransposeMatrix(ViewSrg::m_instanceData[m_rootConstantInstanceDataOffset + instanceId]);
    }

    float4x4 GetWorldMatrixPrev(uint instanceId)
    {
        return SceneSrg::GetObjectToWorldMatrixPrev(ViewSrg::m_instanceData[m_rootConstantInstanceDataOffset + instanceId]);
    }

    uint GetTangentAtUv(uint uvIndex)
    {
        return (m_uvStreamTangentBitmask >> (4 * uvIndex)) & 0xF;
    }
}

