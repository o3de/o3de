/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#define PI      3.14159265f
#define TWO_PI  6.28318530f
#define INV_PI  0.31830988f
#define EPSILON 10e-5f

// Max values (largest positive values)

static const float FLOAT_32_MAX = 3.402823466e+38f;
static const float FLOAT_16_MAX = 65504.0f;


// Min values (smallest positive values)

static const float FLOAT_32_MIN = 1.175494351e-38f;
static const float FLOAT_16_MIN = 0.000000059605f;

void swap(inout float a, inout float b)
{
    float c = a;
    a = b;
    b = c;
}

// ---------- Power -----------

float Pow2(float x)
{
    return x * x;
}
float Pow3(float x)
{
    return x * x * x;
}
float Pow4(float x)
{
    x *= x;
    return x * x;
}
float Pow5(float x)
{
    return x * Pow4(x);
}

// ---------- Min & Max -----------

float min3(float a, float b, float c)
{
    return min(min(a, b), c);
}
float min4(float a, float b, float c, float d)
{
    return min(min3(a, b, c), d);
}
float max3(float a, float b, float c)
{
    return max(max(a, b), c);
}
float max4(float a, float b, float c, float d)
{
    return max(max3(a, b, c), d);
}

float min3(float3 abc)
{
    return min3(abc.x, abc.y, abc.z);
}
float min4(float4 abcd)
{
    return min4(abcd.x, abcd.y, abcd.z, abcd.w);
}
float max3(float3 abc)
{
    return max3(abc.x, abc.y, abc.z);
}
float max4(float4 abcd)
{
    return max4(abcd.x, abcd.y, abcd.z, abcd.w);
}


// ---------- Intersection -----------

// a simple ray sphere intersection function, didn't take limited precision 
// mentioned in Ray Tracing Gems : Chapter7 into consider for simplicity
// input vectors and calculation are in world space
// return length t to the closest hit point if hit, otherwise return -1
float RaySphereClosestHitWS(in float3 sphereOrigin, in float sphereRadius, 
                          in float3 rayOrigin, in float3 rayDir)
{
    // vector point from sphere to ray origin
    float3 F = rayOrigin - sphereOrigin;
    float FdotF = dot(F, F);
    float FdotD = dot(F, rayDir);
    float DdotD = dot(rayDir, rayDir);

    float det = FdotD * FdotD - (DdotD * FdotF - (DdotD * sphereRadius * sphereRadius));
    
    if(det < 0.0f)
    {
        return -1;
    }
    
    float sqrtDet = sqrt(det);
    if(sqrtDet > -FdotD)
    {
        // return further hit, because closer hit is negative, i.e. behind ray origin
        return (-FdotD + sqrtDet) / DdotD;
    }
    else
    {
        return (-FdotD - sqrtDet) / DdotD;
    }
}

// returns true if the Aabb contains the specified point
bool AabbContainsPoint(float3 aabbMin, float3 aabbMax, float3 testPoint)
{
    float3 d = step(aabbMin, testPoint) - step(aabbMax, testPoint);
    return (d.x * d.y * d.z) > 0.0f;
}

// returns the closest point on the Aabb to the specified point
float3 AabbClosestPoint(float3 aabbMin, float3 aabbMax, float3 testPoint)
{
    float3 closestPos = float3(0.0f, 0.0f, 0.0f);
    for (uint i = 0; i < 3; ++i)
    {
        closestPos[i] = max(testPoint[i], aabbMin[i]);
        closestPos[i] = min(closestPos[i], aabbMax[i]);
    }
    return closestPos;
}

// computes [0..1] percentage of a point that's in between the inner and outer AABBs
float ComputeLerpBetweenInnerOuterAABBs(float3 innerAabbMin, float3 innerAabbMax, float3 outerAabbMax, float3 aabbPos, float3 position)
{
    float3 closestPointOnInnerAabb = AabbClosestPoint(innerAabbMin, innerAabbMax, position);

    // find the distance to the outer AABB by intersecting the ray from the closestPointOnInnerAabb through the position
    // to each plane of the AABB, and take the shortest hit - this is the closest AABB plane to our point

    // translate the points and outer AABB to the origin
    // take the abs() of the points to move them to the max quadrant of the outer AABB so everything is positive
    outerAabbMax -= aabbPos;
    position = abs(position - aabbPos);
    closestPointOnInnerAabb = abs(closestPointOnInnerAabb - aabbPos);
    float3 dirToPoint = normalize(position - closestPointOnInnerAabb);

    // intersect the ray from the closest point through the position with all three planes of the AABB
    // using outerAabbMax as the plane point and the plane normal defined in the array above (n.p = d)
    // Note: this is an optimized form of the following equation, performed simultaneously in all three planes:
    //       abs(dot(planeNormal, (outerAabbMax - position)) / dot(planeNormal, dirToPoint));
    float3 distance = abs(outerAabbMax - position) / dirToPoint;
    float shortestDistance = min(min(distance.x, distance.y), distance.z);

    // divide the distance by the total distance between the two intersect points
    // if (shortest distance == total distance) the blend is 1 since it's on the inner AABB
    // if (shortest distance == 0) the blend is 0 since it's on the outer AABB
    // if in between then it's the [0..1] percentage of the distance between inner and outer
    // if the inner and outer AABBs are identical then it's on both and the blend is 1
    float3 outerAabbIntersect = position + (dirToPoint * shortestDistance);
    float totalDistance = length(outerAabbIntersect - closestPointOnInnerAabb);
    return totalDistance > 0.0f ? saturate(shortestDistance / totalDistance) : 1.0f;
}

// returns true if the Obb contains the specified point
bool ObbContainsPoint(float4x4 obbTransformInverse, float3 obbHalfExtents, float3 testPoint)
{
    // get the position in Obb local space, force to positive quadrant with abs()
    float3 p = abs(mul(obbTransformInverse, float4(testPoint, 1.0f)).xyz);
    return AabbContainsPoint(-obbHalfExtents, obbHalfExtents, p);
}

// computes [0..1] percentage of a point that's in between the inner and outer OBBs
float ComputeLerpBetweenInnerOuterOBBs(float3x4 obbTransformInverse, float3 innerObbHalfExtents, float3 outerObbHalfExtents, float3 position)
{
    // get the position in Obb local space, force to positive quadrant with abs()
    float3 p = abs(mul(obbTransformInverse, float4(position, 1.0f)));
    return ComputeLerpBetweenInnerOuterAABBs(-innerObbHalfExtents, innerObbHalfExtents, outerObbHalfExtents, float3(0.0f, 0.0f, 0.0f), p);
}

// ---------- Normal Encoding -----------

// Encode/Decode functions for Signed Octahedron normals
// Store in a 10/10/10/2 texture for best results
// http://johnwhite3d.blogspot.com/2017/10/signed-octahedron-normal-encoding.html
float3 EncodeNormalSignedOctahedron(float3 normal)
{
    normal /= (abs(normal.x) + abs(normal.y) + abs(normal.z));

    float3 encodedNormal;
    encodedNormal.y = normal.y * 0.5f + 0.5f;
    encodedNormal.x = normal.x * 0.5f + encodedNormal.y;
    encodedNormal.y = normal.x * -0.5f + encodedNormal.y;
    encodedNormal.z = saturate(normal.z * FLOAT_32_MAX);
    return encodedNormal;
}

float3 DecodeNormalSignedOctahedron(float3 encodedNormal)
{
    float3 decodedNormal;
    decodedNormal.x = (encodedNormal.x - encodedNormal.y);
    decodedNormal.y = (encodedNormal.x + encodedNormal.y) - 1.0f;
    decodedNormal.z = encodedNormal.z * 2.0f - 1.0f;
    decodedNormal.z = decodedNormal.z * (1.0f - abs(decodedNormal.x) - abs(decodedNormal.y));
    decodedNormal = normalize(decodedNormal);
    return decodedNormal;
}

// Encode normal (assume normalized) to a texture coordinate within [0, 1] to save a channel
// not lossless, but error is negligible. This method is based on Lambert azimuthal projection which usually be used to project world map: 
// https://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection
float2 EncodeNormalSphereMap(float3 normal)
{
    return normal.z <= (-1.0 + EPSILON) ? float2(0.0, 0.0) : float2(normal.xy / sqrt(normal.z * 8.0 + 8.0) + 0.5);
}

float3 DecodedNormalSphereMap(float2 encodedNormal)
{
    float2 fenc = encodedNormal * 4.0 - 2.0;
    float f = dot(fenc, fenc);
    float g = sqrt(1.0 - 0.25 * f);
    float3 normal;
    normal.xy = fenc * g;
    normal.z = 1.0 - 0.5 * f;
    // directly give out normal for invalid point at south pole, where the normal straightly points downward
    return (encodedNormal.x + encodedNormal.y) > EPSILON ? normal : float3(0.0, 0.0, -1.0);
}

// ---------- Unorm 2-bit Encoding -----------

// The four possible values in a UNORM 2-bit channel are encoded as: 0/3, 1/3, 2/3, 3/3
static const float UNORM_2BIT_FLAG1ONLY = 1.0f / 3.0f;
static const float UNORM_2BIT_FLAG2ONLY = 2.0f / 3.0f;
static const float UNORM_2BIT_BOTHFLAGS = 3.0f / 3.0f;
static const float UNORM_2BIT_EPSILON = 10e-3f;

// Encode two flags into a UNORM 2-bit channel
float EncodeUnorm2BitFlags(bool flag1, bool flag2)
{
    return (flag1 + (flag2 * 2)) / 3.0f;
}

// Decode flag1 from a UNORM 2-bit channel
bool DecodeUnorm2BitFlag1(float value)
{
    return (abs(value - UNORM_2BIT_FLAG1ONLY) < UNORM_2BIT_EPSILON) || (value == UNORM_2BIT_BOTHFLAGS);
}

// Decode flag2 from a UNORM 2-bit channel
bool DecodeUnorm2BitFlag2(float value)
{
    return (abs(value - UNORM_2BIT_FLAG2ONLY) < UNORM_2BIT_EPSILON) || (value == UNORM_2BIT_BOTHFLAGS);
}

// ---------- Quaternion -----------

float3 MultiplyVectorQuaternion(float3 v, float4 q)
{
    return v + 2.0f * cross(cross(v, q.xyz) + q.w * v, q.xyz);
}

// Rotates a vector using a rotation from a quaternion
// Assumes a right-handed coordinate system
float3 RotateVectorByQuaternion(float3 v, float4 q)
{
    return v + 2.0f * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

// ---------- Projection -----------

// This converts depth in clip space of perspective projection to linear depth in [0, 1].
// coefficients:
//   x : n / f - n
//   y : n - f
//   z : f
//   where n : nearDepth and f : farDepth.
// By the definition of the perspective projection,
//   (z_, w_)^T = P (z, w)^T
// where P = /  f/(n-f)    nf/(n-f)   \
//           \    -1          0       /.
// Then inverse(P) (d, 1)^T =
//       /         -1          \
//       \   ((n-f)d + f) / nf /.
float PerspectiveDepthToLinear(float clipDepth, float3 coefficients)
{
    return coefficients.x * (coefficients.z / (coefficients.y * clipDepth + coefficients.z) - 1.);
}

// ---------- Random number generators -----------
// George Marsaglia's Xorshift RNGs
// https://www.jstatsoft.org/article/view/v008i14/xorshift.pdf
uint Xorshift(in uint value) 
{
    value ^= value << 13;
    value ^= value >> 17;
    value ^= value << 5;
    return value;
}

uint NextRandomUint(inout uint seed)
{
    seed = Xorshift(seed);
    return seed;
}

// Returns a random float with range [0, 1)
float NextRandomFloatUniform(inout uint seed)
{
    seed = Xorshift(seed);
    return (float)seed /  4294967295.0f;
}

//! Returns the inverse of lerp, 't', such that value = lerp(a, b, t), or returns 0 when a == b.
float LerpInverse(float a, float b, float value)
{
    if(abs(a - b) <= EPSILON)
    {
        return 0.0;
    }
    else
    {
        return (value - a) / (b - a);
    }
}
//-------- Gaussinan distribution functions ---------
// https://en.wikipedia.org/wiki/Gaussian_function
// Parameter:
// amplitude - the height of the curve's peak
// median - the position of the Mean / Median - the center of the "bell"
// standardDeviation - controls the width of the "bell"
float Gaussian(float x, float amplitude, float median, float standardDeviation)
{
    float exponent = -0.5 * Pow2((x - median) / standardDeviation);
    return amplitude * exp(exponent);
}
float GaussianNormalized(float x, float expectedValue, float standardDeviation)
{
    float normalizedAmplitude = 1.0f / (standardDeviation * sqrt(TWO_PI));
    return Gaussian(x, normalizedAmplitude, expectedValue, standardDeviation);
}
