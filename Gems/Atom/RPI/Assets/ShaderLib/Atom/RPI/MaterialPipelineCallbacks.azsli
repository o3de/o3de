/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// The material pipeline uses these functions to call into material type code.
// The material type may optionally implement any of these functions for custom behavior.
// Any functions that the material type does not implement will be automatically stubbed out with default behavior.



// This struct includes fields for all vertex data that can possibly be supported by any material pipeline.
// The actual vertex stage inputs and outputs will vary between shaders. If any of these fields isn't needed
// by a given shader, then the material pipeline will initialize them to 0 and will not use them.
// This way, the material type implementation of the callback function can read and set any of these values
// without caring whether they are actually used.
//
// The content of this struct can be expanded as needed to support new material pipeline requirements.
//
// Note that the long term goal here should be to keep this data relatively abstract, and don't assume it came
// from a vertex shader function. It could be part of a visibility buffer system or some other alternative
// pipeline. It might not meet that goal in its current form, but we should try to move in that direction.
// For example, the comment below about skipping bitangent is not ideal, as that makes some specialized assumptions.
// It's a work in progress.
//
// TODO(MaterialPipeline): There is a bit of complexity around how to expose and manipulate local space vs world space vectors.
//       We want to allow the material type to operate in either local space or world space without having to do
//       repeated transformations which would be inefficient. There are a few ways we could accomplish this, but
//       right now I'm thinking we might want to allow modification in two different phases with two different structs: 
//         MaterialFunction_AdjustLocalVertexData(inout LocalVertexData)
//         MaterialFunction_AdjustWorldVertexData(in LocalVertexData, inout WorldVertexData)
//       The two structs would have different fields as appropriate, the local version would be adjusted first, then
//       the main shader code would do any transforms, then call the second adjustment function.
//       Another option might be to let the material type set some flags to configure how the transformations should be
//       done but that might get confusing.
//       Anyway, for now this code follows the pattern currently being tested in MaterialCanvas, where local position is
//       available but cannot be changed, though I'm making it more explicit here through by separating positionLS into
//       a separate function parameter.
class VertexData
{
    float3 positionWS;

    float3 normalLS;
    float4 tangentLS;
    // Note that bitangent is not included here because we assume it will be constructed in 
    // the pixel stage, which is more efficient on Local Data Share (LDS) usage.
    
    #define MATERIAL_PIPELINE_MAX_UV_COUNT 4
    float2 uvs[MATERIAL_PIPELINE_MAX_UV_COUNT];

    float4 blendMask;

    void InitializeToZero()
    {
        positionWS = float3(0,0,0);
        normalLS = float3(0,0,0);
        tangentLS = float4(0,0,0,0);
        uvs[0] = float2(0,0);
        uvs[1] = float2(0,0);
        uvs[2] = float2(0,0);
        uvs[3] = float2(0,0);
        blendMask = float4(0,0,0,0);
    }
};

// Helper functions for doing common transformations.
float3 LocalSpaceToWorldSpace(float3 position)
{
    return mul(ObjectSrg::GetWorldMatrix(), float4(position, 1.0)).xyz;
}

// If the material type implements this function, it must #define MaterialFunction_AdjustVertexData_DEFINED 1
void MaterialFunction_AdjustVertexData(in float3 positionLS, inout VertexData vertexData);

#ifndef MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE
#error The Material Pipeline shader must define MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE before including this file.
#endif

#if MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE
// If the material type implements this function, it must #define MaterialFunction_AdjustSurface_DEFINED 1
// Note the Surface struct will be defined by the lighting model code that is included.
void MaterialFunction_AdjustSurface(inout Surface outSurface);
#endif




