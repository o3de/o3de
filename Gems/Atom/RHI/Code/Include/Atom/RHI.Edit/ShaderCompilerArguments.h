/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
#pragma once

#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/Preprocessor/Enum.h>
#include <AzCore/std/string/string.h>
#include <AtomCore/std/containers/array_view.h>

namespace AZ
{
    namespace RHI
    {
        AZ_ENUM_CLASS_WITH_UNDERLYING_TYPE(MatrixOrder, uint8_t,
            Default,  // nothing
            Column,   // -Zpc
            Row       // -Zpr
        );

        struct ShaderCompilerArguments
        {
            AZ_TYPE_INFO(ShaderCompilerArguments, "{7D0D58C8-EB95-4595-BC96-7390BEE0C048}");

            static void Reflect(ReflectContext* context);

            //! Helper.
            //! @param commandLineString: A string with command line arguments of the form:
            //!             "-<arg1> --<arg2> --<arg3>[=<value3>] ..."
            //!             Example: "--use-spaces --namespace=vk -W1"
            //! Returns: A list with just the [-|--]<argument name>:
            //!          ["-<arg1>", "--<arg2>", "--arg3"]
            //!          For the example shown above it will return this vector:
            //!          ["--use-spaces", "--namespace", "-W1]
            static AZStd::vector<AZStd::string> GetListOfArgumentNames(AZStd::string_view commandLineString);

            //! Helper.
            //! Takes a list of names of command line arguments and removes those arguments from @commandLineString.
            //! The core functionality of this function is that it searches by name in @commandLineString and removes
            //! name and value if the name is found.
            //! @param listOfArguments: This is a list of strings, usually generated by the helper function ShaderCompilerArguments::GetListOfArgumentNames()
            //! @param commandLineString: A single string made of several command line arguments
            //! @returns A new string based on @commandLineString but with the matching arguments and their values
            //!          removed from it.
            static AZStd::string RemoveArgumentsFromCommandLineString(
                AZStd::array_view<AZStd::string> listOfArguments, AZStd::string_view commandLineString);

            //! Helper.
            //! @param commandLineString: "  --arg1   -arg2     --arg3=foo --arg4=bar  "
            //! @returns "--arg1 -arg2 --arg3=foo --arg4=bar"
            static AZStd::string RemoveExtraSpaces(AZStd::string_view commandLineString);


            //! Helper.
            //! Accepts two arbitrary strings that contain typical command line arguments and returns
            //! a new string that combines the arguments were the arguments on the @right have precedence.
            //! Example:
            //! @param left: "--arg1 -arg2 --arg3=foo"
            //! @param right: "--arg3=bar --arg4"
            //! @returns: "--arg1 -arg2 --arg3=bar --arg4" 
            static AZStd::string MergeCommandLineArguments(AZStd::string_view left, AZStd::string_view right);

            //! Helper.
            //! @param commandLineString: A string that contains a series of command line arguments.
            //! @returns: true if @commandLineString contains macro definitions, e.g:
            //!           "-D MACRO" or "-D MACRO=VALUE" or "-DMACRO", "-DMACRO=VALUE".
            static bool HasMacroDefinitions(AZStd::string_view commandLineString);

            //! Returns true if either @m_azslcAdditionalFreeArguments or @m_dxcAdditionalFreeArguments contain
            //! macro definitions, e.g. "-D MACRO" or "-D MACRO=VALUE" or "-DMACRO", "-DMACRO=VALUE".
            //! It is used for validation to forbid macro definitions, because the idea is that this struct
            //! is used inside GlobalBuildOptions which has a dedicated variable for macro definitions.
            bool HasMacroDefinitionsInCommandLineArguments();

            //! Mix two instances of arguments, by or-ing bools, or by "if different, right hand side wins"
            void Merge(const ShaderCompilerArguments& right);

            //! [GFX TODO] [ATOM-15472] Remove this function.
            //! Determine whether there is a rebuild-worthy difference in arguments for AZSLc
            bool HasDifferentAzslcArguments(const ShaderCompilerArguments& right) const;

            //! Generate the proper command line for AZSLc
            AZStd::string MakeAdditionalAzslcCommandLineString() const;

            //! Warnings are separated from the other arguments because not all AZSLc modes can support passing these.
            AZStd::string MakeAdditionalAzslcWarningCommandLineString() const;

            //! Generate the proper command line for DXC
            AZStd::string MakeAdditionalDxcCommandLineString() const;

            //! AZSLc
            static constexpr uint8_t LevelUnset = std::numeric_limits<uint8_t>::max();
            uint8_t m_azslcWarningLevel = LevelUnset;
            bool m_azslcWarningAsError = false;
            AZStd::string m_azslcAdditionalFreeArguments;
            // note: if you add new sort of arguments here, don't forget to update HasDifferentAzslcArguments()

            //! DXC
            bool m_dxcDisableWarnings = false;
            bool m_dxcWarningAsError = false;
            bool m_dxcDisableOptimizations = false;
            bool m_dxcGenerateDebugInfo = false;
            uint8_t m_dxcOptimizationLevel = LevelUnset;
            AZStd::string m_dxcAdditionalFreeArguments;

            //! both
            MatrixOrder m_defaultMatrixOrder = MatrixOrder::Default;
        };
    }

    AZ_TYPE_INFO_SPECIALIZE(RHI::MatrixOrder, "{69110FCD-8C61-47D0-B08D-999EE39CBDC2}");
}
