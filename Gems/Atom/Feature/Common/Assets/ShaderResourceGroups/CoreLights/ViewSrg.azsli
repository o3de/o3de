/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#ifndef AZ_COLLECTING_PARTIAL_SRGS
#error Do not include this file directly. Include the main .srgi file instead.
#endif

partial ShaderResourceGroup ViewSrg
{ 
    
    // The per-instance data for the visible objects in each view. The per-instance data is an index
    // used to look up the actual instance data from a persistant buffer
    StructuredBuffer<uint> m_instanceData;
    
    // Light visibility grid is this wide 
    // e.g. if the screen resolution is 1904 x 800 with 16x16 bins then grid width is 1904/16 = 119 
    uint m_tileGridWidth;

    // This struct is coherent to the ones in Shadow.azsli and EsmShadowmapsPass.h.
    struct FilterParameter
    {
        uint m_isEnabled;
        uint2 m_shadowmapOriginInSlice;
        uint m_shadowmapSize;
        float m_lightDistanceOfCameraViewFrustum;
        float m_nf;  // n*f
        float m_f_n; // f - n
        float m_f;   // f
                     // where n: nearDepth, f: farDepth.
    };

    StructuredBuffer<SimplePointLight> m_simplePointLights;
    uint m_simplePointLightCount;

    StructuredBuffer<SimpleSpotLight> m_simpleSpotLights;
    uint m_simpleSpotLightCount;
    Buffer<uint> m_visibleSimpleSpotLightIndices;
    uint m_visibleSimpleSpotLightCount;
    
    static const uint MaxGoboTextureCount = 5;
    Texture2D<float> m_goboTextures[MaxGoboTextureCount];

    StructuredBuffer<PointLight> m_pointLights;
    uint m_pointLightCount;
    Buffer<uint> m_visibleSimplePointLightIndices;
    uint m_visibleSimplePointLightCount;

    // Projected Shadows

    struct ProjectedShadow
    {
        float4x4 m_depthBiasMatrix;
        uint m_shadowmapArraySlice; // array slice who has shadowmap in the atlas.
        uint m_shadowFilterMethod; 
        float m_boundaryScale;
        uint m_filteringSampleCount;
        float2 m_unprojectConstants;
        float m_bias;
        float m_normalShadowBias;
        float m_esmExponent;
        float3 m_padding;
    };

    StructuredBuffer<ProjectedShadow> m_projectedShadows;
    StructuredBuffer<FilterParameter> m_projectedFilterParams;

    float m_shadowmapAtlasSize; // image size of shadowmap atlas. width and height has the same value.
    float m_invShadowmapAtlasSize; // reciprocal of the atlas size

    // Directional Light shadows

    static const uint MaxCascadeCount = 4;
    static const uint DirectionalLightShadowDebugColoringBitMask = 1;

    struct DirectionalLightShadow
    {
        float4x4 m_lightViewToShadowmapMatrices[MaxCascadeCount];
        float4x4 m_worldToLightViewMatrices[MaxCascadeCount];
        float m_slopeBiasBase[MaxCascadeCount];
        float m_boundaryScale;
        uint m_shadowmapSize; // width and height of shadowmap
        uint m_cascadeCount;
        float m_shadowBias; 
        float m_normalShadowBias; 
        uint m_filteringSampleCountMode;
        uint m_debugFlags;
        uint m_shadowFilterMethod;
        float m_far_minus_near;
        float3 m_padding;
    };

    enum ShadowFilterMethod
    {
        ShadowFilterMethodNone = 0,
        ShadowFilterMethodPcf,
        ShadowFilterMethodEsm,
        ShadowFilterMethodEsmPcf
    };

    StructuredBuffer<DirectionalLightShadow> m_directionalLightShadows;
    uint m_directionalLightCount;
    uint m_shadowIndexDirectionalLight;

    StructuredBuffer<FilterParameter> m_esmsDirectional;

    StructuredBuffer<DiskLight> m_diskLights;
    uint m_diskLightCount;
    
    StructuredBuffer<CapsuleLight> m_capsuleLights;
    uint m_capsuleLightCount;
    
    StructuredBuffer<QuadLight> m_quadLights;
    uint m_quadLightCount;
    
    StructuredBuffer<PolygonLight> m_polygonLights;
    uint m_polygonLightCount;
    StructuredBuffer<float4> m_polygonLightPoints; // points for each polygon. Max 64 points per polygon.
    
    uint PolygonLightGetStartIndex(uint index)
    {
        return index >> 16;
    }
    uint PolygonLightGetEndIndex(uint index)
    {
        return index & 0x0000FFFF;
    }
}
