/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define ENABLE_DEBUG_MODIFY_OUTPUT 0

#if MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE
    
#define MATERIAL_HAS_UVS 0

    VsOutput EvaluateVertexGeometry(VsInput IN, VsSystemValues SV, const MaterialParameters params)
    {        
        VsOutput output;

        float4x4 objectToWorld = GetObjectToWorldMatrix(SV);
        output.worldPosition = mul(objectToWorld, float4(IN.position, 1.0)).xyz;
        
        float4x4 viewProjectionMatrix = GetViewProjectionMatrix(SV);
        output.position = mul(viewProjectionMatrix, float4(output.worldPosition, 1.0));

        output.normal = IN.normal;

        return output;
    }
        
    PixelGeometryData EvaluatePixelGeometry(VsOutput IN, VsSystemValues SV, bool isFrontFace, const MaterialParameters params)
    {
        PixelGeometryData geoData;
        geoData.positionWS = IN.worldPosition;
        geoData.vertexNormal = normalize(IN.normal);
        return geoData;
    }

    Surface EvaluateSurface(VsOutput IN, VsSystemValues SV, PixelGeometryData geoData, const MaterialParameters params)
    {
        Surface surface;
        surface.lightingChannels = GetLightingChannelMask(SV);
        surface.position = geoData.positionWS;
        surface.vertexNormal = geoData.vertexNormal;
        surface.normal = geoData.vertexNormal;

        float3 baseColor = float3(1,1,1);
        float specularF0Factor = 0.5;
        float metallic = 1;
        surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

        surface.roughnessLinear = 0;
        surface.CalculateRoughnessA();

        return surface;
    }

    // use the lighting model (lightingData, BRDF - function and ApplyLights) from the BasePBR

    #include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_LightingEval.azsli>

#else

    #include <Atom/Feature/Common/Assets/Shaders/Materials/DepthPass_VertexEval.azsli>

#endif
