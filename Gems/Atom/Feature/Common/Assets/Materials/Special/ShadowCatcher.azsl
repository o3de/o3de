/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg.srgi>

option enum class OpacityMode 
{
    Opaque, 
    Cutout, 
    Blended, 
    TintedTransparent
    
} o_opacity_mode = OpacityMode::Opaque;

struct VSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL; // Needed for some shadow filtering algorithms
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float3 m_worldPosition : TEXCOORD0;
    float3 m_worldNormal : NORMAL;
};

struct PSOutput
{
    float4 m_color : SV_Target;
};

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    float m_opacity;
}

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <Atom/Features/Shadow/DirectionalLightShadow.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

//! Shades the entire geometry with the shadow color, not just what's in shadow. For debugging.
option bool o_shadeAll = false;

VSOutput ShadowCatcherVS(VSInput IN)
{
    VSOutput OUT;
 
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
  
    OUT.m_worldPosition = worldPosition;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    OUT.m_worldNormal = normalize(mul(ObjectSrg::GetWorldMatrixInverseTranspose(), IN.m_normal));
    

    
    return OUT;
}

PSOutput ShadowCatcherPS(VSOutput IN)
{
    PSOutput OUT;
        
    float litRatio = DirectionalLightShadow::GetVisibility(ViewSrg::m_shadowIndexDirectionalLight, IN.m_worldPosition, IN.m_worldNormal, 0);

    if (o_shadeAll)
    {
        litRatio = 0.0f;
    }

    if (ViewSrg::m_directionalLightShadows[ViewSrg::m_shadowIndexDirectionalLight].m_debugFlags & 
        ViewSrg::DirectionalLightShadowDebugColoringBitMask)
    {
        float3 debugColor = float3(1,1,1) * litRatio * 0.5f;
        debugColor = DirectionalLightShadow::AddDebugColoring(debugColor, ViewSrg::m_shadowIndexDirectionalLight, IN.m_worldPosition, IN.m_worldNormal, 0);
        OUT.m_color.rgb = debugColor;
        OUT.m_color.a = 1; 
    }
    else
    {
        OUT.m_color = float4(0, 0, 0, 1 - litRatio) * MaterialSrg::m_opacity;  
    } 

    return OUT; 
}
 

