/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/PBR/ForwardPassSrg.azsli>

// Pass Output
#include <Atom/Features/PBR/ForwardSubsurfacePassOutput.azsli>

// Utility
#include <Atom/Features/ColorManagement/TransformColor.azsli>

// Custom Surface & Lighting
#include <Atom/Features/PBR/Lighting/EyeLighting.azsli>

// Decals
#include <Atom/Features/PBR/Decals.azsli>

// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0_tiled : UV0;
    float2 m_uv1_unwrapped : UV1;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float2 m_uv[UvSetCount] : UV1;

    // Used for eye refraction
    float3 m_localPosition : UV3;
    
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV4;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput EyeVS(VSInput IN)
{
    VSOutput OUT;
 
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
 
    // UV0 is for tiled UVs. 
    // Even though the "unwrapped" stream is considered the main stream from a material perspective, we
    // still define UV0 in order to match the default UV set order in most DCC tools for higher compatibility.
    OUT.m_uv[0] = IN.m_uv0_tiled;

    // UV1 is for unwrapped UVs. The main textures in the Eye material will almost always use this UV set.
    OUT.m_uv[1] = IN.m_uv1_unwrapped;

    VertexHelper(IN, OUT, worldPosition, false);
    OUT.m_localPosition = IN.m_position.xyz;

    return OUT;
}


// ---------- Pixel Shader ----------

PbrLightingOutput EyePS_Common(VSOutput IN)
{
    const bool isFrontFace = true;

    // ------- Tangents & Bitangets -------
    float3 tangents[UvSetCount] = { IN.m_tangent.xyz, IN.m_tangent.xyz };
    float3 bitangents[UvSetCount] = { IN.m_bitangent.xyz, IN.m_bitangent.xyz };

    if (o_iris_o_normal_useTexture || o_sclera_o_normal_useTexture)
    {
        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(
                IN.m_normal,
                IN.m_worldPosition, 
                isFrontFace,
                IN.m_uv[i],
                i,
                IN.m_tangent,
                IN.m_bitangent,
                tangents[i],
                bitangents[i]);
        }
    }
    
    Surface surface;
    surface.position = IN.m_worldPosition;

    EvaluateEyeSurface(IN.m_normal, IN.m_localPosition, IN.m_uv, tangents, bitangents, isFrontFace, surface);

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    
    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    // ------- Lighting Calculation -------

    surface.clearCoat.factor = 0.0;
    surface.clearCoat.roughness = 0.0;
    surface.clearCoat.normal = float3(0.0, 0.0, 0.0);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData);
        
    // ------- Preparing output -------

    // Pack factor and quality, drawback: because of precision limit of float16 cannot represent exact 1, maximum representable value is 0.9961
    uint factorAndQuality = dot(round(float2(saturate(surface.subsurfaceScatteringFactor), MaterialSrg::m_subsurfaceScatteringQuality) * 255), float2(256, 1));
    lightingOutput.m_diffuseColor.w = factorAndQuality * (o_enableSubsurfaceScattering ? 1.0 : -1.0);
    lightingOutput.m_scatterDistance = MaterialSrg::m_scatterDistance;

    return lightingOutput;
}

[earlydepthstencil]
ForwardPassOutput EyePS(VSOutput IN)
{
    ForwardPassOutput OUT;

    PbrLightingOutput lightingOutput = EyePS_Common(IN);

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_scatterDistance = lightingOutput.m_scatterDistance;

    return OUT;
}
