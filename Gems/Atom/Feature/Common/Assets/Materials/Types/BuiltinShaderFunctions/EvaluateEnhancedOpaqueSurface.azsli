/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// Alpha
#include "../MaterialInputs/AlphaInput.azsli"

// Subsurface
#include "../MaterialInputs/SubsurfaceInput.azsli"

// Transmission
#include "../MaterialInputs/TransmissionInput.azsli"

// ---------- Material Parameters ----------

COMMON_OPTIONS_BASE_COLOR()
COMMON_OPTIONS_ROUGHNESS()
COMMON_OPTIONS_METALLIC()
COMMON_OPTIONS_SPECULAR_F0()
COMMON_OPTIONS_NORMAL()
COMMON_OPTIONS_CLEAR_COAT()
COMMON_OPTIONS_OCCLUSION()
COMMON_OPTIONS_EMISSIVE()
COMMON_OPTIONS_DETAIL_MAPS()
// Note COMMON_OPTIONS_PARALLAX is in StandardPBR_Common.azsli because it's needed by all StandardPBR shaders.

void EvaluateEnhancedOpaqueSurface(
    float3 normal,
    float2 uv[TotalUvSetCount],
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    bool isFrontFace,
    // NOTE: Surface::m_worldPosition expected to be populated already
    inout Surface surface,
    AnisotropicSurfaceData anisoSurfaceData)
{
    alpha = EvaluateAlphaAndClip(uv);

    opacityAffectsSpecularFactor = MaterialSrg::m_opacityAffectsSpecularFactor;

    surface.vertexNormal = normalize(normal);

    // Compared to the standard surface, the "enhanced surface" adds additional data needed to sample an anisotropic BRDF,
    // support subsurface scattering, and blends in a detail layer using an additional set of uv streams

    // ------- Detail Layer Setup -------
    
    const float2 detailUv = uv[MaterialSrg::m_detail_allMapsUvIndex + UvSetCount];

    // When the detail maps and the detail blend mask are on the same UV, they both use the transformed detail UVs because they are 'attached' to each other
    const float2 detailBlendMaskUv =
        (MaterialSrg::m_detail_blendMask_uvIndex == MaterialSrg::m_detail_allMapsUvIndex) ?
        detailUv[MaterialSrg::m_detail_blendMask_uvIndex] : 
        uv[MaterialSrg::m_detail_blendMask_uvIndex];        

    const float detailLayerBlendFactor = GetDetailLayerBlendFactor(
        MaterialSrg::m_detail_blendMask_texture,
        MaterialSrg::m_sampler,
        detailBlendMaskUv,
        o_detail_blendMask_useTexture,
        MaterialSrg::m_detail_blendFactor);

    // ------- Normal -------
    
    float2 normalUv = uv[MaterialSrg::m_normalMapUvIndex];
    float3x3 uvMatrix = MaterialSrg::m_normalMapUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3(); // By design, only UV0 is allowed to apply transforms.
    float detailLayerNormalFactor = MaterialSrg::m_detail_normal_factor * detailLayerBlendFactor;
    surface.vertexNormal = vertexNormal;
    surface.normal = GetDetailedNormalInputWS(
        isFrontFace, normal,
        tangents[MaterialSrg::m_normalMapUvIndex],      bitangents[MaterialSrg::m_normalMapUvIndex],      MaterialSrg::m_normalMap,             MaterialSrg::m_sampler, normalUv, MaterialSrg::m_normalFactor,  MaterialSrg::m_flipNormalX,         MaterialSrg::m_flipNormalY,         uvMatrix,                      o_normal_useTexture,
        tangents[MaterialSrg::m_detail_allMapsUvIndex], bitangents[MaterialSrg::m_detail_allMapsUvIndex], MaterialSrg::m_detail_normal_texture, MaterialSrg::m_sampler, detailUv, detailLayerNormalFactor,      MaterialSrg::m_detail_normal_flipX, MaterialSrg::m_detail_normal_flipY, MaterialSrg::m_detailUvMatrix, o_detail_normal_useTexture);

    //--------------------- Base Color ----------------------

    // [GFX TODO][ATOM-1761] Figure out how we want our base material to expect channels to be encoded, and apply that to the way we pack alpha. 
    
    float detailLayerBaseColorFactor = MaterialSrg::m_detail_baseColor_factor * detailLayerBlendFactor;

    float3 baseColor = GetDetailedBaseColorInput(
        MaterialSrg::m_baseColorMap,             MaterialSrg::m_sampler, baseColorUv, o_baseColor_useTexture,        MaterialSrg::m_baseColor,  MaterialSrg::m_baseColorFactor, o_baseColorTextureBlendMode,
        MaterialSrg::m_detail_baseColor_texture, MaterialSrg::m_sampler, detailUv,    o_detail_baseColor_useTexture, detailLayerBaseColorFactor);
        
    if(o_parallax_highlightClipping && displacementIsClipped)
    {
        ApplyParallaxClippingHighlight(baseColor);
    }

    // ------- Metallic -------

    float metallic = 0;
    if(!o_enableSubsurfaceScattering)   // If subsurface scattering is enabled skip texture lookup for metallic, as this quantity won't be used anyway
    {
        float2 metallicUv = uv[MaterialSrg::m_metallicMapUvIndex];
        metallic = GetMetallicInput(MaterialSrg::m_metallicMap, MaterialSrg::m_sampler, metallicUv, MaterialSrg::m_metallicFactor, o_metallic_useTexture);
    }

    // ------- Specular -------

    float2 specularUv = uv[MaterialSrg::m_specularF0MapUvIndex];
    float specularF0Factor = GetSpecularInput(MaterialSrg::m_specularF0Map, MaterialSrg::m_sampler, specularUv, MaterialSrg::m_specularF0Factor, o_specularF0_useTexture);

    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // ------- Roughness -------

    float2 roughnessUv = uv[MaterialSrg::m_roughnessMapUvIndex];
    surface.roughnessLinear = GetRoughnessInput(MaterialSrg::m_roughnessMap, MaterialSrg::m_sampler, roughnessUv, MaterialSrg::m_roughnessFactor,
                                        MaterialSrg::m_roughnessLowerBound, MaterialSrg::m_roughnessUpperBound, o_roughness_useTexture);
    surface.CalculateRoughnessA();

    // ------- Subsurface -------

    float2 subsurfaceUv = uv[MaterialSrg::m_subsurfaceScatteringInfluenceMapUvIndex];
    float surfaceScatteringFactor = GetSubsurfaceInput(MaterialSrg::m_subsurfaceScatteringInfluenceMap, MaterialSrg::m_sampler, subsurfaceUv, MaterialSrg::m_subsurfaceScatteringFactor);

    // ------- Transmission -------

    float2 transmissionUv = uv[MaterialSrg::m_transmissionThicknessMapUvIndex];
    float4 transmissionTintThickness = GeTransmissionInput(MaterialSrg::m_transmissionThicknessMap, MaterialSrg::m_sampler, transmissionUv, MaterialSrg::m_transmissionTintThickness);
    surface.transmission.tint = transmissionTintThickness.rgb;
    surface.transmission.thickness = transmissionTintThickness.w;
    surface.transmission.transmissionParams = MaterialSrg::m_transmissionParams;

    // ------- Anisotropy -------

    if (o_enableAnisotropy)
    {
        // Convert the angle from [0..1] = [0 .. 180 degrees] to radians [0 .. PI]
        const float anisotropyAngle = MaterialSrg::m_anisotropicAngle * PI;
        const float anisotropyFactor = MaterialSrg::m_anisotropicFactor;
        anisoSurfaceData.Init(surface.normal, tangent, bitangent, anisotropyAngle, anisotropyFactor, surface.roughnessA);
    }

    // ------- Emissive -------

    float2 emissiveUv = uv[MaterialSrg::m_emissiveMapUvIndex];
    surface.emissiveLighting = GetEmissiveInput(
        MaterialSrg::m_emissiveMap, MaterialSrg::m_sampler, emissiveUv,
        MaterialSrg::m_emissiveIntensity, MaterialSrg::m_emissiveColor.rgb,
        o_emissiveEnabled, o_emissive_useTexture);

    // ------- Occlusion -------
    
    surface.diffuseAmbientOcclusion = GetOcclusionInput(MaterialSrg::m_diffuseOcclusionMap, MaterialSrg::m_sampler, uv[MaterialSrg::m_diffuseOcclusionMapUvIndex], MaterialSrg::m_diffuseOcclusionFactor, o_diffuseOcclusion_useTexture);
    surface.specularOcclusion = GetOcclusionInput(MaterialSrg::m_specularOcclusionMap, MaterialSrg::m_sampler, uv[MaterialSrg::m_specularOcclusionMapUvIndex], MaterialSrg::m_specularOcclusionFactor, o_specularOcclusion_useTexture);

    // ------- Clearcoat -------
    
    // [GFX TODO][ATOM-14603]: Clean up the double uses of these clear coat flags
    if(o_clearCoat_feature_enabled)
    {
        if(o_clearCoat_enabled)
        {
            float3x3 uvMatrix = MaterialSrg::m_clearCoatNormalMapUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3();
            GetClearCoatInputs(MaterialSrg::m_clearCoatInfluenceMap, uv[MaterialSrg::m_clearCoatInfluenceMapUvIndex], MaterialSrg::m_clearCoatFactor, o_clearCoat_factor_useTexture,
                               MaterialSrg::m_clearCoatRoughnessMap, uv[MaterialSrg::m_clearCoatRoughnessMapUvIndex], MaterialSrg::m_clearCoatRoughness, o_clearCoat_roughness_useTexture,
                               MaterialSrg::m_clearCoatNormalMap,    uv[MaterialSrg::m_clearCoatNormalMapUvIndex], normal, o_clearCoat_normal_useTexture, MaterialSrg::m_clearCoatNormalStrength,
                               uvMatrix, tangents[MaterialSrg::m_clearCoatNormalMapUvIndex], bitangents[MaterialSrg::m_clearCoatNormalMapUvIndex],
                               MaterialSrg::m_sampler, isFrontFace,
                               surface.clearCoat.factor, surface.clearCoat.roughness, surface.clearCoat.normal);
        }

        // manipulate base layer f0 if clear coat is enabled
        // modify base layer's normal incidence reflectance
        // for the derivation of the following equation please refer to:
        // https://google.github.io/filament/Filament.md.html#materialsystem/clearcoatmodel/baselayermodification
        float3 f0 = (1.0 - 5.0 * sqrt(surface.specularF0)) / (5.0 - sqrt(surface.specularF0));
        surface.specularF0 = lerp(surface.specularF0, f0 * f0, surface.clearCoat.factor);
    }

    // ------- Subsurface scattering -------

    surface.subsurfaceScatteringQuality = MaterialSrg::m_subsurfaceScatteringQuality;
    surface.scatterDistance = MaterialSrg::m_scatterDistance;
}