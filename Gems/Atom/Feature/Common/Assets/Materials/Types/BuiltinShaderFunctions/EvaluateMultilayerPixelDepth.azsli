/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/Features/ParallaxMapping.azsli>
#include "../MaterialInputs/ParallaxInput.azsli"

COMMON_OPTIONS_PARALLAX(o_layer0_)
COMMON_OPTIONS_PARALLAX(o_layer1_)
COMMON_OPTIONS_PARALLAX(o_layer2_)

float EvaluateMultilayerPixelDepth(
    float blendMask,
    float depth,
    float2 uv[2],
    float3 worldPosition,
    float3 normal,
    // Tangent spaces passed here correspond to uv sets
    float3 tangents[2],
    float3 bitangent[2])
{
    s_blendMaskFromVertexStream = blendMask;

    float3x3 uvMatrix = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3();
    float3x3 uvMatrixInverse = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrixInverse : CreateIdentity3x3();

    float parallaxOverallOffset = MaterialSrg::m_displacementMax;
    float parallaxOverallFactor = MaterialSrg::m_displacementMax - MaterialSrg::m_displacementMin;
    GetParallaxInput(
        normal,
        tangents[MaterialSrg::m_parallaxUvIndex],
        bitangents[MaterialSrg::m_parallaxUvIndex],
        parallaxOverallFactor,
        parallaxOverallOffset, 
        ObjectSrg::GetWorldMatrix(),
        uvMatrix,
        uvMatrixInverse,
        uv[MaterialSrg::m_parallaxUvIndex],
        worldPosition,
        depth);

    return depth;
}