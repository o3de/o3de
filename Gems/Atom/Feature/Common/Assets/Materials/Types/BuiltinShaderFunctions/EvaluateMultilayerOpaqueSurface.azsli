/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// ---------- Material Parameters ----------

#include "../MaterialInputs/BaseColorInput.azsli"
#include "../MaterialInputs/RoughnessInput.azsli"
#include "../MaterialInputs/MetallicInput.azsli"
#include "../MaterialInputs/SpecularInput.azsli"
#include "../MaterialInputs/NormalInput.azsli"
#include "../MaterialInputs/ClearCoatInput.azsli"
#include "../MaterialInputs/OcclusionInput.azsli"
#include "../MaterialInputs/EmissiveInput.azsli"
#include "../MaterialInputs/ParallaxInput.azsli"

#define DEFINE_LAYER_OPTIONS(prefix) \
COMMON_OPTIONS_BASE_COLOR(prefix)    \
COMMON_OPTIONS_ROUGHNESS(prefix)     \
COMMON_OPTIONS_METALLIC(prefix)      \
COMMON_OPTIONS_SPECULAR_F0(prefix)   \
COMMON_OPTIONS_NORMAL(prefix)        \
COMMON_OPTIONS_CLEAR_COAT(prefix)    \
COMMON_OPTIONS_OCCLUSION(prefix)     \
COMMON_OPTIONS_EMISSIVE(prefix)      \
COMMON_OPTIONS_PARALLAX(prefix)

DEFINE_LAYER_OPTIONS(o_layer1_)
DEFINE_LAYER_OPTIONS(o_layer2_)
DEFINE_LAYER_OPTIONS(o_layer3_)

#include "../MaterialInputs/TransmissionInput.azsli"
#include "../StandardMultilayerPBR_Common.azsli"


//! Collects all the raw Standard material inputs for a single layer. See ProcessStandardMaterialInputs().
struct StandardMaterialInputs
{
    COMMON_SRG_INPUTS_BASE_COLOR()  
    COMMON_SRG_INPUTS_ROUGHNESS()   
    COMMON_SRG_INPUTS_METALLIC()    
    COMMON_SRG_INPUTS_SPECULAR_F0() 
    COMMON_SRG_INPUTS_NORMAL()      
    COMMON_SRG_INPUTS_CLEAR_COAT()  
    COMMON_SRG_INPUTS_OCCLUSION()   
    COMMON_SRG_INPUTS_EMISSIVE()  
    // Note parallax is omitted here because that requires special handling.

    bool m_normal_useTexture;
    bool m_baseColor_useTexture;
    bool m_metallic_useTexture;
    bool m_specularF0_useTexture;
    bool m_roughness_useTexture;
    bool m_emissiveEnabled;
    bool m_emissive_useTexture;
    bool m_diffuseOcclusion_useTexture;
    bool m_specularOcclusion_useTexture;
    bool m_clearCoatEnabled;
    bool m_clearCoat_factor_useTexture;
    bool m_clearCoat_roughness_useTexture;
    bool m_clearCoat_normal_useTexture;

    TextureBlendMode m_baseColorTextureBlendMode;

    float2 m_vertexUv[UvSetCount];
    float3x3 m_uvMatrix;
    float3 m_normal;
    float3 m_tangents[UvSetCount];
    float3 m_bitangents[UvSetCount];

    sampler m_sampler;

    bool m_isFrontFace;
};

//! Holds the final processed material inputs, after all flags have been checked, textures have been sampled, factors have been applied, etc.
//! This data is ready to be copied into a Surface and/or LightingData struct for the lighting system to consume.
class ProcessedMaterialInputs
{
    float3 m_normalTS;   //!< Normal in tangent-space
    float3 m_baseColor;
    float3 m_specularF0Factor;
    float m_metallic;
    float m_roughness;
    float3 m_emissiveLighting;
    float m_diffuseAmbientOcclusion;
    float m_specularOcclusion;
    ClearCoatSurfaceData m_clearCoat;
    
    void InitializeToZero()
    {
        m_normalTS = float3(0,0,0);
        m_baseColor = float3(0,0,0);
        m_specularF0Factor = float3(0,0,0);
        m_metallic = 0.0f;
        m_roughness = 0.0f;
        m_emissiveLighting = float3(0,0,0);
        m_diffuseAmbientOcclusion = 0;
        m_specularOcclusion = 0;
        m_clearCoat.InitializeToZero();
    }
};

//! Processes the set of Standard material inputs for a single layer.
//! The FILL_STANDARD_MATERIAL_INPUTS() macro below can be used to fill the StandardMaterialInputs struct.
ProcessedMaterialInputs ProcessStandardMaterialInputs(StandardMaterialInputs inputs)
{
    ProcessedMaterialInputs result;
    
    float2 transformedUv[UvSetCount];
    transformedUv[0] = mul(inputs.m_uvMatrix, float3(inputs.m_vertexUv[0], 1.0)).xy;
    transformedUv[1] = inputs.m_vertexUv[1];
    
    float3x3 normalUvMatrix = inputs.m_normalMapUvIndex == 0 ? inputs.m_uvMatrix : CreateIdentity3x3();
    result.m_normalTS = GetNormalInputTS(inputs.m_normalMap, inputs.m_sampler, transformedUv[inputs.m_normalMapUvIndex], inputs.m_flipNormalX, inputs.m_flipNormalY, normalUvMatrix, inputs.m_normal_useTexture, inputs.m_normalFactor);
    
    float3 sampledBaseColor = GetBaseColorInput(inputs.m_baseColorMap, inputs.m_sampler, transformedUv[inputs.m_baseColorMapUvIndex], inputs.m_baseColor.rgb, inputs.m_baseColor_useTexture);
    result.m_baseColor = BlendBaseColor(sampledBaseColor, inputs.m_baseColor.rgb, inputs.m_baseColorFactor, inputs.m_baseColorTextureBlendMode, inputs.m_baseColor_useTexture);
    result.m_specularF0Factor = GetSpecularInput(inputs.m_specularF0Map, inputs.m_sampler, transformedUv[inputs.m_specularF0MapUvIndex], inputs.m_specularF0Factor, inputs.m_specularF0_useTexture);
    result.m_metallic = GetMetallicInput(inputs.m_metallicMap, inputs.m_sampler, transformedUv[inputs.m_metallicMapUvIndex], inputs.m_metallicFactor, inputs.m_metallic_useTexture);
    result.m_roughness = GetRoughnessInput(inputs.m_roughnessMap, MaterialSrg::m_sampler, transformedUv[inputs.m_roughnessMapUvIndex], inputs.m_roughnessFactor, inputs.m_roughnessLowerBound, inputs.m_roughnessUpperBound, inputs.m_roughness_useTexture);

    result.m_emissiveLighting = GetEmissiveInput(inputs.m_emissiveMap, inputs.m_sampler, transformedUv[inputs.m_emissiveMapUvIndex], inputs.m_emissiveIntensity, inputs.m_emissiveColor.rgb, inputs.m_emissiveEnabled, inputs.m_emissive_useTexture);
    result.m_diffuseAmbientOcclusion = GetOcclusionInput(inputs.m_diffuseOcclusionMap, inputs.m_sampler, transformedUv[inputs.m_diffuseOcclusionMapUvIndex], inputs.m_diffuseOcclusionFactor, inputs.m_diffuseOcclusion_useTexture);
    result.m_specularOcclusion = GetOcclusionInput(inputs.m_specularOcclusionMap, MaterialSrg::m_sampler, transformedUv[inputs.m_specularOcclusionMapUvIndex], inputs.m_specularOcclusionFactor, inputs.m_specularOcclusion_useTexture);
    
    result.m_clearCoat.InitializeToZero();
    if(inputs.m_clearCoatEnabled)
    {
        float3x3 clearCoatUvMatrix = inputs.m_clearCoatNormalMapUvIndex == 0 ? inputs.m_uvMatrix : CreateIdentity3x3();

        GetClearCoatInputs(inputs.m_clearCoatInfluenceMap, transformedUv[inputs.m_clearCoatInfluenceMapUvIndex], inputs.m_clearCoatFactor, inputs.m_clearCoat_factor_useTexture,
                            inputs.m_clearCoatRoughnessMap, transformedUv[inputs.m_clearCoatRoughnessMapUvIndex], inputs.m_clearCoatRoughness, inputs.m_clearCoat_roughness_useTexture,
                            inputs.m_clearCoatNormalMap,    transformedUv[inputs.m_clearCoatNormalMapUvIndex], inputs.m_normal, inputs.m_clearCoat_normal_useTexture, inputs.m_clearCoatNormalStrength,
                            clearCoatUvMatrix, inputs.m_tangents[inputs.m_clearCoatNormalMapUvIndex], inputs.m_bitangents[inputs.m_clearCoatNormalMapUvIndex],
                            inputs.m_sampler, inputs.m_isFrontFace,
                            result.m_clearCoat.factor, result.m_clearCoat.roughness, result.m_clearCoat.normal);
    }

    return result;
}

//! Fills a StandardMaterialInputs struct with data from the MaterialSrg, shader options, and local vertex data.
#define FILL_STANDARD_MATERIAL_INPUTS(inputs, srgLayerPrefix, optionsLayerPrefix, blendWeight)                     \
    inputs.m_sampler = MaterialSrg::m_sampler;                                                                     \
    inputs.m_vertexUv = IN.m_uv;                                                                                   \
    inputs.m_uvMatrix = srgLayerPrefix##m_uvMatrix;                                                                \
    inputs.m_normal = IN.m_normal;                                                                                 \
    inputs.m_tangents = tangents;                                                                                  \
    inputs.m_bitangents = bitangents;                                                                              \
    inputs.m_isFrontFace = isFrontFace;                                                                            \
                                                                                                                   \
    inputs.m_normalMapUvIndex = srgLayerPrefix##m_normalMapUvIndex;                                                \
    inputs.m_normalMap = srgLayerPrefix##m_normalMap;                                                              \
    inputs.m_flipNormalX = srgLayerPrefix##m_flipNormalX;                                                          \
    inputs.m_flipNormalY = srgLayerPrefix##m_flipNormalY;                                                          \
    inputs.m_normal_useTexture = optionsLayerPrefix##o_normal_useTexture;                                          \
    inputs.m_normalFactor = srgLayerPrefix##m_normalFactor * blendWeight;                                          \
    inputs.m_baseColorMap = srgLayerPrefix##m_baseColorMap;                                                        \
    inputs.m_baseColorMapUvIndex = srgLayerPrefix##m_baseColorMapUvIndex;                                          \
    inputs.m_baseColor = srgLayerPrefix##m_baseColor;                                                              \
    inputs.m_baseColor_useTexture = optionsLayerPrefix##o_baseColor_useTexture;                                    \
    inputs.m_baseColorFactor = srgLayerPrefix##m_baseColorFactor;                                                  \
    inputs.m_baseColorTextureBlendMode = optionsLayerPrefix##o_baseColorTextureBlendMode;                          \
    inputs.m_metallicMap = srgLayerPrefix##m_metallicMap;                                                          \
    inputs.m_metallicMapUvIndex = srgLayerPrefix##m_metallicMapUvIndex;                                            \
    inputs.m_metallicFactor = srgLayerPrefix##m_metallicFactor;                                                    \
    inputs.m_metallic_useTexture = optionsLayerPrefix##o_metallic_useTexture;                                      \
    inputs.m_specularF0Map = srgLayerPrefix##m_specularF0Map;                                                      \
    inputs.m_specularF0MapUvIndex = srgLayerPrefix##m_specularF0MapUvIndex;                                        \
    inputs.m_specularF0Factor = srgLayerPrefix##m_specularF0Factor;                                                \
    inputs.m_specularF0_useTexture = optionsLayerPrefix##o_specularF0_useTexture;                                  \
    inputs.m_roughnessMap = srgLayerPrefix##m_roughnessMap;                                                        \
    inputs.m_roughnessMapUvIndex = srgLayerPrefix##m_roughnessMapUvIndex;                                          \
    inputs.m_roughnessFactor = srgLayerPrefix##m_roughnessFactor;                                                  \
    inputs.m_roughnessLowerBound = srgLayerPrefix##m_roughnessLowerBound;                                          \
    inputs.m_roughnessUpperBound = srgLayerPrefix##m_roughnessUpperBound;                                          \
    inputs.m_roughness_useTexture = optionsLayerPrefix##o_roughness_useTexture;                                    \
                                                                                                                   \
    inputs.m_emissiveMap = srgLayerPrefix##m_emissiveMap;                                                          \
    inputs.m_emissiveMapUvIndex = srgLayerPrefix##m_emissiveMapUvIndex;                                            \
    inputs.m_emissiveIntensity = srgLayerPrefix##m_emissiveIntensity;                                              \
    inputs.m_emissiveColor = srgLayerPrefix##m_emissiveColor;                                                      \
    inputs.m_emissiveEnabled = optionsLayerPrefix##o_emissiveEnabled;                                              \
    inputs.m_emissive_useTexture = optionsLayerPrefix##o_emissive_useTexture;                                      \
                                                                                                                   \
    inputs.m_diffuseOcclusionMap = srgLayerPrefix##m_diffuseOcclusionMap;                                          \
    inputs.m_diffuseOcclusionMapUvIndex = srgLayerPrefix##m_diffuseOcclusionMapUvIndex;                            \
    inputs.m_diffuseOcclusionFactor = srgLayerPrefix##m_diffuseOcclusionFactor;                                    \
    inputs.m_diffuseOcclusion_useTexture = optionsLayerPrefix##o_diffuseOcclusion_useTexture;                      \
                                                                                                                   \
    inputs.m_specularOcclusionMap = srgLayerPrefix##m_specularOcclusionMap;                                        \
    inputs.m_specularOcclusionMapUvIndex = srgLayerPrefix##m_specularOcclusionMapUvIndex;                          \
    inputs.m_specularOcclusionFactor = srgLayerPrefix##m_specularOcclusionFactor;                                  \
    inputs.m_specularOcclusion_useTexture = optionsLayerPrefix##o_specularOcclusion_useTexture;                    \
                                                                                                                   \
    inputs.m_clearCoatEnabled = o_clearCoat_feature_enabled && optionsLayerPrefix##o_clearCoat_enabled;            \
    inputs.m_clearCoatInfluenceMap = srgLayerPrefix##m_clearCoatInfluenceMap;                                      \
    inputs.m_clearCoatInfluenceMapUvIndex = srgLayerPrefix##m_clearCoatInfluenceMapUvIndex;                        \
    inputs.m_clearCoatFactor = srgLayerPrefix##m_clearCoatFactor;                                                  \
    inputs.m_clearCoat_factor_useTexture = optionsLayerPrefix##o_clearCoat_factor_useTexture;                      \
    inputs.m_clearCoatRoughnessMap = srgLayerPrefix##m_clearCoatRoughnessMap;                                      \
    inputs.m_clearCoatRoughnessMapUvIndex = srgLayerPrefix##m_clearCoatRoughnessMapUvIndex;                        \
    inputs.m_clearCoatRoughness = srgLayerPrefix##m_clearCoatRoughness;                                            \
    inputs.m_clearCoat_roughness_useTexture = optionsLayerPrefix##o_clearCoat_roughness_useTexture;                \
    inputs.m_clearCoatNormalMap = srgLayerPrefix##m_clearCoatNormalMap;                                            \
    inputs.m_clearCoatNormalMapUvIndex = srgLayerPrefix##m_clearCoatNormalMapUvIndex;                              \
    inputs.m_clearCoat_normal_useTexture = optionsLayerPrefix##o_clearCoat_normal_useTexture;                      \
    inputs.m_clearCoatNormalStrength = srgLayerPrefix##m_clearCoatNormalStrength;               


void EvaluateMultilayerOpaqueSurface(
    float3 blendMask,
    float3 normal,
    // UVs retrieved via EvaluateUVs shader function
    float2 uv[UvSetCount],
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    bool isFrontFace,

    // These out parameters are used in the various debug draw modes
    out float3 blendMaskValues,
    out float3 blendWeights,
    out float height,

    // NOTE: Surface::m_worldPosition expected to be populated already
    inout Surface OUT)
{
    // Used for debugging only
    float startDepth = -MaterialSrg::m_displacementMax;
    float stopDepth = -MaterialSrg::m_displacementMin;
    float depth = GetNormalizedDepth(startDepth, stopDepth, IN.m_uv[MaterialSrg::m_parallaxUvIndex], float2(0,0), float2(0,0));
    height = 1 - saturate(depth);

    LayerBlendSource blendSource = GetFinalLayerBlendSource();

    // ------- Calculate Layer Blend Mask Values -------
    
    // Now that any parallax has been calculated, we calculate the blend factors for any layers that are impacted by the parallax.
    blendWeights = GetBlendWeights(blendSource, IN.m_uv[MaterialSrg::m_blendMaskUvIndex], IN.m_blendMask);

    // ------- Layer 1 (base layer) -----------

    ProcessedMaterialInputs lightingInputLayer1;
    if(blendWeights.r > 0)
    {
        StandardMaterialInputs inputs;
        FILL_STANDARD_MATERIAL_INPUTS(inputs, MaterialSrg::m_layer1_, o_layer1_, blendWeights.r)
        lightingInputLayer1 = ProcessStandardMaterialInputs(inputs);
    }
    else
    {
        lightingInputLayer1.InitializeToZero();
        blendWeights.r = 0;
    }
    
    // ----------- Layer 2 -----------

    ProcessedMaterialInputs lightingInputLayer2; 
    if(o_layer2_enabled && blendWeights.g > 0)
    {
        StandardMaterialInputs inputs;
        FILL_STANDARD_MATERIAL_INPUTS(inputs, MaterialSrg::m_layer2_, o_layer2_, blendWeights.g)
        lightingInputLayer2 = ProcessStandardMaterialInputs(inputs);
    }
    else
    {
        lightingInputLayer2.InitializeToZero();
        blendWeights.g = 0;
    }
    
    // ----------- Layer 3 -----------

    ProcessedMaterialInputs lightingInputLayer3;
    if(o_layer3_enabled && blendWeights.b > 0)
    {
        StandardMaterialInputs inputs;
        FILL_STANDARD_MATERIAL_INPUTS(inputs, MaterialSrg::m_layer3_, o_layer3_, blendWeights.b)
        lightingInputLayer3 = ProcessStandardMaterialInputs(inputs);
    }
    else
    {
        lightingInputLayer3.InitializeToZero();
        blendWeights.b = 0;
    }

    // ------- Combine all layers ---------

    // ------- Combine Normals ---------

    float3 normalTS = float3(0,0,1);
    if(blendWeights.r > 0)
    {
        normalTS = lightingInputLayer1.m_normalTS;
    }
    if(o_layer2_enabled && blendWeights.g > 0)
    {
        normalTS = ReorientTangentSpaceNormal(normalTS, lightingInputLayer2.m_normalTS);
    }
    if(o_layer3_enabled && blendWeights.b > 0)
    {
        normalTS = ReorientTangentSpaceNormal(normalTS, lightingInputLayer3.m_normalTS);
    }
    // [GFX TODO][ATOM-14591]: This will only work if the normal maps all use the same UV stream. We would need to add support for having them in different UV streams.
    surface.vertexNormal = vertexNormal;
    surface.normal = normalize(TangentSpaceToWorld(normalTS, IN.m_normal, tangents[MaterialSrg::m_parallaxUvIndex], bitangents[MaterialSrg::m_parallaxUvIndex]));
        
    // ------- Combine Albedo, roughness, specular, roughness ---------

    float3 baseColor = BlendLayers(lightingInputLayer1.m_baseColor, lightingInputLayer2.m_baseColor, lightingInputLayer3.m_baseColor, blendWeights);
    float3 specularF0Factor = BlendLayers(lightingInputLayer1.m_specularF0Factor, lightingInputLayer2.m_specularF0Factor, lightingInputLayer3.m_specularF0Factor, blendWeights);
    float3 metallic = BlendLayers(lightingInputLayer1.m_metallic, lightingInputLayer2.m_metallic, lightingInputLayer3.m_metallic, blendWeights);
    
    if(o_parallax_highlightClipping && displacementIsClipped)
    {
        ApplyParallaxClippingHighlight(baseColor);
    }

    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    surface.roughnessLinear = BlendLayers(lightingInputLayer1.m_roughness, lightingInputLayer2.m_roughness, lightingInputLayer3.m_roughness, blendWeights);
    surface.CalculateRoughnessA();

    surface.emissiveLighting = BlendLayers(lightingInputLayer1.m_emissiveLighting, lightingInputLayer2.m_emissiveLighting, lightingInputLayer3.m_emissiveLighting, blendWeights);
    surface.specularOcclusion = BlendLayers(lightingInputLayer1.m_specularOcclusion, lightingInputLayer2.m_specularOcclusion, lightingInputLayer3.m_specularOcclusion, blendWeights);
    surface.diffuseAmbientOcclusion = BlendLayers(lightingInputLayer1.m_diffuseAmbientOcclusion, lightingInputLayer2.m_diffuseAmbientOcclusion, lightingInputLayer3.m_diffuseAmbientOcclusion, blendWeights);

    // ------- Combine Clearcoat -------
    
    if(o_clearCoat_feature_enabled)
    {
        surface.clearCoat.factor = BlendLayers(lightingInputLayer1.m_clearCoat.factor, lightingInputLayer2.m_clearCoat.factor, lightingInputLayer3.m_clearCoat.factor, blendWeights);
        surface.clearCoat.roughness = BlendLayers(lightingInputLayer1.m_clearCoat.roughness, lightingInputLayer2.m_clearCoat.roughness, lightingInputLayer3.m_clearCoat.roughness, blendWeights);

        // [GFX TODO][ATOM-14592] This is not the right way to blend the normals. We need to use ReorientTangentSpaceNormal(), and that requires GetClearCoatInputs() to return the normal in TS instead of WS.
        surface.clearCoat.normal = BlendLayers(lightingInputLayer1.m_clearCoat.normal, lightingInputLayer2.m_clearCoat.normal, lightingInputLayer3.m_clearCoat.normal, blendWeights);
        surface.clearCoat.normal = normalize(surface.clearCoat.normal);

        // manipulate base layer f0 if clear coat is enabled
        // modify base layer's normal incidence reflectance
        // for the derivation of the following equation please refer to:
        // https://google.github.io/filament/Filament.md.html#materialsystem/clearcoatmodel/baselayermodification
        float3 f0 = (1.0 - 5.0 * sqrt(surface.specularF0)) / (5.0 - sqrt(surface.specularF0));
        surface.specularF0 = lerp(surface.specularF0, f0 * f0, surface.clearCoat.factor);
    }
}