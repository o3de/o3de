/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

void EvaluateUVs(in float2 IN[UvSetCount + DetailedUvSetCount], out float2 OUT[UvSetCount + DetailedUvSetCount])
{
    // By design, only UV0 is allowed to apply UV transforms
    OUT[0] = mul(MaterialSrg::m_uvMatrix, float3(IN[0], 1.0)).xy;
    OUT[1] = IN[1];
#if DetailedUvSetCount == 2
    // Our standard practice is to only transform the first UV as that's the one we expect to be used for
    // tiling. But for detail maps you could actually use either UV stream for tiling. There is no concern about applying
    // the same transform to both UV sets because the detail map feature forces the same UV set to be used for all detail maps.
    // Note we might be able to combine these into a single UV similar to what Skin.materialtype does,
    // but we would need to address how it works with the parallax code below that indexes into the m_detailUV array.
    OUT[2] = mul(MaterialSrg::m_detailUvMatrix, float3(IN[2], 1.0)).xy;
    OUT[3] = mul(MaterialSrg::m_detailUvMatrix, float3(IN[3], 1.0)).xy;
#endif
}