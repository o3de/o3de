/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/RPI/Math.azsli>

#include "MaterialInputs/BaseColorInput.azsli"
#include "MaterialInputs/RoughnessInput.azsli"
#include "MaterialInputs/MetallicInput.azsli"
#include "MaterialInputs/SpecularInput.azsli"
#include "MaterialInputs/NormalInput.azsli"
#include "MaterialInputs/ClearCoatInput.azsli"
#include "MaterialInputs/OcclusionInput.azsli"
#include "MaterialInputs/EmissiveInput.azsli"
#include "MaterialInputs/ParallaxInput.azsli"
#include "MaterialInputs/UvSetCount.azsli"

// ------ ShaderResourceGroup ----------------------------------------

#define DEFINE_LAYER_SRG_INPUTS(prefix) \
COMMON_SRG_INPUTS_BASE_COLOR(prefix)    \
COMMON_SRG_INPUTS_ROUGHNESS(prefix)     \
COMMON_SRG_INPUTS_METALLIC(prefix)      \
COMMON_SRG_INPUTS_SPECULAR_F0(prefix)   \
COMMON_SRG_INPUTS_NORMAL(prefix)        \
COMMON_SRG_INPUTS_CLEAR_COAT(prefix)    \
COMMON_SRG_INPUTS_OCCLUSION(prefix)     \
COMMON_SRG_INPUTS_EMISSIVE(prefix)      \
COMMON_SRG_INPUTS_PARALLAX(prefix)

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    Texture2D m_blendMaskTexture;
    uint m_blendMaskUvIndex;
    
    // When parallax mapping is used, these limit the heightmap intersection search range to the narrowest band possible, to give the best quality result.
    // These are also support other calculations related to displacement-based blending, even when parallax is not used.
    float m_displacementMin; // The lowest displacement value possible from all layers combined (negative values are below the surface)
    float m_displacementMax; // The highest displacement value possible from all layers combined (negative values are below the surface)
    
    // When displacement-based blending is used, this is the height range where the surface properties of different layers will be blended together.
    // We use an absolute value rather than a relative factor because disconnecting this property from the influence of other properties makes per-layer 
    // displacement adjustments feel more natural if they don't impact the blend distance.
    float m_displacementBlendDistance;

    // Auto-generate material SRG fields for common inputs for each layer
    DEFINE_LAYER_SRG_INPUTS(m_layer1_)
    DEFINE_LAYER_SRG_INPUTS(m_layer2_)
    DEFINE_LAYER_SRG_INPUTS(m_layer3_)
    
    float3x3 m_layer1_m_uvMatrix;
    float4 m_pad1; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.

    float3x3 m_layer2_m_uvMatrix;
    float4 m_pad2; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.

    float3x3 m_layer3_m_uvMatrix;
    float4 m_pad3; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    
    uint m_parallaxUvIndex;
    float m_parallax_pdo_shadowFactor;

    float3x3 m_uvMatrix;
    float4 m_pad4; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    float3x3 m_uvMatrixInverse;
    float4 m_pad5; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    
    Sampler m_sampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };

    Texture2D m_brdfMap;

    Sampler m_samplerBrdf
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };

}

// ------ Shader Options ----------------------------------------

option bool o_layer2_enabled;
option bool o_layer3_enabled;

enum class DebugDrawMode { None, BlendMask, Displacement, FinalBlendWeights };
option DebugDrawMode o_debugDrawMode;

// If you modify this enum, you must update the BlendSourceUsesDisplacement function in StandardMultilayerPBR_Displacement.lua
enum class LayerBlendSource { BlendMaskTexture, BlendMaskVertexColors, Displacement, Displacement_With_BlendMaskTexture, Displacement_With_BlendMaskVertexColors, Fallback };
option LayerBlendSource o_layerBlendSource;

// Indicates whether the vertex input struct's "m_optional_blendMask" is bound. If false, it is not safe to read from m_optional_blendMask.
// This option gets set automatically by the system at runtime; there is a soft naming convention that associates it with m_optional_blendMask.
// (search "m_optional_" in ShaderVariantAssetBuilder for details on the naming convention).
// [GFX TODO][ATOM-14475]: Come up with a more elegant way to associate the isBound flag with the input stream.
option bool o_blendMask_isBound;

// ------ Blend Utilities ----------------------------------------
// This is mainly used to pass extra data to the GetDepth callback function during the parallax depth search.
// But since we have it, we use it in some other functions as well rather than passing it around.
static float3 s_blendMaskFromVertexStream;

// TODO: Consider storing the result of GetFinalLayerBlendSource() in a static similar to s_blendMaskFromVertexStream. That might give better performance when variants aren't used.

//! Returns the LayerBlendSource that will actually be used when rendering (not necessarily the same LayerBlendSource specified by the user)
LayerBlendSource GetFinalLayerBlendSource()
{    
    if(o_layerBlendSource == LayerBlendSource::BlendMaskTexture)
    {
        return o_layerBlendSource;
    }
    else if(o_layerBlendSource == LayerBlendSource::BlendMaskVertexColors)
    {
        if(o_blendMask_isBound)
        {
            return o_layerBlendSource;
        }
        else
        {
            return LayerBlendSource::Fallback;
        }
    }
    else if(o_layerBlendSource == LayerBlendSource::Displacement)
    {
        return o_layerBlendSource;
    }
    else if(o_layerBlendSource == LayerBlendSource::Displacement_With_BlendMaskTexture)
    {
        return o_layerBlendSource;
    }
    else if(o_layerBlendSource == LayerBlendSource::Displacement_With_BlendMaskVertexColors)
    {
        if(o_blendMask_isBound)
        {
            return o_layerBlendSource;
        }
        else
        {
            return LayerBlendSource::Displacement;
        }
    }
    else
    {
        return LayerBlendSource::Fallback;
    }
}

//! Return the applicable blend mask values from the blend mask texture or vertex colors, and filters out any that don't apply.
//!     layer1 is an implicit base layer
//!     layer2 mask is in the r channel
//!     layer3 mask is in the g channel
//!     b is reserved for perhaps a dedicated puddle layer
//! @param blendSource indicates where to get the blend mask from
//! @param blendMaskUv for sampling a blend mask texture, if that's the blend source
//! @param blendMaskVertexColors the vertex color values to use for the blend mask, if that's the blend source
//! @return the blend mask values, or 0 if there is no blend mask
float3 GetApplicableBlendMaskValues(LayerBlendSource blendSource, float2 blendMaskUv, float3 blendMaskVertexColors)
{
    float3 blendSourceValues = float3(0,0,0);

    if(o_layer2_enabled || o_layer3_enabled)
    {
        switch(blendSource)
        {
            case LayerBlendSource::Displacement:
                // In this case the blend mask has no effect, returning (1,1,1) disables any impact of the mask.
                blendSourceValues = float3(1,1,1);
                break;
            case LayerBlendSource::BlendMaskTexture:
            case LayerBlendSource::Displacement_With_BlendMaskTexture:
                blendSourceValues = MaterialSrg::m_blendMaskTexture.Sample(MaterialSrg::m_sampler, blendMaskUv).rgb;
                break;
            case LayerBlendSource::BlendMaskVertexColors:
            case LayerBlendSource::Displacement_With_BlendMaskVertexColors:
                blendSourceValues = blendMaskVertexColors;
                break;
        }

        if(!o_layer2_enabled)
        {
            blendSourceValues.r = 0.0;
        }

        if(!o_layer3_enabled)
        {
            blendSourceValues.g = 0.0;
        }
    }

    return blendSourceValues;
}

//! When dealing with masks for displacement-based blending, we sometimes need to push the value below the min displacement to make it disappear.
float GetSubMinDisplacement()
{
    return MaterialSrg::m_displacementMin - 0.001;
    //return MaterialSrg::m_displacementMin - max(MaterialSrg::m_displacementBlendDistance, 0.001);
}

float3 ApplyBlendMaskToDepthValues(float3 blendMaskValues, float3 layerDepthValues, float zeroMaskDisplacement);

//! Return the final blend weights to be used for rendering, based on the available data and configuration.
//! @param blendSource - indicates where to get the blend mask from
//! @param blendMaskValues - blend mask values as returned by GetApplicableBlendMaskValues()
//! @param layerDepthValues - the depth values for each layer, used if the blend source includes displacement. See GetLayerDepthValues().
//!                           Note the blendMaskValues will not be applied here, those should have already been applied to layerDepthValues.
//! @param layerDepthBlendDistance - controls how smoothly to blend layers 2 and 3 with the base layer, when the blend source includes displacement.
//!                                  When layers are close together their weights will be blended together, otherwise the highest layer will have the full weight.
//! @return The blend weights for each layer.
//!         Even though layer1 not explicitly specified in the blend mask data, it is explicitly included with the returned values.
//!         layer1 = r
//!         layer2 = g
//!         layer3 = b
float3 GetBlendWeights(LayerBlendSource blendSource, float3 blendMaskValues, float3 layerDepthValues, float layerDepthBlendDistance)
{
    float3 blendWeights;
    
    if(o_layer2_enabled || o_layer3_enabled)
    {
        if(LayerBlendSource::Displacement == blendSource || 
           LayerBlendSource::Displacement_With_BlendMaskTexture == blendSource || 
           LayerBlendSource::Displacement_With_BlendMaskVertexColors == blendSource)
        {
            // Calculate the blend weights based on displacement values...

            // The inputs are depth values, but we change them to height values to make the code a bit more intuitive.
            float3 layerHeightValues = -layerDepthValues;

            float highestPoint = layerHeightValues.x;
            if(o_layer2_enabled)
            {
                highestPoint = max(highestPoint, layerHeightValues.y);
            }
            if(o_layer3_enabled)
            {
                highestPoint = max(highestPoint, layerHeightValues.z);
            }
            
            if(layerDepthBlendDistance > 0.0001)
            {
                float lowestVisiblePoint = highestPoint - layerDepthBlendDistance;
                blendWeights = smoothstep(lowestVisiblePoint, highestPoint, layerHeightValues);
            
                if(!o_layer2_enabled)
                {
                    blendWeights.y = 0.0;
                }
            
                if(!o_layer3_enabled)
                {
                    blendWeights.z = 0.0;
                }
            }
            else
            {
                blendWeights = float3(layerHeightValues.x >= highestPoint ? 1.0 : 0.0,
                                        layerHeightValues.y >= highestPoint && o_layer2_enabled ? 1.0 : 0.0,
                                        layerHeightValues.z >= highestPoint && o_layer3_enabled ? 1.0 : 0.0);
            }
            
            // Calculate blend weights such that multiplying and adding them with layer data is equivalent
            // to lerping between each layer.
            //     final = lerp(final, layer1, blendWeights.r)
            //     final = lerp(final, layer2, blendWeights.g)
            //     final = lerp(final, layer3, blendWeights.b)

            blendWeights.y = (1 - blendWeights.z) * blendWeights.y;
            blendWeights.x = 1 - blendWeights.y - blendWeights.z;
        }
        else
        {
            // Calculate blend weights such that multiplying and adding them with layer data is equivalent
            // to lerping between each layer.
            //     final = lerp(final, layer1, blendWeights.r)
            //     final = lerp(final, layer2, blendWeights.g)
            //     final = lerp(final, layer3, blendWeights.b)

            blendWeights.b = blendMaskValues.g;
            blendWeights.g = (1.0 - blendMaskValues.g) * blendMaskValues.r;
            blendWeights.r = (1.0 - blendMaskValues.g) * (1.0 - blendMaskValues.r);
        }

    }
    else
    {
        blendWeights = float3(1,0,0);
    }

    return blendWeights;
}

float3 GetLayerDepthValues(float2 uv, float2 uv_ddx, float2 uv_ddy);

//! Return the final blend weights to be used for rendering, based on the available data and configuration.
//! Note this will sample the displacement maps in the case of LayerBlendSource::Displacement. If you have already
//! the layer depth values, use the GetBlendWeights() overload that takes layerDepthValues instead.
float3 GetBlendWeights(LayerBlendSource blendSource, float2 uv, float3 blendMaskVertexColors)
{
    float3 layerDepthValues = float3(0,0,0);
    
    float3 blendMaskValues = GetApplicableBlendMaskValues(blendSource, uv, blendMaskVertexColors);

    if(blendSource == LayerBlendSource::Displacement ||
       blendSource == LayerBlendSource::Displacement_With_BlendMaskTexture ||
       blendSource == LayerBlendSource::Displacement_With_BlendMaskVertexColors)
    {
        bool useBlendMask = 
           LayerBlendSource::Displacement_With_BlendMaskTexture == blendSource || 
           LayerBlendSource::Displacement_With_BlendMaskVertexColors == blendSource;
           
        layerDepthValues = GetLayerDepthValues(uv, ddx_fine(uv), ddy_fine(uv));

        if(useBlendMask)
        {
            // Unlike the GetDepth() callback used for parallax, we don't just shift the values toward GetSubMinDisplacement(),
            // we shift extra to ensure that completely masked-out layers are not blended onto upper layers.
            layerDepthValues = ApplyBlendMaskToDepthValues(blendMaskValues, layerDepthValues, GetSubMinDisplacement() - MaterialSrg::m_displacementBlendDistance);
        }
    }
    
    return GetBlendWeights(blendSource, blendMaskValues, layerDepthValues, MaterialSrg::m_displacementBlendDistance);
}

float BlendLayers(float layer1, float layer2, float layer3, float3 blendWeights)
{
    return dot(float3(layer1, layer2, layer3), blendWeights);
}
float2 BlendLayers(float2 layer1, float2 layer2, float2 layer3, float3 blendWeights)
{
    return layer1 * blendWeights.r + layer2 * blendWeights.g + layer3 * blendWeights.b;
}
float3 BlendLayers(float3 layer1, float3 layer2, float3 layer3, float3 blendWeights)
{
    return layer1 * blendWeights.r + layer2 * blendWeights.g + layer3 * blendWeights.b;
}

// ------ Parallax Utilities ----------------------------------------

bool ShouldHandleParallax()
{
    // Parallax mapping's non uniform uv transformations break screen space subsurface scattering, disable it when subsurface scattering is enabled.
    // Also, all the debug draw modes avoid parallax (they early-return before parallax code actually) so you can see exactly where the various maps appear on the surface UV space.
    return !o_enableSubsurfaceScattering && o_parallax_feature_enabled && o_debugDrawMode == DebugDrawMode::None;
}

bool ShouldHandleParallaxInDepthShaders()
{
    // The depth pass shaders need to calculate parallax when the result could affect the depth buffer (or when
    // parallax could affect texel clipping but we don't have alpha/clipping support in multilayer PBR).
    return ShouldHandleParallax() && o_parallax_enablePixelDepthOffset;
}

//! Returns the depth values for each layer.
float3 GetLayerDepthValues(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    float3 layerDepthValues = float3(0,0,0);
    
    // layer1
    {
        if(o_layer1_o_useHeightmap)
        {
            float2 layerUv = uv;
            if(MaterialSrg::m_parallaxUvIndex == 0)
            {
                layerUv = mul(MaterialSrg::m_layer1_m_uvMatrix, float3(uv, 1.0)).xy;
            }

            layerDepthValues.r = SampleDepthFromHeightmap(MaterialSrg::m_layer1_m_heightmap, MaterialSrg::m_sampler, layerUv, uv_ddx, uv_ddy).m_depth;
            layerDepthValues.r *= MaterialSrg::m_layer1_m_heightmapScale;
        }

        layerDepthValues.r -= MaterialSrg::m_layer1_m_heightmapOffset;
    }
    
    if(o_layer2_enabled)
    {
        if(o_layer2_o_useHeightmap)
        {
            float2 layerUv = uv;
            if(MaterialSrg::m_parallaxUvIndex == 0)
            {
                layerUv = mul(MaterialSrg::m_layer2_m_uvMatrix, float3(uv, 1.0)).xy;
            }

            layerDepthValues.g = SampleDepthFromHeightmap(MaterialSrg::m_layer2_m_heightmap, MaterialSrg::m_sampler, layerUv, uv_ddx, uv_ddy).m_depth;
            layerDepthValues.g *= MaterialSrg::m_layer2_m_heightmapScale;
        }

        layerDepthValues.g -= MaterialSrg::m_layer2_m_heightmapOffset;

    }
    
    if(o_layer3_enabled)
    {
        if(o_layer3_o_useHeightmap)
        {
            float2 layerUv = uv;
            if(MaterialSrg::m_parallaxUvIndex == 0)
            {
                layerUv = mul(MaterialSrg::m_layer3_m_uvMatrix, float3(uv, 1.0)).xy;
            }

            layerDepthValues.b = SampleDepthFromHeightmap(MaterialSrg::m_layer3_m_heightmap, MaterialSrg::m_sampler, layerUv, uv_ddx, uv_ddy).m_depth;
            layerDepthValues.b *= MaterialSrg::m_layer3_m_heightmapScale;
        }

        layerDepthValues.b -= MaterialSrg::m_layer3_m_heightmapOffset;

    }
    
    return layerDepthValues;
}


//! Uses a layer blend mask to further displace each layer's surface so that it disappears beyond the other surfaces.
//! Note the blend mask does not apply to the first layer, it is the implicit base layer. Layers 2 and 3 are masked by the r and g channels of the mask.
//! @param blendMaskValues layer mask values as returned by GetApplicableBlendMaskValues()
//! @param layerDepthValues layer depth values as returned by GetLayerDepthValues()
//! @param zeroMaskDisplacement the target displacement value that corresponds to a mask value of 0
//! @return new layer depth values that have been adjusted according to the layerMaskValues
float3 ApplyBlendMaskToDepthValues(float3 blendMaskValues, float3 layerDepthValues, float zeroMaskDisplacement)
{
    if(o_layer2_enabled || o_layer3_enabled)
    {        
        // We add to the depth value rather than lerp toward m_displacementMin to avoid squashing the topology, but instead lower it out of sight.

        if(o_layer2_enabled)
        {
            float dropoffRange = MaterialSrg::m_layer2_m_heightmapOffset - zeroMaskDisplacement;
            layerDepthValues.g += dropoffRange * (1-blendMaskValues.r);
        }
        
        if(o_layer3_enabled)
        {
            float dropoffRange = MaterialSrg::m_layer3_m_heightmapOffset - zeroMaskDisplacement;
            layerDepthValues.b += dropoffRange * (1-blendMaskValues.g);
        }
    }

    return layerDepthValues;
}

//! Callback function for ParallaxMapping.azsli
DepthResult GetDepth(float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    LayerBlendSource blendSource = GetFinalLayerBlendSource();

    float3 layerDepthValues = GetLayerDepthValues(uv, uv_ddx, uv_ddy);
    
    // Note, when the blend source uses the blend mask from the vertex colors, parallax will not be able to blend correctly between layers. It will end up using the same blend mask values
    // for every UV position when searching for the intersection. This leads to smearing artifacts at the transition point, but these won't be as noticeable if
    // you have a small depth factor relative to the size of the blend transition.
    float3 blendMaskValues = GetApplicableBlendMaskValues(blendSource, uv, s_blendMaskFromVertexStream);
        
    bool useBlendMask = 
       LayerBlendSource::Displacement_With_BlendMaskTexture == blendSource || 
       LayerBlendSource::Displacement_With_BlendMaskVertexColors == blendSource;

    if(useBlendMask)
    {
        // Regarding GetSubMinDisplacement(), when a mask of 0 pushes the surface all the way to the bottom, we want that 
        // to go a little below the min so it will disappear if there is something else right at the min.
        
        layerDepthValues = ApplyBlendMaskToDepthValues(blendMaskValues, layerDepthValues, GetSubMinDisplacement());
    }
    
    // When blending the depth together, we don't use MaterialSrg::m_displacementBlendDistance. The intention is that m_displacementBlendDistance
    // is for transitioning the appearance of the surface itself, but we still want a distinct change in the heightmap. If someday we want to 
    // support smoothly blending the depth as well, there is a bit more work to do to get it to play nice with the blend mask code in GetLayerDepthValues().
    float layerDepthBlendDistance = 0.0f;
    float3 blendWeightValues = GetBlendWeights(blendSource, blendMaskValues, layerDepthValues, layerDepthBlendDistance);
    
    float depth = BlendLayers(layerDepthValues.r, layerDepthValues.g, layerDepthValues.b, blendWeightValues);

    return DepthResultAbsolute(depth);
}
