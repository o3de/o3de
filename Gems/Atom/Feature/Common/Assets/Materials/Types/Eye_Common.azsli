/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>
#include <viewsrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>

#include "MaterialInputs/BaseColorInput.azsli"
#include "MaterialInputs/NormalInput.azsli"
#include "MaterialInputs/RoughnessInput.azsli"
#include "MaterialInputs/SpecularInput.azsli"
#include "MaterialInputs/UvSetCount.azsli"
#include "MaterialInputs/SubsurfaceInput.azsli"
#include "MaterialInputs/TransmissionInput.azsli"

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // Auto-generate material SRG fields for common inputs
    COMMON_SRG_INPUTS_BASE_COLOR(m_iris_)
    COMMON_SRG_INPUTS_NORMAL(m_iris_)
    COMMON_SRG_INPUTS_ROUGHNESS(m_iris_)
    COMMON_SRG_INPUTS_BASE_COLOR(m_sclera_)
    COMMON_SRG_INPUTS_NORMAL(m_sclera_)
    COMMON_SRG_INPUTS_ROUGHNESS(m_sclera_)
    COMMON_SRG_INPUTS_SPECULAR_F0()

    Sampler m_sampler
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };

    Texture2D m_brdfMap;

    Sampler m_samplerBrdf
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };

    // Parameters for subsurface scattering
    float m_subsurfaceScatteringFactor;
    float m_subsurfaceScatteringQuality;
    float3 m_scatterDistance;
    Texture2D m_subsurfaceScatteringInfluenceMap;
    uint m_subsurfaceScatteringInfluenceMapUvIndex;

    // Parameters for transmission
    
    // Elements of m_transmissionParams:
    // Thick object mode: (attenuation coefficient, power, distortion, scale)
    // Thin  object mode:  (shrinkFactor, transmissionNdLBias, distanceAttenuation, scale)
    float4 m_transmissionParams;
    
    // (float3 TintColor, thickness)
    float4 m_transmissionTintThickness;
    Texture2D m_transmissionThicknessMap;
    uint m_transmissionThicknessMapUvIndex;

    // Eye parameters
    float m_irisDepth;
    float m_eyeIrisRadius;
    float m_limbusSize;
    float m_innerEyeIOR;
}
