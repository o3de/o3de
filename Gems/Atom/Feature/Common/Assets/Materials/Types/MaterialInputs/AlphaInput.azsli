/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/PBR/AlphaUtils.azsli>

enum class OpacitySource {Packed, Split, None};
option OpacitySource o_opacity_source;

float SampleAlpha(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, OpacitySource opacitySource)
{
    float alpha = 1.0;
    switch(opacitySource)
    {
        case OpacitySource::Packed:
        {
            alpha = baseColorMap.Sample(mapSampler, baseColorUv).a;
            break;
        }
        case OpacitySource::Split:  
        {
            alpha = opacityMap.Sample(mapSampler, opacityUv).r;
            break;
        }
        case OpacitySource::None:
        break;
    }
    return alpha;
}

float GetAlphaInputAndClip(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, float opacityFactor, OpacitySource opacitySource)
{
    float alpha = SampleAlpha(baseColorMap, opacityMap, baseColorUv, opacityUv, mapSampler, opacitySource);
    CheckClipping(alpha, opacityFactor);
    return (alpha * opacityFactor);
}
