/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#include <scenesrg.srgi>
#include "StandardPBR_Common.azsli"
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/ParallaxMapping.azsli>
#include <Atom/Features/MatrixUtility.azsli>

#include "MaterialInputs/AlphaInput.azsli"
#include "MaterialInputs/ParallaxInput.azsli"

struct VertexInput
{
    float3 m_position : POSITION;
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
};

struct VertexOutput
{
    // "centroid" is needed for SV_Depth to compile
    linear centroid float4 m_position : SV_Position;
    float2 m_uv[UvSetCount] : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
};

VertexOutput MainVS(VertexInput IN)
{
    const float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    VertexOutput OUT;
    
    const float3 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0)).xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));
    // By design, only UV0 is allowed to apply transforms.
    OUT.m_uv[0] = mul(MaterialSrg::m_uvMatrix, float3(IN.m_uv0, 1.0)).xy;
    OUT.m_uv[1] = IN.m_uv1;

    if(o_parallax_feature_enabled && o_parallax_enablePixelDepthOffset)
    {
        OUT.m_worldPosition = worldPosition.xyz;

        float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();
        ConstructTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, objectToWorld, objectToWorldIT, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    }

    return OUT;
}

struct PSDepthOutput
{
    float m_depth : SV_Depth;
};

PSDepthOutput MainPS(VertexOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    PSDepthOutput OUT;

    // Alpha
    float2 baseColorUV = IN.m_uv[MaterialSrg::m_baseColorMapUvIndex];
    float2 opacityUV = IN.m_uv[MaterialSrg::m_opacityMapUvIndex];
    float alpha = SampleAlpha(MaterialSrg::m_baseColorMap, MaterialSrg::m_opacityMap, baseColorUV, opacityUV, MaterialSrg::m_sampler, o_opacity_source);

    CheckClipping(alpha, MaterialSrg::m_opacityFactor);

    OUT.m_depth = IN.m_position.z;

    float3 dirToCamera;
    if(ViewSrg::m_projectionMatrix[0].w)
    {
        // orthographic projection (directional light)
        // No view position, use light direction
        dirToCamera = ViewSrg::m_viewMatrix[2].xyz;
    }
    else
    {
        dirToCamera = ViewSrg::m_worldPosition.xyz - IN.m_worldPosition;
    }

    if(o_parallax_feature_enabled && o_parallax_enablePixelDepthOffset)
    {
        static const float ShadowMapDepthBias = 0.000001;
    
        // We support two UV streams, but only a single stream of tangent/bitangent. So for UV[1+] we generated the tangent/bitangent in screen-space.
        float3 tangents[UvSetCount] = { IN.m_tangent.xyz, float3(0, 0, 0) };
        float3 bitangents[UvSetCount] = { IN.m_bitangent.xyz, float3(0, 0, 0) };
        PrepareGeneratedTangent(IN.m_normal, IN.m_worldPosition, isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents, 1);

        float3 tangent = tangents[MaterialSrg::m_parallaxUvIndex];
        float3 bitangent = bitangents[MaterialSrg::m_parallaxUvIndex];

        float3x3 uvMatrix = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3();
        float3x3 uvMatrixInverse = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrixInverse : CreateIdentity3x3();

        float3 tangentOffset = GetParallaxOffset( MaterialSrg::m_depthFactor,
                                                  IN.m_uv[MaterialSrg::m_parallaxUvIndex],
                                                  dirToCamera,
                                                  tangent,
                                                  bitangent,
                                                  IN.m_normal,
                                                  uvMatrix);

        PixelDepthOffset pdo = CalcPixelDepthOffset(MaterialSrg::m_depthFactor,
                                                    tangentOffset,
                                                    IN.m_worldPosition,
                                                    tangent,
                                                    bitangent,
                                                    IN.m_normal,
                                                    uvMatrixInverse,
                                                    ObjectSrg::GetWorldMatrix(),
                                                    ViewSrg::m_viewProjectionMatrix);

        OUT.m_depth = pdo.m_depth + ShadowMapDepthBias;
    }
    return OUT;
}
