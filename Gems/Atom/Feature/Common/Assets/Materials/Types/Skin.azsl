/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include "Skin_Common.azsli"

// SRGs
#include <Atom/Features/Skin/SkinObjectSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>

// Pass Output
#include <Atom/Features/PBR/ForwardSubsurfacePassOutput.azsli>

// Utility
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli> // TODO: Remove this after OpacityMode is removed from LightingModel

// Custom Surface & Lighting
#include <Atom/Features/PBR/Lighting/SkinLighting.azsli>

// Decals
#include <Atom/Features/PBR/Decals.azsli>

// ---------- Material Parameters ----------

COMMON_OPTIONS_BASE_COLOR()
COMMON_OPTIONS_ROUGHNESS()
COMMON_OPTIONS_SPECULAR_F0()
COMMON_OPTIONS_NORMAL()
COMMON_OPTIONS_OCCLUSION()
COMMON_OPTIONS_DETAIL_MAPS()

option bool o_wrinkleLayers_enabled;
[[range(0,4)]]
option uint o_wrinkleLayers_count = 0;
option bool o_wrinkleLayers_baseColor_enabled;
option bool o_wrinkleLayers_baseColor_useTexture1;
option bool o_wrinkleLayers_baseColor_useTexture2;
option bool o_wrinkleLayers_baseColor_useTexture3;
option bool o_wrinkleLayers_baseColor_useTexture4;

option bool o_wrinkleLayers_normal_enabled;
option bool o_wrinkleLayers_normal_useTexture1;
option bool o_wrinkleLayers_normal_useTexture2;
option bool o_wrinkleLayers_normal_useTexture3;
option bool o_wrinkleLayers_normal_useTexture4;

//! Enables a debug mode that colors the different blend weights coming from the vertex color stream.
option bool o_wrinkleLayers_showBlendMaskValues; 

// Indicates whether the vertex input struct's "m_optional_blendMask" is bound. If false, it is not safe to read from m_optional_blendMask.
// This option gets set automatically by the system at runtime; there is a soft naming convention that associates it with m_optional_blendMask.
// (search "m_optional_" in ShaderVariantAssetBuilder for details on the naming convention).
// [GFX TODO][ATOM-14475]: Come up with a more elegant way to associate the isBound flag with the input stream.
option bool o_blendMask_isBound;

#include "MaterialInputs/SubsurfaceInput.azsli"
#include "MaterialInputs/TransmissionInput.azsli"


// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0_tiled : UV0;
    float2 m_uv1_unwrapped : UV1;
    
    // This gets set automatically by the system at runtime only if it's available.
    // There is a soft naming convention that associates this with o_blendMask_isBound, which will be set to true whenever m_optional_blendMask is available.
    // (search "m_optional_" in ShaderVariantAssetBuilder for details on the naming convention).
    // [GFX TODO][ATOM-14475]: Come up with a more elegant way to associate the isBound flag with the input stream.
    float4 m_optional_blendMask : COLOR0;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;

    // Extended fields (only referenced in this azsl file)...
    float2 m_uv[UvSetCount] : UV1;
    float2 m_detailUv : UV3;
    
    float4 m_wrinkleBlendFactors : UV8;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput SkinVS(VSInput IN)
{
    VSOutput OUT;
 
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
 
    // UV0 is for tiled UVs. This will almost always be used exclusively with the detail layer, but it is still available
    // for the main layer to use if needed. Unlike StandardPBR etc, we don't provide a transform for this stream on the main layer, 
    // because it will usually be used for the detail layer which has its own dedicated transform. If a use does case come up, we 
    // could consider adding the main layer UV transform back in.
    // Note, even though the "unwrapped" stream is considered the main stream from a material perspective (it is the default), we
    // still use UV0 for "tiled" because UV0 has pre-generated tangent vectors which is important for detail maps, which usually
    // use the "tiled" stream, and need better quality tangents because of the high frequency.
    OUT.m_uv[0] = IN.m_uv0_tiled;

    // UV1 is for unwrapped UVs. The main textures in a skin material will almost always use this UV set.
    OUT.m_uv[1] = IN.m_uv1_unwrapped;

    
    // The detail layer has a dedicated UV transform which we apply here. The detail layer does have the option of using
    // either UV0 or UV1, in either case we apply the transform.
    OUT.m_detailUv = MaterialSrg::m_detail_allMapsUvIndex == 0 ? IN.m_uv0_tiled : IN.m_uv1_unwrapped;
    OUT.m_detailUv = mul(MaterialSrg::m_detailUvMatrix, float3(OUT.m_detailUv, 1.0)).xy;
    
    if(o_blendMask_isBound)
    {
        OUT.m_wrinkleBlendFactors = IN.m_optional_blendMask;
    }
    else
    {
        OUT.m_wrinkleBlendFactors = float4(0,0,0,0);
    }

    VertexHelper(IN, OUT, worldPosition, false);

    return OUT;
}


// ---------- Pixel Shader ----------

float3 ApplyBaseColorWrinkleMap(bool shouldApply, float3 baseColor, Texture2D map, sampler mapSampler, float2 uv, float factor)
{
    if (shouldApply)
    {
        float3 sampledColor = map.Sample(mapSampler, uv).rgb;
        sampledColor = TransformColor(sampledColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
        return lerp(baseColor, sampledColor, factor);
    }
    else
    {
        return baseColor;
    }
}

float2 ApplyNormalWrinkleMap(bool shouldApply, float2 baseNormalSample, Texture2D map, sampler mapSampler, float2 uv, bool flipX, bool flipY, float factor)
{
    if (shouldApply)
    {
        float2 sampledValue = SampleNormalXY(map, mapSampler, uv, flipX, flipY);
        return lerp(baseNormalSample, sampledValue, factor);
    }
    else
    {
        return baseNormalSample;
    }
}

PbrLightingOutput SkinPS_Common(VSOutput IN)
{
    bool isFrontFace = true;
    float3x3 uvMatrix = CreateIdentity3x3();

    // ------- Tangents & Bitangets -------
    float3 tangents[UvSetCount] = { IN.m_tangent.xyz, IN.m_tangent.xyz };
    float3 bitangents[UvSetCount] = { IN.m_bitangent.xyz, IN.m_bitangent.xyz };

    if (o_normal_useTexture || o_detail_normal_useTexture)
    {
        PrepareGeneratedTangent(IN.m_normal, IN.m_worldPosition, isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents);
    }
    
    Surface surface;
    surface.position = IN.m_worldPosition;

    // ------- Detail Layer Setup -------
    
    // When the detail maps and the detail blend mask are on the same UV, they both use the transformed detail UVs because they are 'attached' to each other
    const float2 detailBlendMaskUv = (MaterialSrg::m_detail_blendMask_uvIndex == MaterialSrg::m_detail_allMapsUvIndex) ?
        IN.m_detailUv : 
        IN.m_uv[MaterialSrg::m_detail_blendMask_uvIndex];
        
    const float detailLayerBlendFactor = GetDetailLayerBlendFactor(
        MaterialSrg::m_detail_blendMask_texture,
        MaterialSrg::m_sampler,
        detailBlendMaskUv,
        o_detail_blendMask_useTexture,
        MaterialSrg::m_detail_blendFactor);

    // ------- Normal -------
    
    float2 normalUv = IN.m_uv[MaterialSrg::m_normalMapUvIndex];
    float detailLayerNormalFactor = MaterialSrg::m_detail_normal_factor * detailLayerBlendFactor;

    // ------- Wrinkle Map Setup -------

    // Combine the optional per-morph target wrinkle masks
    float4 wrinkleBlendFactors = float4(0.0, 0.0, 0.0, 0.0);
    for(uint wrinkleMaskIndex = 0; wrinkleMaskIndex < ObjectSrg::m_wrinkle_mask_count; ++wrinkleMaskIndex)
    {
        wrinkleBlendFactors += ObjectSrg::m_wrinkle_masks[wrinkleMaskIndex].Sample(MaterialSrg::m_sampler, normalUv) * ObjectSrg::GetWrinkleMaskWeight(wrinkleMaskIndex);
    }

    // If texture based morph target driven masks are being used, use those values instead of the per-vertex colors
    if(ObjectSrg::m_wrinkle_mask_count)
    {
        IN.m_wrinkleBlendFactors = saturate(wrinkleBlendFactors);
    }

    // Since the wrinkle normal maps should all be in the same tangent space as the main normal map, we should be able to blend the raw normal map
    // texture values before doing all the tangent space transforms, so we only have to do the transforms once, for better performance.
    
    float2 normalMapSample = float2(0.0,0.0);
    if(o_normal_useTexture)
    {
        normalMapSample = SampleNormalXY(MaterialSrg::m_normalMap, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY);
    }
    if(o_wrinkleLayers_enabled && o_wrinkleLayers_normal_enabled)
    {
        normalMapSample = ApplyNormalWrinkleMap(o_wrinkleLayers_normal_useTexture1, normalMapSample, MaterialSrg::m_wrinkle_normal_texture1, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY, IN.m_wrinkleBlendFactors.r);
        normalMapSample = ApplyNormalWrinkleMap(o_wrinkleLayers_normal_useTexture2, normalMapSample, MaterialSrg::m_wrinkle_normal_texture2, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY, IN.m_wrinkleBlendFactors.g);
        normalMapSample = ApplyNormalWrinkleMap(o_wrinkleLayers_normal_useTexture3, normalMapSample, MaterialSrg::m_wrinkle_normal_texture3, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY, IN.m_wrinkleBlendFactors.b);
        normalMapSample = ApplyNormalWrinkleMap(o_wrinkleLayers_normal_useTexture4, normalMapSample, MaterialSrg::m_wrinkle_normal_texture4, MaterialSrg::m_sampler, normalUv, MaterialSrg::m_flipNormalX, MaterialSrg::m_flipNormalY, IN.m_wrinkleBlendFactors.a);
    }

    surface.vertexNormal = normalize(IN.m_normal);
    if(o_detail_normal_useTexture)
    {
        float3 normalTS = GetTangentSpaceNormal(normalMapSample, uvMatrix, MaterialSrg::m_normalFactor);
    
        bool applyOverlay = true;
        surface.normal = ApplyNormalMapOverlayWS(applyOverlay, IN.m_normal, normalTS, tangents[MaterialSrg::m_normalMapUvIndex], bitangents[MaterialSrg::m_normalMapUvIndex], 
            MaterialSrg::m_detail_normal_texture, MaterialSrg::m_sampler, IN.m_detailUv, MaterialSrg::m_detail_normal_flipX, MaterialSrg::m_detail_normal_flipY, 
            detailLayerNormalFactor, tangents[MaterialSrg::m_detail_allMapsUvIndex], bitangents[MaterialSrg::m_detail_allMapsUvIndex], MaterialSrg::m_detailUvMatrix);
    }
    else
    {
        surface.normal = GetWorldSpaceNormal(normalMapSample, IN.m_normal, tangents[MaterialSrg::m_normalMapUvIndex], bitangents[MaterialSrg::m_normalMapUvIndex], 
            uvMatrix, MaterialSrg::m_normalFactor);
    }


    //--------------------- Base Color ----------------------
        
    float2 baseColorUv = IN.m_uv[MaterialSrg::m_baseColorMapUvIndex];
    float detailLayerBaseColorFactor = MaterialSrg::m_detail_baseColor_factor * detailLayerBlendFactor;
    
    float3 baseColor = GetBaseColorInput(MaterialSrg::m_baseColorMap, MaterialSrg::m_sampler, baseColorUv, MaterialSrg::m_baseColor, o_baseColor_useTexture);
    
    bool useSampledBaseColor = o_baseColor_useTexture;
    if(o_wrinkleLayers_enabled && o_wrinkleLayers_baseColor_enabled)
    {
        // If any of the wrinkle maps are applied, we will use the Base Color blend settings to apply the MaterialSrg::m_baseColor tint to the wrinkle maps,
        // even if the main base color map is not used.
        useSampledBaseColor = useSampledBaseColor || 
            o_wrinkleLayers_baseColor_useTexture1 || 
            o_wrinkleLayers_baseColor_useTexture2 || 
            o_wrinkleLayers_baseColor_useTexture3 || 
            o_wrinkleLayers_baseColor_useTexture4;

        // There is a particular case where the MaterialSrg::m_baseColor could otherwise be blended twice, making it look too dark,
        // we reset the initial baseColor back to white to make sure it will only be applied once.
        if(useSampledBaseColor && !o_baseColor_useTexture)
        {
            baseColor = float3(1,1,1);
        }

        baseColor = ApplyBaseColorWrinkleMap(o_wrinkleLayers_baseColor_useTexture1, baseColor, MaterialSrg::m_wrinkle_baseColor_texture1, MaterialSrg::m_sampler, baseColorUv, IN.m_wrinkleBlendFactors.r);
        baseColor = ApplyBaseColorWrinkleMap(o_wrinkleLayers_baseColor_useTexture2, baseColor, MaterialSrg::m_wrinkle_baseColor_texture2, MaterialSrg::m_sampler, baseColorUv, IN.m_wrinkleBlendFactors.g);
        baseColor = ApplyBaseColorWrinkleMap(o_wrinkleLayers_baseColor_useTexture3, baseColor, MaterialSrg::m_wrinkle_baseColor_texture3, MaterialSrg::m_sampler, baseColorUv, IN.m_wrinkleBlendFactors.b);
        baseColor = ApplyBaseColorWrinkleMap(o_wrinkleLayers_baseColor_useTexture4, baseColor, MaterialSrg::m_wrinkle_baseColor_texture4, MaterialSrg::m_sampler, baseColorUv, IN.m_wrinkleBlendFactors.a);
    
    }
    
    baseColor = BlendBaseColor(baseColor, MaterialSrg::m_baseColor, MaterialSrg::m_baseColorFactor, o_baseColorTextureBlendMode, useSampledBaseColor);
    
    baseColor = ApplyTextureOverlay(o_detail_baseColor_useTexture, baseColor, MaterialSrg::m_detail_baseColor_texture, MaterialSrg::m_sampler, IN.m_detailUv, detailLayerBaseColorFactor);

    if(o_wrinkleLayers_enabled && o_wrinkleLayers_showBlendMaskValues)
    {
        // Overlay debug colors to highlight the different blend weights coming from the vertex color stream.
        if(o_wrinkleLayers_count > 0) { baseColor = lerp(baseColor, float3(1,0,0), IN.m_wrinkleBlendFactors.r); }
        if(o_wrinkleLayers_count > 1) { baseColor = lerp(baseColor, float3(0,1,0), IN.m_wrinkleBlendFactors.g); }
        if(o_wrinkleLayers_count > 2) { baseColor = lerp(baseColor, float3(0,0,1), IN.m_wrinkleBlendFactors.b); }
        if(o_wrinkleLayers_count > 3) { baseColor = lerp(baseColor, float3(1,1,1), IN.m_wrinkleBlendFactors.a); }
    }

    // ------- Specular -------

    float2 specularUv = IN.m_uv[MaterialSrg::m_specularF0MapUvIndex];
    float specularF0Factor = GetSpecularInput(MaterialSrg::m_specularF0Map, MaterialSrg::m_sampler, specularUv, MaterialSrg::m_specularF0Factor, o_specularF0_useTexture);

    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor);

    // ------- Roughness -------

    float2 roughnessUv = IN.m_uv[MaterialSrg::m_roughnessMapUvIndex];
    surface.roughnessLinear = GetRoughnessInput(MaterialSrg::m_roughnessMap, MaterialSrg::m_sampler, roughnessUv, MaterialSrg::m_roughnessFactor,
                                        MaterialSrg::m_roughnessLowerBound, MaterialSrg::m_roughnessUpperBound, o_roughness_useTexture);
    surface.CalculateRoughnessA();

    // ------- Subsurface -------

    float2 subsurfaceUv = IN.m_uv[MaterialSrg::m_subsurfaceScatteringInfluenceMapUvIndex];
    float surfaceScatteringFactor = GetSubsurfaceInput(MaterialSrg::m_subsurfaceScatteringInfluenceMap, MaterialSrg::m_sampler, subsurfaceUv, MaterialSrg::m_subsurfaceScatteringFactor);

    // ------- Transmission -------

    float2 transmissionUv = IN.m_uv[MaterialSrg::m_transmissionThicknessMapUvIndex];
    float4 transmissionTintThickness = GeTransmissionInput(MaterialSrg::m_transmissionThicknessMap, MaterialSrg::m_sampler, transmissionUv, MaterialSrg::m_transmissionTintThickness);
    surface.transmission.tint = transmissionTintThickness.rgb;
    surface.transmission.thickness = transmissionTintThickness.w;
    surface.transmission.transmissionParams = MaterialSrg::m_transmissionParams;
    surface.transmission.scatterDistance = MaterialSrg::m_scatterDistance;

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    

    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    // ------- Occlusion -------
    
    lightingData.diffuseAmbientOcclusion = GetOcclusionInput(MaterialSrg::m_diffuseOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_diffuseOcclusionMapUvIndex], MaterialSrg::m_diffuseOcclusionFactor, o_diffuseOcclusion_useTexture);
    lightingData.specularOcclusion = GetOcclusionInput(MaterialSrg::m_specularOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_specularOcclusionMapUvIndex], MaterialSrg::m_specularOcclusionFactor, o_specularOcclusion_useTexture);

    // ------- Lighting Calculation -------

    surface.clearCoat.factor = 0.0;
    surface.clearCoat.roughness = 0.0;
    surface.clearCoat.normal = float3(0.0, 0.0, 0.0);

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData);
        
    // ------- Preparing output -------

    // Pack factor and quality, drawback: because of precision limit of float16 cannot represent exact 1, maximum representable value is 0.9961
    uint factorAndQuality = dot(round(float2(saturate(surfaceScatteringFactor), MaterialSrg::m_subsurfaceScatteringQuality) * 255), float2(256, 1));
    lightingOutput.m_diffuseColor.w = factorAndQuality * (o_enableSubsurfaceScattering ? 1.0 : -1.0);
    lightingOutput.m_scatterDistance = MaterialSrg::m_scatterDistance;

    // Debug output
    const float metallic = 0.0; // No metallic on skin/subsurface materials
    DebugModifyOutput(lightingOutput.m_diffuseColor, lightingOutput.m_specularColor, lightingOutput.m_albedo, lightingOutput.m_specularF0,
                      surface.normal, tangents[MaterialSrg::m_normalMapUvIndex], bitangents[MaterialSrg::m_normalMapUvIndex],
                      surface.albedo, surface.albedo, surface.roughnessLinear, metallic);

    return lightingOutput;
}

[earlydepthstencil]
ForwardPassOutput SkinPS(VSOutput IN)
{
    ForwardPassOutput OUT;

    PbrLightingOutput lightingOutput = SkinPS_Common(IN);

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_scatterDistance = lightingOutput.m_scatterDistance;

    return OUT;
}
