/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>

struct VSInput
{
    float3 m_position : POSITION;
    float2 m_uvs[2] : UV0;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
};

struct VSDepthOutput
{
    precise linear centroid float4 m_position : SV_Position;
    float2 m_uv[UvSetCount] : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
};
 
VSDepthOutput MainVS(VSInput IN)
{
    VSDepthOutput OUT;

    VertexLocalToWorld(IN.m_position, OUT.m_worldPosition);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, OUT.m_worldPosition);

    EvaluateUVs(IN.m_uvs, OUT.m_uv);

    if (ShouldHandleParallaxInDepthShaders())
    {
        EvaluateWorldSpaceTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    }

    return OUT;
}

struct PSDepthOutput
{
    precise float m_depth : SV_Depth;
};

PSDepthOutput MainPS(VSDepthOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    PSDepthOutput OUT;

    if (ShouldHandleParallaxInDepthShaders())
    {
        float3 tangents[UvSetCount];
        float3 bitangents[UvSetCount];
        PrepareGeneratedTangent(
            normalize(IN.m_normal), IN.m_tangent, IN.m_bitangent, IN.m_worldPosition,
            isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents);

        EvaluatePixelDepth(IN.m_depth, IN.m_uv, IN.m_worldPosition, IN.m_normal, tangents, bitangents, OUT.m_depth);
    }

    MaybeClip(IN.m_uv);

    return OUT;
}
