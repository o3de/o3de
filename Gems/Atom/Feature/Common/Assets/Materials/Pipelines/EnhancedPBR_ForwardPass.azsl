/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

// SRGs
#include <Atom/Features/PBR/ForwardPassSrg.azsli>

// Pass Output
#include <Atom/Features/PBR/ForwardSubsurfacePassOutput.azsli>

// Utility
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

// Custom Surface & Lighting
#include <Atom/Features/PBR/Lighting/EnhancedLighting.azsli>

// Decals
#include <Atom/Features/PBR/Decals.azsli>

// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv[UvSetCount] : UV0;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV5;

    // Extended fields (only referenced in this azsl file)...
    float2 m_uv[UvSetCount + DetailedUvSetCount] : UV1;    
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput EnhancedPbr_ForwardPassVS(VSInput IN)
{
    VSOutput OUT;
 
    float4 worldPosition;
    VertexLocalToWorld(IN.m_position, worldPosition);

    EvaluateUVs(IN.m_uv, OUT.m_uv);

    EvaluateWorldSpaceTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    
    // Shadow coords will be calculated in the pixel shader in this case
    bool skipShadowCoords = ShouldHandleParallax() && o_parallax_enablePixelDepthOffset;

    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    if (o_enableShadows && !skipShadowCoords && shadowIndex < SceneSrg::m_directionalLightCount)
    {
        DirectionalLightShadow::GetShadowCoords(
            shadowIndex,
            worldPosition.xyz,
            OUT.m_normal,
            OUT.m_shadowCoords);
    }

    return OUT;
}


// ---------- Pixel Shader ----------

PbrLightingOutput ForwardPassPS_Common(VSOutput IN, bool isFrontFace, out float depth)
{
    const float3 vertexNormal = normalize(IN.m_normal);

    // ------- Tangents & Bitangets -------

    float3 tangents[UvSetCount];
    float3 bitangents[UvSetCount];

    if ((o_parallax_feature_enabled && !o_enableSubsurfaceScattering) || o_normal_useTexture || (o_clearCoat_enabled && o_clearCoat_normal_useTexture) || o_detail_normal_useTexture)
    {
        PrepareGeneratedTangent(
            vertexNormal, IN.m_tangent, IN.m_bitangent, IN.m_worldPosition,
            isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents);
    }

    // ------- Depth & Parallax -------

    depth = IN.m_position.z;
    
    bool displacementIsClipped = false;

    // Parallax mapping's non uniform uv transformations break screen space subsurface scattering, disable it when subsurface scatteirng is enabled
    if(ShouldHandleParallax())
    {
        UvDeltas deltas = EvaluatePixelDepth(depthNDC, IN.m_uv, IN.m_worldPosition, IN.m_normal, tangents, bitangents, depthNDC);

        IN.m_uv[2] += deltas.m_uvDelta[0];
        IN.m_uv[3] += deltas.m_uvDelta[1];

        // Adjust directional light shadow coorinates for parallax correction
        if(o_parallax_enablePixelDepthOffset)
        {
            const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
            if (o_enableShadows && shadowIndex < SceneSrg::m_directionalLightCount)
            {
                DirectionalLightShadow::GetShadowCoords(shadowIndex, IN.m_worldPosition, vertexNormal, IN.m_shadowCoords);
            }
        }
    }

    Surface surface;
    surface.position = IN.m_worldPosition.xyz;
    float alpha;
    float opacityAffectsSpecularFactor;
    AnisotropicSurfaceData anisoSurfaceData;
    EvaluateEnhancedSurfaceAlphaClip(
        IN.m_normal, 
        IN.m_uv,
        IN.m_detailUv,
        tangents,
        bitangents,
        isFrontFace,
        surface,
        alpha,
        opacityAffectsSpecularFactor,
        anisoSurfaceData);

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    
    // Directional light shadow coordinates
    lightingData.shadowCoords = IN.m_shadowCoords;

    // ------- Emissive -------

    lightingData.emissiveLighting = surface.emissiveLighting;

    // ------- Occlusion -------
    
    lightingData.diffuseAmbientOcclusion = surface.diffuseAmbientOcclusion;
    lightingData.specularOcclusion = surface.specularOcclusion;

    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    if(o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        lightingData.diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(lightingData.NdotV, float3(0.04, 0.04, 0.04), surface.clearCoat.roughness) * surface.clearCoat.factor);
    }

    // ------- Multiscatter -------

    lightingData.CalculateMultiscatterCompensation(surface.specularF0, o_specularF0_enableMultiScatterCompensation);

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Opacity -------

    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
        // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
        // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
        // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
        // not apply.
        float fresnelAlpha = FresnelSchlickWithRoughness(lightingData.NdotV, alpha, surface.roughnessLinear).x;
        alpha = lerp(fresnelAlpha, alpha, opacityAffectsSpecularFactor);
    }

    // Note: lightingOutput rendertargets are not always used as named, particularly m_diffuseColor (target 0) and
    // m_specularColor (target 1). Comments below describe the differences when appropriate.

    if (o_opacity_mode == OpacityMode::Blended)
    {
        // [GFX_TODO ATOM-13187] PbrLighting shouldn't be writing directly to render targets. It's confusing when
        // specular is being added to diffuse just because we're calling render target 0 "diffuse".

        // For blended mode, we do (dest * alpha) + (source * 1.0). This allows the specular
        // to be added on top of the diffuse, but then the diffuse must be pre-multiplied.
        // It's done this way because surface transparency doesn't really change specular response (eg, glass).

        lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse
        
        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingOutput.m_specularColor.rgb;
        specular = lerp(specular, specular * lightingOutput.m_diffuseColor.w, opacityAffectsSpecularFactor);
        lightingOutput.m_diffuseColor.rgb += specular;

        lightingOutput.m_diffuseColor.w = alpha;
    }
    else if (o_opacity_mode == OpacityMode::TintedTransparent)
    {
        // See OpacityMode::Blended above for the basic method. TintedTransparent adds onto the above concept by supporting
        // colored alpha. This is currently a very basic calculation that uses the baseColor as a multiplier with strength
        // determined by the alpha. We'll modify this later to be more physically accurate and allow surface depth,
        // absorption, and interior color to be specified.
        //
        // The technique uses dual source blending to allow two separate sources to be part of the blending equation
        // even though ultimately only a single render target is being written to. m_diffuseColor is render target 0 and
        // m_specularColor render target 1, and the blend mode is (dest * source1color) + (source * 1.0).
        //
        // This means that m_specularColor.rgb (source 1) is multiplied against the destination, then
        // m_diffuseColor.rgb (source) is added to that, and the final result is stored in render target 0.

        lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse

        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingOutput.m_specularColor.rgb;
        specular = lerp(specular, specular * lightingOutput.m_diffuseColor.w, opacityAffectsSpecularFactor);
        lightingOutput.m_diffuseColor.rgb += specular;

        lightingOutput.m_specularColor.rgb = baseColor * (1.0 - alpha); 
    }
    else
    {
        // Pack factor and quality, drawback: because of precision limit of float16 cannot represent exact 1, maximum representable value is 0.9961
        uint factorAndQuality = dot(round(float2(saturate(surfaceScatteringFactor), surface.subsurfaceScatteringQuality) * 255), float2(256, 1));
        lightingOutput.m_diffuseColor.w = factorAndQuality * (o_enableSubsurfaceScattering ? 1.0 : -1.0);
        lightingOutput.m_scatterDistance = surface.scatterDistance;
    }

    return lightingOutput;
}

ForwardPassOutputWithDepth EnhancedPbr_ForwardPassPS(VSOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    ForwardPassOutputWithDepth OUT;
    float depth;

    PbrLightingOutput lightingOutput = ForwardPassPS_Common(IN, isFrontFace, depth);

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_scatterDistance = lightingOutput.m_scatterDistance;
    OUT.m_depth = depth;
    return OUT;
}

[earlydepthstencil]
ForwardPassOutput EnhancedPbr_ForwardPassPS_EDS(VSOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    ForwardPassOutput OUT;
    float depth;

    PbrLightingOutput lightingOutput = ForwardPassPS_Common(IN, isFrontFace, depth);

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_scatterDistance = lightingOutput.m_scatterDistance;

    return OUT;
}
