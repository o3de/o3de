/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#define OUTPUT_DEPTH 0
#define FORCE_OPAQUE 1
#define OUTPUT_SUBSURFACE 0
#define ENABLE_TRANSMISSION 0
#define ENABLE_SHADER_DEBUGGING 1
#define ENABLE_CLEAR_COAT 0

#include <viewsrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>

// TODO(MaterialPipeline): In a future iteration, the material pipeline will support multiple lighting models instead of just one.
#include "../../../Shaders/Materials/BasePBR/BasePBR_SurfaceData.azsli"
#include "../../../Shaders/Materials/BasePBR/BasePBR_LightingData.azsli"
#include "../../../Shaders/Materials/BasePBR/BasePBR_LightingBrdf.azsli"
#include "../../../Shaders/Materials/BasePBR/BasePBR_LightingEval.azsli"

struct VsInput
{
    float3 position : POSITION;
    float3 normal : NORMAL;
    float4 tangent : TANGENT; 
};

struct VsOutput
{
    precise linear centroid float4 position : SV_Position;
    float3 normal: NORMAL;
    float4 tangent : TANGENT; 
    float3 worldPosition : UV0;
};

#define MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE 1
#include <Atom/RPI/MaterialPipelineCallbacks.azsli>

VsOutput EvaluateVertexGeometry(VsInput IN)
{
    VertexData adjustableVertexData;
    adjustableVertexData.InitializeToZero();
    adjustableVertexData.positionWS = LocalSpaceToWorldSpace(IN.position);
    adjustableVertexData.normalLS = IN.normal;
    adjustableVertexData.tangentLS = IN.tangent;

    MaterialFunction_AdjustVertexData(IN.position, adjustableVertexData);
    
    VsOutput output;
    output.worldPosition = adjustableVertexData.positionWS;
    output.position = mul(ViewSrg::m_viewProjectionMatrix, float4(output.worldPosition, 1.0));
    output.normal = adjustableVertexData.normalLS;
    output.tangent = adjustableVertexData.tangentLS;

    return output;
}

class PixelGeometryData
{
    float3 positionWS;
    float3 vertexNormal;
    
    // TODO(MaterialPipeline): Material pipeline should eventually support a configurable number of UV streams 
    float3 tangents[1];
    float3 bitangents[1];

    bool isFrontFace;
};

PixelGeometryData EvaluatePixelGeometry(VsOutput IN, bool isFrontFace)
{
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(IN.normal, IN.tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

    PixelGeometryData geoData;
    geoData.positionWS = IN.worldPosition;
    geoData.vertexNormal = vertexNormal;
    geoData.tangents[0] = vertexTangent;
    geoData.bitangents[0] = vertexBitangent;
    geoData.isFrontFace = isFrontFace;
    return geoData;
}

Surface EvaluateSurface(PixelGeometryData geoData)
{
    Surface surface;
    surface.position = geoData.positionWS.xyz;
    surface.vertexNormal = geoData.vertexNormal;

    // These are the values we expect MaterialFunction_EvaluateSurface to potentially replace.
    surface.normal = surface.vertexNormal;
    surface.roughnessLinear = 0.0;
    float3 baseColor = float3(0.5, 0.5, 0.5);
    float metallic = 0.0;
    float specularF0Factor = 0.5f;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    MaterialFunction_AdjustSurface(surface);
    
    surface.CalculateRoughnessA();

    return surface;
}

#include <Atom/Features/Pipeline/Forward/ForwardPassVertexAndPixel.azsli>

