/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/Shadow/Shadow.azsli>
 
struct VertexInput
{
    float3 m_position : POSITION;
    float2 m_uv[2] : UV0;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    
    // This gets set automatically by the system at runtime only if it's available.
    // There is a soft naming convention that associates this with o_blendMask_isBound, which will be set to true whenever m_optional_blendMask is available.
    // (search "m_optional_" in ShaderVariantAssetBuilder for details on the naming convention).
    // [GFX TODO][ATOM-14475]: Come up with a more elegant way to associate the isBound flag with the input stream.
    float4 m_optional_blendMask : COLOR0;
};

struct VertexOutput
{
    float4 m_position : SV_Position;
    float2 m_uv[UvSetCount] : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float3 m_blendMask : UV3;
};
 
VertexOutput MainVS(VertexInput IN)
{
    VertexOutput OUT;

    VertexLocalToWorld(IN.m_position, OUT.m_worldPosition);
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, OUT.m_worldPosition);

    EvaluateUVs(IN.m_uv, OUT.m_uv);

    if (ShouldHandleParallaxInDepthShaders())
    {
        EvaluateWorldSpaceTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    }

    if (o_blendMask_isBound)
    {
        OUT.m_blendMask = IN.m_optional_blendMask.rgb;
    }
    else
    {
        OUT.m_blendMask = float3(0, 0, 0);
    }

    return OUT;
}

struct PSDepthOutput
{
    precise float m_depth : SV_Depth;
};

PSDepthOutput MainPS(VertexOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    PSDepthOutput OUT;

    if (ShouldHandleParallaxInDepthShaders())
    {
        float3 tangents[UvSetCount];
        float3 bitangents[UvSetCount];
        PrepareGeneratedTangent(
            normalize(IN.m_normal), IN.m_tangent, IN.m_bitangent, IN.m_worldPosition,
            isFrontFace, IN.m_uv, UvSetCount, tangents, bitangents);

        EvaluateMultilayerPixelDepth(
            IN.m_blendMask,
            IN.m_position.z,
            IN.m_uv,
            IN.m_normal,
            tangents,
            bitangents,
            OUT.m_depth);

        OUT.m_depth += PdoShadowMapBias;
    }

    return OUT;
}
