/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/ColorManagement/TransformColor.azsli>

enum class TextureBlendMode { Multiply, LinearLight, Lerp, Overlay };

// See https://en.wikipedia.org/wiki/Blend_modes#Dodge_and_burn
real3 TextureBlend_LinearLight(real3 base, real3 mask)
{
    return saturate(base + 2 * mask - 1);
}

// See http://www.deepskycolors.com/archive/2010/04/21/formulas-for-Photoshop-blending-modes.html
real3 TextureBlend_Overlay(real3 target, real3 blend)
{
    return (target > 0.5) * (1.0 - (1.0 - 2.0 * (target - 0.5)) * (1.0 - blend)) +
           (target <= 0.5) * ((2.0 * target) * blend);
}

//! General purpose utility function for applying a blend between two colors. Note that the order of the colors is not commutative (for most blend modes).
//! @param color - The main color or target color for the blend
//! @param blendColor - The secondary color that will be blended into the main color
//! @param factor - A factor that controls the blend. The specific behavior depends on the blend mode.
//! @param blendMode - Indicates the type of blend to perform
//! @return the resulting blended color
real3 ApplyTextureBlend(real3 color, real3 blendColor, real factor, TextureBlendMode blendMode)
{
    if(blendMode == TextureBlendMode::Multiply)
    {
        return factor * color * blendColor;
    }
    else if(blendMode == TextureBlendMode::Lerp)
    {
        return lerp(color, blendColor, factor);
    }
    else
    {
        // [GFX TODO][ATOM-3237] See if we can avoid these extra color space conversions...
        // To get blend behavior that mimics photoshop, convert to sRGB
        //Acessg -> srgb
        real3 blendColorSRGB = TransformColorAcesToSRGB(blendColor);
        real3 colorSRGB = TransformColorAcesToSRGB(color);
                 
        real3 finalColor = colorSRGB;

        if(blendMode == TextureBlendMode::LinearLight)
        {
            finalColor = TextureBlend_LinearLight(colorSRGB, blendColorSRGB);
        }
        else if(blendMode == TextureBlendMode::Overlay)
        {
            finalColor = TextureBlend_Overlay(colorSRGB, blendColorSRGB);
        }
        
        // Convert back to ACEScg
        finalColor = TransformColorSRGBToAces(finalColor);

        // Apply factor
        finalColor = lerp(color, finalColor, factor);

        return finalColor;
    }
}
