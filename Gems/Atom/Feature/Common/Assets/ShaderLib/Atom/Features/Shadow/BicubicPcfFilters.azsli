/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include "ReceiverPlaneDepthBias.azsli"

// Pcf filtering taken from legacy Cry/Lumberyard ShadowCommon.cfi.
// 
// Approximate an expensive but smooth bicubic filter by taking multiple bilinear samples and then weighting the samples appropriately.
// 
// References:
// https://web.archive.org/web/20201222005801/https:/vec3.ca/bicubic-filtering-in-fewer-taps/
// https://developer.nvidia.com/gpugems/gpugems2/part-iii-high-quality-rendering/chapter-20-fast-third-order-texture-filtering

//--------------------------------------------------------------------------------------------------
// Computes shadows using a 3x3 kernel, but optimized to 4-taps using bilinear fetches.
//--------------------------------------------------------------------------------------------------

struct SampleShadowMapBicubicParameters
{
    Texture2DArray<float> shadowMap;
    float3 shadowPos;
    float shadowMapSize;
    float invShadowMapSize;
    SamplerComparisonState samplerState;
    float comparisonValue;

    // Optionally pass in a non-zero value into the receiverPlaneDepthBias to reduce shadow acne with large Pcf kernels
    float2 receiverPlaneDepthBias;
};


float SampleShadowMapBicubic_4Tap(SampleShadowMapBicubicParameters param)
{
    // Compute the shadow map UV and fractionals.
    float2 shadowXY = param.shadowPos.xy * param.shadowMapSize + float2(0.5, 0.5);
    float2 shadowUV = floor(shadowXY);
    float2 fractionalUV = shadowXY - shadowUV;

    float2 texelCenter = (shadowUV - float2(0.5, 0.5)) * param.invShadowMapSize;

    // Compute the offsets and weights for the 4 bilinear taps.
    float2 weights0 = 3.0 - 2.0 * fractionalUV;
    float2 weights1 = 1.0 + 2.0 * fractionalUV;

    float2 uv0 = ((2.0 - fractionalUV) / weights0) - 1.0;
    float2 uv1 = (fractionalUV / weights1) + 1.0;

    // Accumulate the shadow results and return the resolve value.
    float shadow = 0;

    const float2 uvOffsets[4] = {float2(uv0.x, uv0.y), float2(uv1.x, uv0.y), float2(uv0.x, uv1.y), float2(uv1.x, uv1.y)};
    const float weights[4] = {weights0.x * weights0.y, weights1.x * weights0.y, weights0.x * weights1.y, weights1.x * weights1.y};

    [unroll]
    for(int i = 0 ; i < 4; ++i)
    {
        const float2 texCoordOffset = uvOffsets[i] * param.invShadowMapSize;       
        const float fragmentDistance = param.comparisonValue + ApplyReceiverPlaneDepthBias(param.receiverPlaneDepthBias, texCoordOffset);
        shadow += weights[i] * param.shadowMap.SampleCmpLevelZero(param.samplerState, float3(texelCenter + texCoordOffset, param.shadowPos.z), fragmentDistance);
    }

    shadow /= 16.0;
    return shadow * shadow;
}

//--------------------------------------------------------------------------------------------------
// Computes shadows using a 5x5 kernel, but optimized to 9-taps using bilinear fetches.
//--------------------------------------------------------------------------------------------------

float SampleShadowMapBicubic_9Tap(SampleShadowMapBicubicParameters param)
{
    // Compute the shadow map UV and fractionals.
    float2 shadowScaled = param.shadowPos.xy * param.shadowMapSize + float2(0.5, 0.5);
    float2 shadowUv = floor(shadowScaled);
    float2 fractionalUV = shadowScaled - shadowUv;

    float2 texelCenter = (shadowUv - float2(0.5, 0.5)) * param.invShadowMapSize;

    // Compute the offsets and weights for the 9 bilinear taps.
    float2 weights0 = 4.0 - 3.0 * fractionalUV;
    float2 weights1 = 7.0;
    float2 weights2 = 1.0 + 3.0 * fractionalUV;

    float2 uv0 = ((3.0 - 2.0 * fractionalUV) / weights0) - 2.0;
    float2 uv1 = (3.0 + fractionalUV) / weights1;
    float2 uv2 = (fractionalUV / weights2) + 2.0;


    const float2 uvOffsets[9] = {float2(uv0.x, uv0.y), float2(uv1.x, uv0.y), float2(uv2.x, uv0.y), 
                                 float2(uv0.x, uv1.y), float2(uv1.x, uv1.y), float2(uv2.x, uv1.y), 
                                 float2(uv0.x, uv2.y), float2(uv1.x, uv2.y), float2(uv2.x, uv2.y) };

    const float weights[9] = {weights0.x * weights0.y, weights1.x * weights0.y, weights2.x * weights0.y, 
                              weights0.x * weights1.y, weights1.x * weights1.y, weights2.x * weights1.y, 
                              weights0.x * weights2.y, weights1.x * weights2.y, weights2.x * weights2.y};

    // Accumulate the shadow results and return the resolve value.
    float shadowResult = 0;

    [unroll]
    for(int i = 0 ; i < 9 ; ++i)
    {
        const float2 texCoordOffset = uvOffsets[i] * param.invShadowMapSize;
        const float fragmentDistance = param.comparisonValue + ApplyReceiverPlaneDepthBias(param.receiverPlaneDepthBias, texCoordOffset);
       
        shadowResult += weights[i] * param.shadowMap.SampleCmpLevelZero(param.samplerState, float3(texelCenter + texCoordOffset, param.shadowPos.z), fragmentDistance);
    }

    shadowResult /= 144.0;
    return shadowResult * shadowResult;
}

//--------------------------------------------------------------------------------------------------
// Computes shadows using a 7x7 kernel, but optimized to 16-taps using bilinear fetches.
//--------------------------------------------------------------------------------------------------

float SampleShadowMapBicubic_16Tap(SampleShadowMapBicubicParameters param)
{
    // Compute the shadow map UV and fractionals.
    float2 shadowXY = param.shadowPos.xy * param.shadowMapSize + float2(0.5, 0.5);
    float2 shadowUV = floor(shadowXY);
    float2 fractionalUV = shadowXY - shadowUV;

    float2 texelCenter = (shadowUV - float2(0.5, 0.5)) * param.invShadowMapSize;

    // Compute the offsets and weights for the 16 bilinear taps.
    float2 weights0 = 5.0 * fractionalUV - 6.0;
    float2 weights1 = 11.0 * fractionalUV - 28.0;
    float2 weights2 = -(11.0 * fractionalUV + 17.0);
    float2 weights3 = -(5.0 * fractionalUV + 1.0);

    float2 uv0 = ((4.0 * fractionalUV - 5.0) / weights0) - 3.0;
    float2 uv1 = ((4.0 * fractionalUV - 16.0) / weights1) - 1.0;
    float2 uv2 = -((7.0 * fractionalUV + 5.0) / weights2) + 1.0;
    float2 uv3 = -(fractionalUV / weights3) + 3.0;

    const float2 uvOffsets[16] = {float2(uv0.x, uv0.y), float2(uv1.x, uv0.y), float2(uv2.x, uv0.y), float2(uv3.x, uv0.y),
                                  float2(uv0.x, uv1.y), float2(uv1.x, uv1.y), float2(uv2.x, uv1.y), float2(uv3.x, uv1.y),
                                  float2(uv0.x, uv2.y), float2(uv1.x, uv2.y), float2(uv2.x, uv2.y), float2(uv3.x, uv2.y),
                                  float2(uv0.x, uv3.y), float2(uv1.x, uv3.y), float2(uv2.x, uv3.y), float2(uv3.x, uv3.y)};

    const float weights[16] = {weights0.x * weights0.y, weights1.x * weights0.y, weights2.x * weights0.y, weights3.x * weights0.y,
                               weights0.x * weights1.y, weights1.x * weights1.y, weights2.x * weights1.y, weights3.x * weights1.y, 
                               weights0.x * weights2.y, weights1.x * weights2.y, weights2.x * weights2.y, weights3.x * weights2.y,
                               weights0.x * weights3.y, weights1.x * weights3.y, weights2.x * weights3.y, weights3.x * weights3.y};

    // Accumulate the shadow results and return the resolve value.    
    float shadow = 0;

    [unroll]
    for(int i = 0 ; i < 16 ; ++i)
    {
        const float2 texCoordOffset = uvOffsets[i] * param.invShadowMapSize;
        const float fragmentDistance = param.comparisonValue + ApplyReceiverPlaneDepthBias(param.receiverPlaneDepthBias, texCoordOffset);

        shadow += weights[i] * param.shadowMap.SampleCmpLevelZero(param.samplerState, float3(texelCenter + texCoordOffset, param.shadowPos.z), fragmentDistance);
    }

    shadow /= 2704;
    return shadow * shadow;
}
