/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// ------------------------------------------------------------------------------
// NOTE: The following must be included or defined before including this file:
//       - Surface          - LightingData
// ---------------------------------------------------------------------------------

#include <Atom/Features/PBR/LightingOptions.azsli>

// Analytical integation (approximation) of diffusion profile over radius, could be replaced by other pre integrated kernels
// such as sum of Gaussian
float3 TransmissionKernel(float t, float3 s)
{
    float3 exponent = s * t;
    return 0.25 * (1.0 / exp(exponent) + 3.0 / exp(exponent / 3.0));
}

float3 GetBackLighting(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight, float shadowRatio)
{
    float3 result = float3(0.0, 0.0, 0.0);
    float thickness = 0.0; 
    float4 transmissionParams = surface.transmission.transmissionParams;

    switch(o_transmission_mode)
    {
        case TransmissionMode::None:
            break;

        case TransmissionMode::ThickObject: 
            // Thick object mode, using back lighting approximation proposed by Brisebois B. C. and Bouchard M. 2011
            // https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/

            {
                thickness = max(shadowRatio, surface.transmission.thickness);
                float transmittance = pow( saturate( dot( lightingData.dirToCamera, -normalize( dirToLight + surface.normal * transmissionParams.z ) ) ), transmissionParams.y ) * transmissionParams.w;
                float lamberAttenuation = exp(-thickness * transmissionParams.x) * saturate(1.0 - thickness);
                result = transmittance * lamberAttenuation * lightIntensity;
            }
            break;

        case TransmissionMode::ThinObject:
            // Thin object mode, using thin-film assumption proposed by Jimenez J. et al, 2010, "Real-Time Realistic Skin Translucency"
            // http://www.iryoku.com/translucency/downloads/Real-Time-Realistic-Skin-Translucency.pdf

            float litRatio = 1.0 - shadowRatio;
            if (litRatio)
            {
                result = TransmissionKernel(surface.transmission.thickness * transmissionParams.w, rcp(transmissionParams.xyz)) * 
                    saturate(dot(-surface.normal, dirToLight)) * lightIntensity * litRatio;
            }

            break;
    }
    
    return result;
}

