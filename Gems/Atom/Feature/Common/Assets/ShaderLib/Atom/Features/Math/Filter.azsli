/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

float3 GetImageSize(Texture2DArray<float> image)
{
    float3 size = float3(0., 0., 0.);
    image.GetDimensions(size.x, size.y, size.z);
    return size;
}

float3 GetImageSize(RWTexture2DArray<float> image)
{
    float3 size;
    image.GetDimensions(size.x, size.y, size.z);
    return size;
}

bool IsInsideOfImageSize(float3 coord, float3 imageSize)
{
    return 
       (coord.x >= 0. &&
        coord.y >= 0. &&
        coord.z >= 0. &&
        coord.x < imageSize.x &&
        coord.y < imageSize.y &&
        coord.z < imageSize.z);
}

bool IsInsideOfImageSize(
    float3 coord,
    float3 inputImageSize,
    float3 outputImageSize)
{
    return IsInsideOfImageSize(coord, inputImageSize) &&
        IsInsideOfImageSize(coord, outputImageSize);
}

//! This returns filtered value of "source" with weights in "filterTable" in 1 direction.
//! @param coord the center coordinate (in Texture2DArray) of the filtered area.
//!              the xy coordinate is in pixel, and z is array slice index.
//! @param source image resource which is used as the source of the filtering.
//!               Note that it contains entire of the shadowmap atlas, not a single shadowmap.
//! @param direction either (1,0) or (0,1).  
//!                   If (1,0), the filtering direction is horizontal,
//!                   and if (0,1), it is vertical.
//! @param sourceMin the minimum (left/top most) index of the shadowmap.
//! @param sourceMax the maximum (right/bottom most) index of the shadowmap.
//! @param filterTable the weight table for this table.
//!                    Since the weight table of a Gaussian filter is left-right symmetry,
//!                    the right half is omitted in this filterTable.
//! @param filterOffset the offset of the filtering parameter in filterTable.
//! @param filterCount the element count of filtering parameter in filterTable.
//!                        For example, the weight table has size 11 in the original meaning
//!                        of Gaussian filter, filterCount == 6 by omitting the right half.
float FilteredFloat(
    uint3 coord,
    Texture2DArray<float> source,
    int2 direction,
    int sourceMin,
    int sourceMax,
    Buffer<float> filterTable,
    uint filterOffset,
    uint filterCount)
{
    if (filterCount == 0)
    {
        return 0.; // if no filtering info, early return.
    }

    const int centerIndex = (int)dot(coord.xy, direction);
    float result = 0.;
    int index = 0;

    // This function summarizes the values stored in "source"
    // from minIndex to maxIndex with weight in "filterTable".
    // In the case that some point in [minIndex, maxIndex] go outside of
    // the shadowmap (indicated by sourceMin and sourceMax),
    // the edge value of the shadowmap is used.
    
    // 1. littler index side (left/up side)
    const int minIndex = centerIndex - ((int)filterCount - 1);

    // 1-1. outside of shadowmap (littler)
    // Assuming outside values are equal to the edge value,
    // it first summarize the weights for outside of shadowmap
    // then multiply it by the edge value.
    float weight = 0.; // summation of weights of outside of shadowmap
    for (index = minIndex; index < sourceMin; ++index)
    {
        weight += filterTable[filterOffset + index - minIndex];
    }
    int2 edgeOffset = direction * (sourceMin - centerIndex);
    int3 edgeCoord = coord + int3(edgeOffset, 0);
    result += weight * source[edgeCoord];

    // 1-2. inside of shadowmap (littler)
    for (index = max(sourceMin, minIndex); index < centerIndex; ++index)
    {
        const int2 offset = direction * (index - centerIndex);
        result += filterTable[filterOffset + index - minIndex] * 
            source[coord + int3(offset, 0)];
    }

    // 2. greater index side (right/down side)
    const int maxIndex = centerIndex + ((int)filterCount - 1);

    // 2-1. outside of shadowmap (greater)
    // This is similar to 1-1 above.
    weight = 0.; // summation of weights of outside of shadowmap
    for (index = maxIndex; index > sourceMax; --index)
    {
        weight += filterTable[filterOffset + maxIndex - index];
    }
    edgeOffset = direction * (sourceMax - centerIndex);
    edgeCoord = coord + int3(edgeOffset, 0);
    result += weight * source[edgeCoord];

    // 2-2. inside of shadowmap (greater)
    for (index = min(sourceMax, maxIndex); index > centerIndex; --index)
    {
        const int2 offset = direction * (index - centerIndex);
        result += filterTable[filterOffset + maxIndex - index] *
            source[coord + int3(offset, 0)];
    }
    
    // 3. center
    result += filterTable[filterOffset + filterCount - 1] * source[coord];

    return result;
}
