/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This file defines most structs required for a current PBR - Material:
// - it defines the VsInput, VsOutput, and MATERIAL_USES_XXX defines
// - it defines the PixelGeometryData struct
// - it defines the Surface struct
// - it defines the LightingData struct

#define ENABLE_TRANSMISSION 0

#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/MaterialInputs/UvSetCount.azsli>

// defines for the MeshInfoUtil
#define MATERIAL_USES_VERTEX_POSITION 1
#define MATERIAL_USES_VERTEX_POSITIONWS 1
#define MATERIAL_USES_VERTEX_NORMAL 1
#define MATERIAL_USES_VERTEX_TANGENT 1
#define MATERIAL_USES_VERTEX_BITANGENT 1
#define MATERIAL_USES_VERTEX_UV 1

#ifndef VsInput
#define VsInput         VsInput_FallbackPBR
#endif

#ifndef VsOutput
#define VsOutput        VsOutput_FallbackPBR
#endif

struct VsInput_FallbackPBR
{
    // Base fields (required by the template azsli file)...
#if MATERIAL_USES_VERTEX_POSITION
    float3 position;
#endif

#if MATERIAL_USES_VERTEX_NORMAL
    float3 normal;
#endif
#if MATERIAL_USES_VERTEX_TANGENT
    float4 tangent;
#endif
#if MATERIAL_USES_VERTEX_BITANGENT
    float3 bitangent;
#endif

#if MATERIAL_USES_VERTEX_UV
    float2 uv0;
    float2 uv1;
#endif
};

struct VsOutput_FallbackPBR
{
#if MATERIAL_USES_VERTEX_POSITION
    float4 position;
#endif
#if MATERIAL_USES_VERTEX_POSITIONWS
    float3 positionWS;
#endif
#if MATERIAL_USES_VERTEX_NORMAL
    float3 normal;
#endif 
#if MATERIAL_USES_VERTEX_TANGENT
    float4 tangent;
#endif
#if MATERIAL_USES_VERTEX_BITANGENT
    float3 bitangent;
#endif
#if MATERIAL_USES_VERTEX_UV
    float2 uvs[UvSetCount];
#endif
};

#ifndef PixelGeometryData
#define PixelGeometryData       PixelGeometryData_FallbackPBR
#endif

class PixelGeometryData_FallbackPBR
{
    float3 positionWS;
    real3 vertexNormal;
    float2 uvs[UvSetCount];
    float3 tangent;
    float3 bitangent;
};

#include <Atom/Features/PBR/Surfaces/StandardSurface.azsli>

#ifndef MATERIALPIPELINE_SHADER_HAS_LIGHTING_STAGE
#define MATERIALPIPELINE_SHADER_HAS_LIGHTING_STAGE 1
#endif

#if MATERIALPIPELINE_SHADER_HAS_LIGHTING_STAGE
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#endif
