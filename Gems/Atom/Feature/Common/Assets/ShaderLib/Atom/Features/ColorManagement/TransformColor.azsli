/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include "GeneratedTransforms/LinearSrgb_To_AcesCg.azsli"
#include "GeneratedTransforms/AcesCg_To_LinearSrgb.azsli"
#include "GeneratedTransforms/LinearSrgb_To_Srgb.azsli"
#include "GeneratedTransforms/Srgb_To_LinearSrgb.azsli"
#include "GeneratedTransforms/Aces_To_AcesCg.azsli"
#include "GeneratedTransforms/CalculateLuminance_LinearSrgb.azsli"
#include "GeneratedTransforms/CalculateLuminance_AcesCg.azsli"

enum class ColorSpaceId
{
    SRGB = 0,
    LinearSRGB,
    ACEScg,
    ACES2065,
    XYZ,
    Invalid
};

float3 TransformColor(in float3 color, ColorSpaceId fromColorSpace, ColorSpaceId toColorSpace)
{
    if(fromColorSpace == toColorSpace)
    {
        return color;
    }
    
    if (fromColorSpace == ColorSpaceId::LinearSRGB && toColorSpace == ColorSpaceId::ACEScg)
    {
        color = LinearSrgb_To_AcesCg(color);
    }
    else if (fromColorSpace == ColorSpaceId::LinearSRGB && toColorSpace == ColorSpaceId::SRGB)
    {
        color = LinearSrgb_To_Srgb(color);
    }
    else if (fromColorSpace == ColorSpaceId::SRGB && toColorSpace == ColorSpaceId::ACEScg)
    {
        color = Srgb_To_LinearSrgb(color);
        color = LinearSrgb_To_AcesCg(color);
    }
    else if (fromColorSpace == ColorSpaceId::ACEScg && toColorSpace == ColorSpaceId::SRGB)
    {
        color = AcesCg_To_LinearSrgb(color);
        color = LinearSrgb_To_Srgb(color);
    }
    else if (fromColorSpace == ColorSpaceId::ACES2065 && toColorSpace == ColorSpaceId::ACEScg)
    {
        color = Aces_To_AcesCg(color);
    }
    else
    {
        color = float3(1, 0, 1);
    }
    
    return color;
}

float CalculateLuminance(in float3 color, ColorSpaceId colorSpace)
{
    float luminance = 0.0f;
    switch (colorSpace)
    {
        case ColorSpaceId::LinearSRGB:
            luminance = CalculateLuminance_LinearSrgb(color);
            break;
        case ColorSpaceId::ACEScg:
            luminance = CalculateLuminance_AcesCg(color);
            break;
        case ColorSpaceId::SRGB:
        case ColorSpaceId::ACES2065:
        case ColorSpaceId::XYZ:
        case ColorSpaceId::Invalid:
            break;
    }
    
    return luminance;
}
