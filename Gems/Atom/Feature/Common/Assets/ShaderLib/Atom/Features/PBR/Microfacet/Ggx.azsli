/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

/**
 * This is a GGX-specific implementation file for microfacet scattering.
 * Based on Walter et al, "Microfacet Models for Refraction through Rough Surfaces":
 *    https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf
 * The Anisotropics handling is based on Filament reference (based on Chris Kulla and Eric Heinz)
 *  as appear here:
 *  https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf
 *  Alteration to have it directional anisotropic done by rotating the tangent base axes.
 */

// a smaller epsilon is required for avoiding artifacts in the generated BRDF texture
#define GGX_EPSILON 1e-8f

#include <Atom/RPI/Math.azsli>


// ------- GGX -------

//! (D) Normal Distribution function for GGX
//! Provides statistical distribution of microfacet normals M around the macrosurface normal N.
//!
//! @param H            potential microfacet normal, usually the half-vector between the light and the camera
//! @param N            macrosurface normal
//! @param roughnessA2  alpha roughness ^ 2 (alpha roughness is the unpacked form of artist authored linear roughness and is what is used for lighting calculations)
//! @return             factor for how much of the macrosurface has normals in the direction M. The value non-negative, but it's not normalized, so values are not restricted to [0, 1].
float NormalDistributionGGX(const float NdotH, const float roughnessA2)
{
    // Walter equation 33, simplified given that the positive characteristic function is handled elsewhere
    float b = (NdotH * roughnessA2 - NdotH) * NdotH + 1.0;
    return roughnessA2 / (PI * b * b);
}

//! (G) Geometric Shadowing and Masking Distribution function for GGX
//! Variant with height correlated Smith
//!
//! @param N            macrosurface normal
//! @param V            direction to the camera
//! @param L            direction to the light
//! @param roughnessA2  alpha roughness ^ 2 (alpha roughness is the unpacked form of artist authored linear roughness and is what is used for lighting calculations)
//! @return             probability that V and L are not masked.
float GeometricShadowingMaskingGGXCorrelated(const float NdotV, const float NdotL, const float roughnessA2)
{
    // See Frostbite PBR guide (page 12)
    // https://media.contentapi.ea.com/content/dam/eacom/frostbite/files/course-notes-moving-frostbite-to-pbr-v32.pdf
    float ggxV = NdotL * sqrt((-NdotV * roughnessA2 + NdotV) * NdotV + roughnessA2);
    float ggxL = NdotV * sqrt((-NdotL * roughnessA2 + NdotL) * NdotL + roughnessA2);
    return 0.5f / max(ggxV + ggxL, GGX_EPSILON);
}


// ------- Anisotropic GGX -------

//! (D) Normal Distribution function for anisotropic GGX
//!
//! @param h    - half vector viewer to the light, used to approximate the reflection probability for a microfacet normal at this angle
//! @param t    - rotated surface tangent for calculating anisotropic response
//! @param b    - rotated surface bitangent for calculating anisotropic response
//! @param anisotropyFactors - anisotropic tangent and bitangent factor 
float NormalDistibution_AnisotropicGGX( float NdotH, const float3 h, const float3 t, const float3 b, float2 anisotropyFactors )
{
    const float atFactor = anisotropyFactors.x;
    const float abFactor = anisotropyFactors.y;
    float TdotH = dot(t, h);
    float BdotH = dot(b, h);
    float a2 = atFactor * abFactor;
    float3 v = float3( abFactor * TdotH, atFactor * BdotH, a2 * NdotH);
    float v2 = dot(v, v);
    float w2 = a2 / max(EPSILON, v2);
    return a2 * w2 * w2 * (1.0 / PI);
}

//! (G) Geometric shadowing and masking distribution function for anisotropic GGX
//! @param t    - rotated surface tangent for calculating anisotropic response
//! @param b    - rotated surface bitangent for calculating anisotropic response
//! @param anisotropyFactors - anisotropic tangent and bitangent factor 
float ShadowingMasking_AnisotropicSmithGGXCorrelated( 
    const float3 t, const float3 b, const float3 dirToCamera, const float3 dirToLight, 
    float NdotV, float NdotL, float2 anisotropyFactors ) 
{
    const float atFactor = anisotropyFactors.x;
    const float abFactor = anisotropyFactors.y;
    float TdotV = dot(t, dirToCamera);
    float BdotV = dot(b, dirToCamera);
    float TdotL = dot(t, dirToLight);
    float BdotL = dot(b, dirToLight);
    float lambdaV = NdotL * length(float3(atFactor * TdotV, abFactor * BdotV, NdotV));
    float lambdaL = NdotV * length(float3(atFactor * TdotL, abFactor * BdotL, NdotL));
    float v = 0.5 / (lambdaV + lambdaL);
    return min(v, FLOAT_16_MAX);
}


// ------- Importance Sampling -------

//! Importance-sample a microgeometry normal using GGX distribution.
//!
//! @param xi           random values in range [0,1). (usually a hammersley-generated distribution)
//! @param roughnessA   standard alpha roughness value used for microfacet calculations
//! @param normalWS     normal of the macro surface in world-space
//! @return             micro-surface normal (in world-space) that can be used as input to other micro-surface equations (called "m" in the linked article)
float3 ImportanceSampleGGX(float2 xi, float roughnessA, float3 normalWS)
{
    float roughnessA2 = roughnessA * roughnessA;

    // Walter equation 36
    float phi = 2.0 * PI * xi.x; 

    // Walter equation 35 gives "theta = arctan( a * sqrt(xi.y) / sqrt(1-xi.y) )". This can be simplified since what we need is cos(theta).
    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (roughnessA2 - 1.0) * xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    float3 micronormalTS = float3(
        sinTheta * cos(phi),
        sinTheta * sin(phi),
        cosTheta
    );

    float3 upVector = abs(normalWS.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangentWS = normalize(cross(upVector, normalWS));
    float3 bitangentWS = cross(normalWS, tangentWS);
    float3 micronormalWS = (tangentWS * micronormalTS.x) + (bitangentWS * micronormalTS.y) + (normalWS * micronormalTS.z);

    return micronormalWS;
}

