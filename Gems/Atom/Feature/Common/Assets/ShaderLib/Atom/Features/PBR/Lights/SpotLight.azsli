/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>
#include <Atom/Features/Shadow/SpotLightShadow.azsli>

void ApplySpotLight(ViewSrg::SpotLight spotLight, Surface surface, inout LightingData lightingData, uint lightIndex)
{
    float3 posToLight = spotLight.m_position - surface.position;
    float distanceToLight2 = dot(posToLight, posToLight); // light distance squared
    float falloff = distanceToLight2 * spotLight.m_invAttenuationRadiusSquared;
    
    float3 spotConeTipPosition = spotLight.m_position + spotLight.m_bulbPositionOffset * -spotLight.m_direction;
    float3 dirToConeTip = normalize(spotConeTipPosition - surface.position);
    float dotWithDirection = dot(dirToConeTip, -normalize(spotLight.m_direction));

    float3 posToLightDir = normalize(posToLight);
    
    // Reduce the brightness based on how much the disk is facing this pixel.
    float angleFalloff = dot(posToLightDir, -spotLight.m_direction);

    if (falloff < 1.0f && dotWithDirection >= spotLight.m_outerConeAngle && angleFalloff > 0.0) // Only calculate shading if light is in range and in cone.
    {
        // Smoothly adjusts the light intensity so it reaches 0 at light.m_attenuationRadius distance
        float radiusAttenuation = 1.0 - (falloff * falloff);
        radiusAttenuation = radiusAttenuation * radiusAttenuation;
        
        // Find the distance to the closest point on the disk
        float distanceToPlane = dot(posToLight,-spotLight.m_direction);
        float distanceToPlane2 = distanceToPlane * distanceToPlane;
        float pointOnPlaneToLightDistance = sqrt(distanceToLight2 - distanceToPlane2); // pythagorean theorem 
        float pointOnPlaneToDiskDistance = max(pointOnPlaneToLightDistance - spotLight.m_bulbRadius, 0.0f); 
        float distanceToDisk2 = pointOnPlaneToDiskDistance * pointOnPlaneToDiskDistance + distanceToPlane2;

        // Update the light direction based on the edges of the disk as visible from this point instead of the center.
        float3 pointOnPlane = -spotLight.m_direction * distanceToPlane;
        float3 pointOnPlaneToLightDir = normalize(posToLight - pointOnPlane);
        float3 nearSideDir = normalize(pointOnPlane + pointOnPlaneToLightDir * (pointOnPlaneToLightDistance - spotLight.m_bulbRadius));
        float3 farSideDir = normalize(pointOnPlane + pointOnPlaneToLightDir * (pointOnPlaneToLightDistance + spotLight.m_bulbRadius));
        posToLightDir = normalize((nearSideDir + farSideDir) * 0.5);

        // Standard quadratic falloff
        distanceToDisk2 = max(0.001 * 0.001, distanceToDisk2); // clamp the light to at least 1mm away to avoid extreme values.
        float3 lightIntensity = (spotLight.m_rgbIntensityCandelas / distanceToDisk2) * radiusAttenuation * angleFalloff;

        // Adjust brightness based on the disk size relative to its distance.
        // The larger the disk is relative to the surface point, the dimmer it becomes.
        // 0 radius disks are unaffected.
        lightIntensity /= ((spotLight.m_bulbRadius / distanceToPlane) + 1.0);

        // shadow
        float litRatio = 1.;
        
        // How much is back face shadowed, it's set to the reverse of litRatio to share the same default value with thickness, which should be 0 if no shadow map available
        float backShadowRatio = 0.;
        if (o_enableShadows)
        {
            litRatio = SpotLightShadow::GetVisibility(
                lightIndex,
                surface.position,
                -dirToConeTip,
                surface.normal);
             
            // Use backShadowRatio to carry thickness from shadow map for thick mode
            backShadowRatio = 1.0 - litRatio;
            if (o_transmission_mode == TransmissionMode::ThickObject)
            {
                backShadowRatio = SpotLightShadow::GetThickness(
                    lightIndex,
                    surface.position);
            }
        }

        float3 dirToLight = normalize(posToLight);

        if (dotWithDirection < spotLight.m_innerConeAngle) // in penumbra
        {   
            // Normalize into 0.0 - 1.0 space.
            float penumbraMask = (dotWithDirection - spotLight.m_outerConeAngle) / (spotLight.m_innerConeAngle - spotLight.m_outerConeAngle);
            
            // Bias the curve towards the inner or outer cone angle
            penumbraMask = saturate((spotLight.m_penumbraBias * penumbraMask + penumbraMask) / (spotLight.m_penumbraBias * penumbraMask + 1.0));
            
            // Apply smoothstep
            penumbraMask = penumbraMask * penumbraMask * (3.0 - 2.0 * penumbraMask);
            
            lightIntensity *= penumbraMask;
        }

        lightingData.diffuseLighting += GetDiffuseLighting(surface, lightingData, lightIntensity, dirToLight) * litRatio;
        lightingData.translucentBackLighting += GetBackLighting(surface, lightingData, lightIntensity, dirToLight, backShadowRatio);

        // Calculate the reflection off the normal from the view lightDirection
        float3 reflectionDir = reflect(-lightingData.dirToCamera, surface.normal);
        float reflectionDotLight = dot(reflectionDir, -spotLight.m_direction);
        
        // Let 'Intersection' denote the point where the reflection ray intersects the diskLight plane
        // As such, posToIntersection denotes the vector from pos to the intersection of the reflection ray and the disk plane:
        float3 posToIntersection;
        
        if (reflectionDotLight >= 0.0001)
        {
            // Reflection going towards the light
            posToIntersection = reflectionDir * distanceToPlane / reflectionDotLight;
        }
        else
        {
            // Reflection going away from the light. Choose a point far off and project it on the plane,
            // then treat that as the reflection plane intersection.
            float3 posToFarOffPoint = reflectionDir * distanceToPlane * 10000.0;
            float3 lightToFarOffPoint = posToFarOffPoint - posToLight;
            float3 intersectionToFarOffPoint = dot(lightToFarOffPoint, spotLight.m_direction) * spotLight.m_direction;
            posToIntersection = posToFarOffPoint - intersectionToFarOffPoint;
        }
    
        // Calculate a vector from the reflection vector to the light
        float3 intersectionToLight = posToLight - posToIntersection;

        // Adjust the direction to light based on the bulb size
        posToLight -= intersectionToLight * saturate(spotLight.m_bulbRadius / length(intersectionToLight));

        // Adjust the intensity of the light based on the bulb size to conserve energy
        float diskIntensityNormalization = GetIntensityAdjustedByRadiusAndRoughness(surface.roughnessA, spotLight.m_bulbRadius, distanceToLight2);

        lightingData.specularLighting += diskIntensityNormalization * GetSpecularLighting(surface, lightingData, lightIntensity, normalize(posToLight)) * litRatio;
    }
}

void ApplySpotLights(Surface surface, inout LightingData lightingData)
{    
    lightingData.tileIterator.LoadAdvance();
                
    while( !lightingData.tileIterator.IsDone() ) 
    { 
        uint currLightIndex = lightingData.tileIterator.GetValue(); 
        lightingData.tileIterator.LoadAdvance();
        
        ViewSrg::SpotLight light = ViewSrg::m_spotLights[currLightIndex];
        ApplySpotLight(light, surface, lightingData, currLightIndex);
    }
}
