/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Usage:
//
// To access resources bindlessly, use the Get function defined by the bindless SRG corresponding to
// the resource type you wish to access and supply the index provided by the SRG compiler. For example,
// given an index to a particular Texture2D (say, 42), you may access this resource as follows:
//
//     Texture2D texture = Bindless::GetTexture2D(42);
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

#include "SrgSemantics.azsli"

partial ShaderResourceGroup Bindless : SRG_Bindless
{
    Texture2D<float4> m_Texture2D[UNBOUNDED_SIZE];
    RWTexture2D<float4> m_RWTexture2D[UNBOUNDED_SIZE];
    ByteAddressBuffer m_ByteAddressBuffer[UNBOUNDED_SIZE];
    RWByteAddressBuffer m_RWByteAddressBuffer[UNBOUNDED_SIZE];
    
    //Todo:: Enable this if we want to create a tlas specific unbounded array for RayTracing. 
    //Uncommenting this will require runtime changes within vk and dx11 as well
    //RaytracingAccelerationStructure m_TLAS[UNBOUNDED_SIZE]; 

    Texture2D<float4> GetTexture2D(uint index)
    {
        return m_Texture2D[index];
    }

    RWTexture2D<float4> GetRWTexture2D(uint index)
    {
        return m_RWTexture2D[index];
    }

    ByteAddressBuffer GetByteAddressBuffer(uint index)
    {
        return m_ByteAddressBuffer[index];
    }

    RWByteAddressBuffer GetRWByteAddressBuffer(uint index)
    {
        return m_RWByteAddressBuffer[index];
    }

    //Uncomment once the declaration above is also uncommented
    //RaytracingAccelerationStructure GetTLAS(uint index)
    //{
    //    return m_TLAS[index];
    //}

};
