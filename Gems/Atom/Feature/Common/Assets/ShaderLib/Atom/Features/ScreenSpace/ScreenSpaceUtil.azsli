/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <viewsrg.srgi>

// Given a depthStencil depth and the fragment XY position, reconstruct the world space position
// screenCoords - from 0.. dimension of the screen of the current pixel
// depthStencilTexture - the depth stencil buffer (non linear depth)
// sDepth - zbuffer non linear depth at the fragment location


float4 WorldPositionFromDepthBuffer(const float2 UV, const float zDepth )
{ 
    float x = UV.x * 2.0f - 1.0f;
    float y = (1.0f - UV.y) * 2.0f - 1.0f;
    float4 projectedPos = float4(x, y, zDepth, 1.0f);    // warped projected space [0..1]
    float4 positionVS = mul(ViewSrg::m_projectionMatrixInverse, projectedPos);

    positionVS /= positionVS.w;
    float4 positionWS = mul(ViewSrg::m_viewMatrixInverse, positionVS);
    return positionWS;
}

float4 WorldPositionFromDepthBuffer(const float2 depthBufferDimensions, const float zDepth, const float2 screenCoords )
{ 
    float2 UV = saturate(screenCoords / depthBufferDimensions);
    return WorldPositionFromDepthBuffer(UV, zDepth);
}
 
float4 WorldPositionFromDepthBuffer(const Texture2D<float2> depthStencilTexture, const float zDepth, const float2 screenCoords )
{ 
    uint2 dimensions;
    depthStencilTexture.GetDimensions(dimensions.x, dimensions.y);
    return WorldPositionFromDepthBuffer(dimensions, zDepth, screenCoords);
}
