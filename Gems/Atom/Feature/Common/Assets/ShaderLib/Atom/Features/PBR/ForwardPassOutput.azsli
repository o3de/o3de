/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#ifdef UNIFIED_FORWARD_OUTPUT

struct ForwardPassOutput
{
    float4 m_color  : SV_Target0;
};

struct ForwardPassOutputWithDepth
{
    float4 m_color  : SV_Target0;
    float m_depth : SV_Depth;
};

#else

struct ForwardPassOutput
{
    float4 m_diffuseColor  : SV_Target0;     //!< RGB = Diffuse Lighting, A = Blend Alpha (for blended surfaces) OR A = special encoding of surfaceScatteringFactor, m_subsurfaceScatteringQuality, o_enableSubsurfaceScattering
    float4 m_specularColor : SV_Target1;     //!< RGB = Specular Lighting, A = Unused
    float4 m_albedo : SV_Target2;            //!< RGB = Surface albedo pre-multiplied by other factors that will be multiplied later by diffuse GI, A = specularOcclusion
    float4 m_specularF0 : SV_Target3;        //!< RGB = Specular F0, A = roughness
    float4 m_normal : SV_Target4;            //!< RGB10 = EncodeNormalSignedOctahedron(worldNormal), A2 = multiScatterCompensationEnabled
};

struct ForwardPassOutputWithDepth
{
    // See above for descriptions of special encodings

    float4 m_diffuseColor  : SV_Target0;
    float4 m_specularColor : SV_Target1;
    float4 m_albedo : SV_Target2;
    float4 m_specularF0 : SV_Target3;
    float4 m_normal : SV_Target4;
    float m_depth : SV_Depth;
};

#endif
