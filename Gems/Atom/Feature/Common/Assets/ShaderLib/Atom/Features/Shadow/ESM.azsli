/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#pragma once
 
#include <Atom/Features/Math/Filter.azsli> // BilinearFilter()

 
float SampleESM(const Texture2DArray<float> shadowMap, const SamplerState samp, const float3 uv, const float zReceiver, const float overdark)
{
	const float mipmaplevel = 0;
	const float occluder = shadowMap.SampleLevel(samp,uv, mipmaplevel).r;
	const float lit = exp((occluder - zReceiver) * overdark);
	return lit;
}

float PCFFallbackForESM(const Texture2DArray<float> shadowMap, const float3 uv, const float zReceiver, const float texMapSize, const float invTexMapSize, const float overdark)
{
    const float tl = clamp(SampleESM(shadowMap, PassSrg::PointSampler, uv + float3( 0.0, 0.0, 0.0 ) * invTexMapSize, zReceiver, overdark),0.0,1.0);
    const float tr = clamp(SampleESM(shadowMap, PassSrg::PointSampler, uv + float3( 1.0, 0.0, 0.0 ) * invTexMapSize, zReceiver, overdark),0.0,1.0);
    const float bl = clamp(SampleESM(shadowMap, PassSrg::PointSampler, uv + float3( 0.0, 1.0, 0.0 ) * invTexMapSize, zReceiver, overdark),0.0,1.0);
    const float br = clamp(SampleESM(shadowMap, PassSrg::PointSampler, uv + float3( 1.0, 1.0, 0.0 ) * invTexMapSize, zReceiver, overdark),0.0,1.0);
    return BilinearFilter(tl, tr, bl, br, uv, texMapSize);
}
