/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#pragma once
 
// The calculation of ESM is given by formula exp((occluder - zReceiver) * esmComponent). Which can be spitted into 2 parts.
// exp(occluer*esmComponent) * exp(-zReceiver * esmComponent).  Here is the calculation of Receiver part, combined with
// occluder part to give the final soft shadow.
// see DepthExponentiation.azsl for the calcuation of occluder part.
float SampleESM(const Texture2DArray<float> shadowMap, const SamplerState samp, const float3 uv, const float zReceiver, const float esmExponent)
{
    const float mipmaplevel = 0;
    const float occluder = shadowMap.SampleLevel(samp, uv, mipmaplevel).r;
    const float lit = exp(-zReceiver * esmExponent) * occluder;
    return lit;
}

float PCFFallbackForESM(const Texture2DArray<float> shadowMap, const float3 uv, const float zReceiver, const float esmExponent)
{
    const float result = SampleESM(shadowMap, PassSrg::LinearSampler, uv, zReceiver, esmExponent);
    return saturate(result);
}
