/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

//! Reflection Probe (smallest probe volume that overlaps the object position)
struct ReflectionProbeData
{
    row_major float3x4 m_modelToWorld;
    row_major float3x4 m_modelToWorldInverse; // does not include extents
    float3 m_outerObbHalfLengths;
    float m_exposure;
    float3 m_innerObbHalfLengths;
    bool m_useReflectionProbe;
    bool m_useParallaxCorrection;
    float3 m_padding;
    [[pad_to(16)]]
};

float4x4 GetReflectionProbeWorldMatrix(in ReflectionProbeData reflectionProbeData)
{
    float4x4 modelToWorld = float4x4(
        float4(1, 0, 0, 0),
        float4(0, 1, 0, 0),
        float4(0, 0, 1, 0),
        float4(0, 0, 0, 1));

    modelToWorld[0] = reflectionProbeData.m_modelToWorld[0];
    modelToWorld[1] = reflectionProbeData.m_modelToWorld[1];
    modelToWorld[2] = reflectionProbeData.m_modelToWorld[2];
    return modelToWorld;
}

float4x4 GetReflectionProbeWorldMatrixInverse(in ReflectionProbeData reflectionProbeData)
{
    float4x4 modelToWorldInverse = float4x4(
        float4(1, 0, 0, 0),
        float4(0, 1, 0, 0),
        float4(0, 0, 1, 0),
        float4(0, 0, 0, 1));

    modelToWorldInverse[0] = reflectionProbeData.m_modelToWorldInverse[0];
    modelToWorldInverse[1] = reflectionProbeData.m_modelToWorldInverse[1];
    modelToWorldInverse[2] = reflectionProbeData.m_modelToWorldInverse[2];
    return modelToWorldInverse;
}

