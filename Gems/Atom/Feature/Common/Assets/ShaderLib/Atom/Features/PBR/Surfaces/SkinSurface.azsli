/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/PBR/Surfaces/AnisotropicSurfaceData.azsli>
#include <Atom/Features/PBR/Surfaces/BasePbrSurfaceData.azsli>
#include <Atom/Features/PBR/Surfaces/ClearCoatSurfaceData.azsli>
#include <Atom/Features/PBR/Surfaces/TransmissionSurfaceData.azsli>

class Surface
{
    ClearCoatSurfaceData clearCoat;
    TransmissionSurfaceData transmission;

    // ------- BasePbrSurfaceData -------
    
    float3 position;            //!< Position in world-space
    float3 normal;              //!< Normal in world-space
    float3 vertexNormal;        //!< Vertex normal in world-space
    float3 albedo;              //!< Albedo color of the non-metallic material, will be multiplied against the diffuse lighting value
    float3 specularF0;          //!< Fresnel f0 spectral value of the surface
    float roughnessLinear;      //!< Perceptually linear roughness value authored by artists. Must be remapped to roughnessA before use
    float roughnessA;           //!< Actual roughness value ( a.k.a. "alpha roughness") to be used in microfacet calculations
    float roughnessA2;          //!< Alpha roughness ^ 2 (i.e. roughnessA * roughnessA), used in GGX, cached here for perfromance

    //! Applies specular anti-aliasing to roughnessA2 
    void ApplySpecularAA();

    //! Calculates roughnessA and roughnessA2 after roughness has been set
    void CalculateRoughnessA();

    //! Sets albedo and specularF0 using metallic workflow
    void SetAlbedoAndSpecularF0(float3 baseColor, float specularF0Factor);

};


// Specular Anti-Aliasing technique from this paper:
// http://www.jp.square-enix.com/tech/library/pdf/ImprovedGeometricSpecularAA.pdf
void Surface::ApplySpecularAA()
{
    // Constants for formula below
    const float screenVariance = 0.25f;
    const float varianceThresh = 0.18f;

    // Specular Anti-Aliasing
    float3 dndu = ddx_fine( normal );
    float3 dndv = ddy_fine( normal );
    float variance = screenVariance * (dot( dndu , dndu ) + dot( dndv , dndv ));
    float kernelRoughnessA2 = min(2.0 * variance , varianceThresh );
    float filteredRoughnessA2 = saturate ( roughnessA2 + kernelRoughnessA2 );
    roughnessA2 = filteredRoughnessA2;
}

void Surface::CalculateRoughnessA()
{
    // The roughness value in microfacet calculations (called "alpha" in the literature) does not give perceptually
    // linear results. Disney found that squaring the roughness value before using it in microfacet equations causes
    // the user-provided roughness parameter to be more perceptually linear. We keep both values available as some
    // equations need roughnessLinear (i.e. IBL sampling) while others need roughnessA (i.e. GGX equations).
    // See Burley's Disney PBR: https://pdfs.semanticscholar.org/eeee/3b125c09044d3e2f58ed0e4b1b66a677886d.pdf

    roughnessA = max(roughnessLinear * roughnessLinear, MinRoughnessA);

    roughnessA2 = roughnessA * roughnessA;
    if(o_applySpecularAA)
    {
        ApplySpecularAA();
    }
}

void Surface::SetAlbedoAndSpecularF0(float3 baseColor, float specularF0Factor)
{
    albedo = baseColor;
    specularF0 = MaxDielectricSpecularF0 * specularF0Factor;
}

