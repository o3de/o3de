/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>

#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Brdf.azsli>

// Then define the Diffuse and Specular lighting functions
float3 GetDiffuseLighting(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    float3 diffuse;
    if(o_enableSubsurfaceScattering)
    {
        // Use diffuse brdf contains double Fresnel (enter/exit surface) terms if subsurface scattering is enabled
        diffuse = NormalizedDisneyDiffuse(surface.albedo, surface.normal, lightingData.dirToCamera, dirToLight, surface.roughnessLinear);
    }
    else
    {
        diffuse = DiffuseLambertian(surface.albedo, surface.normal, dirToLight, lightingData.diffuseResponse);
    }
    
    diffuse *= lightIntensity;
    return diffuse;
}

float3 GetSpecularLighting(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    float3 specular = SpecularGGX(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);
    specular *= lightIntensity;
    return specular;
}


// Then include everything else
#include <Atom/Features/PBR/Lights/Lights.azsli>
#include <Atom/Features/PBR/Lights/Ibl.azsli>


struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
    float3 m_scatterDistance;
};


PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(lightingData.diffuseLighting, 1.0f);
    lightingOutput.m_specularColor = float4(lightingData.specularLighting, 1.0f);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = EncodeUnorm2BitFlags(o_enableIBL, o_specularF0_enableMultiScatterCompensation);
    
    return lightingOutput;
}
