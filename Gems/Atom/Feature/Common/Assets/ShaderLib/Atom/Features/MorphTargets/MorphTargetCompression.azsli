/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

float3 DecodePositionDelta(uint3 xyz, float min, float max)
{
    // Position deltas are encoded using 16 bits per channel, which represent a 0-1 range between the min and max values
    // They are converted to 32 bit uints after being loaded from memory before calling this function since AZSL does not support 16-bit uint
    // Divide by 65535 to get from 0-1, multiply by the magnitude of the range between min and max,
    // and add the value of min to get back the original value
    float f = (max - min) / 65535.0f;
    return float3(xyz) * f + min;
}

float3 DecodeTBNDelta(uint3 encodedTBN)
{
	// Similar to positions, but TBN deltas are assumed to be in the range of -2.0 to 2.0
	// and only use 8 bits per channel
	float f = 4.0f / 255.0f;
	return float3(encodedTBN) * f - 2.0f;
}

float4 DecodeColorDelta(uint4 encodedColor)
{
    // Color deltas are in a range of -1.0 to 1.0
    // 8 bits per channel, 4 channels
    float f = 2.0f / 255.0f;
    return float4(encodedColor) * f - 1.0f;
}

int3 EncodeFloatsToInts(float3 f, float integerEncoding)
{
    return int3(f * integerEncoding);
}

float3 DecodeIntsToFloats(int3 i, float inverseIntegerEncoding)
{
    return float3(i) * inverseIntegerEncoding;
}

int4 EncodeFloatsToInts(float4 f, float integerEncoding)
{
    return int4(f * integerEncoding);
}

float4 DecodeIntsToFloats(int4 i, float inverseIntegerEncoding)
{
    return float4(i) * inverseIntegerEncoding;
}
