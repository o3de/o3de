/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

struct TextureData
{
    float4 m_baseColor;
    float3 m_normal;
    float  m_metallic;
    float  m_roughness;
};

TextureData GetHitTextureData(RayTracingMaterialSrg::MaterialInfo materialInfo, float2 uv)
{
    TextureData textureData = (TextureData)0;

    // base color
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_BASECOLOR)
    {
        // array index of the baseColor texture for this material in the m_materialTextures unbounded array
        uint baseColorTextureArrayIndex = RayTracingMaterialSrg::m_materialTextureIndices[materialInfo.m_textureStartIndex + MATERIAL_BASECOLOR_TEXTURE_OFFSET];

        textureData.m_baseColor = RayTracingMaterialSrg::m_materialTextures[baseColorTextureArrayIndex].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_baseColor = materialInfo.m_baseColor;
    }

    // normal
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_NORMAL)
    {
        // array index of the normal texture for this material in the m_materialTextures unbounded array
        uint normalTextureArrayIndex = RayTracingMaterialSrg::m_materialTextureIndices[materialInfo.m_textureStartIndex + MATERIAL_NORMAL_TEXTURE_OFFSET];

        textureData.m_normal = RayTracingMaterialSrg::m_materialTextures[normalTextureArrayIndex].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_normal = float3(0.0f, 0.0f, 1.0f);
    }

    // metallic
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_METALLIC)
    {
        // array index of the metallic texture for this material in the m_materialTextures unbounded array
        uint metallicTextureArrayIndex = RayTracingMaterialSrg::m_materialTextureIndices[materialInfo.m_textureStartIndex + MATERIAL_METALLIC_TEXTURE_OFFSET];

        textureData.m_metallic = RayTracingMaterialSrg::m_materialTextures[metallicTextureArrayIndex].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_metallic = materialInfo.m_metallicFactor;
    }

    // roughness
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_ROUGHNESS)
    {
        // array index of the roughness texture for this material in the m_materialTextures unbounded array
        uint roughnessTextureArrayIndex = RayTracingMaterialSrg::m_materialTextureIndices[materialInfo.m_textureStartIndex + MATERIAL_ROUGHNESS_TEXTURE_OFFSET];

        textureData.m_roughness = RayTracingMaterialSrg::m_materialTextures[roughnessTextureArrayIndex].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_roughness = materialInfo.m_roughnessFactor;
    }

    return textureData;
}
    