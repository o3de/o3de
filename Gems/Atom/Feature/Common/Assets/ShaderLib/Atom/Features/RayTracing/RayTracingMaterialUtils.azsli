/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

struct TextureData
{
    float4 m_baseColor;
    float3 m_normal;
    float  m_metallic;
    float  m_roughness;
};

TextureData GetHitTextureData(RayTracingMaterialSrg::MaterialInfo materialInfo, float2 uv)
{
    TextureData textureData = (TextureData)0;

    uint textureIndex = materialInfo.m_textureStartIndex;

    // base color
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_BASECOLOR)
    {
        textureData.m_baseColor = RayTracingMaterialSrg::m_materialTextures[textureIndex++].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_baseColor = materialInfo.m_baseColor;
    }

    // normal
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_NORMAL)
    {
        textureData.m_normal = RayTracingMaterialSrg::m_materialTextures[textureIndex++].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_normal = float3(0.0f, 0.0f, 1.0f);
    }

    // metallic
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_METALLIC)
    {
        textureData.m_metallic = RayTracingMaterialSrg::m_materialTextures[textureIndex++].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_metallic = materialInfo.m_metallicFactor;
    }

    // roughness
    if (materialInfo.m_textureFlags & TEXTURE_FLAG_ROUGHNESS)
    {
        textureData.m_roughness = RayTracingMaterialSrg::m_materialTextures[textureIndex++].SampleLevel(RayTracingMaterialSrg::LinearSampler, uv, 0);
    }
    else
    {
        textureData.m_roughness = materialInfo.m_roughnessFactor;
    }

    return textureData;
}
    