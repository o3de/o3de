/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PBR/Lights/LightStructures.azsli>

ShaderResourceGroup RayTracingSceneSrg : SRG_RayTracingScene
{
    RaytracingAccelerationStructure m_scene;

    StructuredBuffer<DirectionalLight> m_directionalLights;
    uint m_directionalLightCount;
    
    StructuredBuffer<SimplePointLight> m_simplePointLights;
    uint m_simplePointLightCount;

    StructuredBuffer<SimpleSpotLight> m_simpleSpotLights;
    uint m_simpleSpotLightCount;

    StructuredBuffer<PointLight> m_pointLights;
    uint m_pointLightCount;
    
    StructuredBuffer<DiskLight> m_diskLights;
    uint m_diskLightCount;
    
    StructuredBuffer<CapsuleLight> m_capsuleLights;
    uint m_capsuleLightCount;
    
    StructuredBuffer<QuadLight> m_quadLights;
    uint m_quadLightCount;
    
    // diffuse IBL
    Sampler m_diffuseEnvMapSampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };
    
    Sampler LinearSampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };

    TextureCube m_diffuseEnvMap;
    float4 m_iblOrientation;
    float m_iblExposure;

    uint m_blasMeshCount;

    // contains a mapping from RT InstanceIndex to procedural geometry instances, which can be used to read per-instance geometry data:
    // [0] bindlessBufferIndex parameter from RegisterProceduralGeometryType
    // [1] localInstanceIndex parameter from AddProceduralGeometry
    Buffer<uint2> m_proceduralGeometryInfo;
    
    // Specifies which debug visualization to use (value must be from RayTracingDebugViewMode enum)
    uint m_debugViewMode;
}
