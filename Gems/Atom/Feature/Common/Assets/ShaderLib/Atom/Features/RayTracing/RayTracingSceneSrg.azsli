/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup RayTracingSceneSrg : SRG_RayTracingScene
{
    RaytracingAccelerationStructure m_scene;

    // directional lights
    struct DirectionalLight
    {
        float3 m_direction;
        float  m_angularRadius;
        float3 m_rgbIntensity;
        float  m_padding2;
    };
    
    StructuredBuffer<DirectionalLight> m_directionalLights;
    uint m_directionalLightCount;
    
    // simple point lights 
    struct SimplePointLight
    {
        float3 m_position;
        float m_invAttenuationRadiusSquared; // For a radius at which this light no longer has an effect, 1 / radius^2.
        float3 m_rgbIntensityCandelas;
        float m_padding; // explicit padding.
    };

    StructuredBuffer<SimplePointLight> m_simplePointLights;
    uint m_simplePointLightCount;

    // simple spot lights
    struct SimpleSpotLight
    {
        float3 m_position;
        float m_invAttenuationRadiusSquared; // For a radius at which this light no longer has an effect, 1 / radius^2.
        float3 m_direction;
        float m_cosInnerConeAngle; // cosine of the outer cone angle
        float3 m_rgbIntensityCandelas;
        float m_cosOuterConeAngle; // cosine of the inner cone angle
    };

    StructuredBuffer<SimpleSpotLight> m_simpleSpotLights;
    uint m_simpleSpotLightCount;

    // point lights (sphere)
    struct PointLight
    {
        float3 m_position;
        float  m_invAttenuationRadiusSquared;
        float3 m_rgbIntensity;
        float  m_bulbRadius;
        uint3 m_shadowIndices;
        uint m_padding;
    };
    
    StructuredBuffer<PointLight> m_pointLights;
    uint m_pointLightCount;
    
    // disk lights
    struct DiskLight
    {
        float3 m_position;
        float m_invAttenuationRadiusSquared; // For a radius at which this light no longer has an effect, 1 / radius^2.
        float3 m_rgbIntensityCandelas;
        float m_diskRadius;
        float3 m_direction;
        uint m_flags;
        float m_cosInnerConeAngle;
        float m_cosOuterConeAngle;
        float m_bulbPositionOffset;
        uint m_shadowIndex;
    };
    
    StructuredBuffer<DiskLight> m_diskLights;
    uint m_diskLightCount;
    
    // capsule lights
    struct CapsuleLight
    {
        float3 m_startPoint;                    // one of the end points of the capsule
        float m_radius;                         // radius of the capsule, ie distance from line segment to surface.
        float3 m_direction;                     // normalized vector from m_startPoint towards the other end point.
        float m_length;                         // length of the line segment making up the inside of the capsule. Doesn't include caps (0 length capsule == sphere)
        float3 m_rgbIntensityCandelas;          // total rgb luminous intensity of the capsule in candelas
        float m_invAttenuationRadiusSquared;    // inverse of the distance at which this light no longer has an effect, squared. Also used for falloff calculations.
    };
    
    StructuredBuffer<CapsuleLight> m_capsuleLights;
    uint m_capsuleLightCount;
    
    // quad lights 
    struct QuadLight
    {
        float3 m_position;
        float  m_invAttenuationRadiusSquared;   // radius at which this light no longer has an effect, 1 / radius^2.
        float3 m_leftDir;                       // direction from center of quad to the left edge
        float  m_halfWidth;                     // half-width of the quad. m_leftDir * m_halfWidth is a vector from the center to the left edge.
        float3 m_upDir;                         // cirection from center of quad to the top edge
        float  m_halfHeight;                    // half-height of the quad. m_upDir * m_halfHeight is a vector from the center to the top edge.
        float3 m_rgbIntensityNits;
        uint   m_flags;                         // see QuadLightFlag enum
    };
    
    StructuredBuffer<QuadLight> m_quadLights;
    uint m_quadLightCount;
    
    // diffuse IBL
    Sampler m_diffuseEnvMapSampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };
    
    TextureCube m_diffuseEnvMap;
    float4 m_iblOrientation;
    float m_iblExposure;
       
    // mesh info structured buffer containing offsets into the mesh buffers, irradiance color, and transform for each mesh
    struct MeshInfo
    {
        uint     m_indexOffset;
        uint     m_positionOffset;
        uint     m_normalOffset;
        uint     m_tangentOffset;
        uint     m_bitangentOffset;
        uint     m_uvOffset;        
        float    m_padding0[2];

        float4   m_irradianceColor;
        float3x3 m_worldInvTranspose;
        float    m_padding1;

        uint     m_bufferFlags;
        uint     m_bufferStartIndex;
    };

    // hit shaders can retrieve the MeshInfo for a mesh hit using: RayTracingSceneSrg::m_meshInfo[InstanceIndex()]    
    StructuredBuffer<MeshInfo> m_meshInfo;
    
    // buffer array index offsets for buffers that are always present for each mesh
    #define MESH_INDEX_BUFFER_OFFSET        0
    #define MESH_POSITION_BUFFER_OFFSET     1
    #define MESH_NORMAL_BUFFER_OFFSET       2   

    // buffer flag bits indicating if optional buffers are present (note: these are bit masks)
    #define MESH_BUFFER_FLAG_TANGENT        (1 << 0)
    #define MESH_BUFFER_FLAG_BITANGENT      (1 << 1)
    #define MESH_BUFFER_FLAG_UV             (1 << 2)

    // Unbounded array of mesh stream buffers:
    // - Index, Position, Normal stream buffers are always present
    // - Optional stream buffers such as Tangent, Bitangent, and UV are indicated in the MeshInfo.m_bufferFlags field
    // - Buffers for a particular mesh start at MeshInfo.m_bufferStartIndex
    ByteAddressBuffer m_meshBuffers[];
}