/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#define ENABLE_TRANSMISSION     0

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#include <Atom/Features/PBR/Surfaces/StandardSurface.azsli>

#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Brdf.azsli>

// Then define the Diffuse and Specular lighting functions
real3 GetDiffuseLighting(Surface surface, LightingData lightingData, real3 lightIntensity, real3 dirToLight)
{
    real3 diffuse = DiffuseLambertian(surface.albedo, surface.normal, dirToLight, lightingData.diffuseResponse);

#if ENABLE_CLEAR_COAT
    if(o_clearCoat_feature_enabled)
    {
        // Attenuate diffuse term by clear coat's fresnel term to account for energy loss
        real HdotV = saturate(dot(normalize(dirToLight + lightingData.dirToCamera), lightingData.dirToCamera));
        diffuse *= 1.0 - (FresnelSchlick(HdotV, 0.04) * surface.clearCoat.factor);
    }
#endif
    
    diffuse *= lightIntensity;
    return diffuse;
}

real3 GetSpecularLighting(Surface surface, LightingData lightingData, const real3 lightIntensity, const real3 dirToLight)
{
    real3 specular = SpecularGGX(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);

#if ENABLE_CLEAR_COAT
    if(o_clearCoat_feature_enabled)
    {
        specular = ClearCoatSpecular(dirToLight, lightingData.dirToCamera, surface.clearCoat.normal, surface.clearCoat.factor, surface.clearCoat.roughness, specular);
    }
#endif

    specular *= lightIntensity;    
    return specular;
}


// Then include everything else
#include <Atom/Features/PBR/Lights/Lights.azsli>

struct PbrLightingOutput
{
    real4 m_diffuseColor;
    real4 m_specularColor;
    real4 m_albedo;
    real4 m_specularF0;
    real4 m_normal;
};


PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData, real alpha)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = real4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = real4(lightingData.specularLighting, 1.0);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = real4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = EncodeUnorm2BitFlags(o_enableIBL, o_specularF0_enableMultiScatterCompensation);
    
    return lightingOutput;
}

PbrLightingOutput DebugOutput(real3 color)
{
    PbrLightingOutput output = (PbrLightingOutput)0;

    real3 defaultNormal = real3(0.0, 0.0, 1.0);

    output.m_diffuseColor = real4(color.rgb, 1.0);
    output.m_normal.rgb = EncodeNormalSignedOctahedron(defaultNormal);

    return output;
}
