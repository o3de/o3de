/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#include <Atom/Features/PBR/Surfaces/StandardSurface.azsli>

// Then include everything else
#include <Atom/Features/PBR/Lights/Lights.azsli>
#include <Atom/Features/PBR/Lights/Ibl.azsli>


struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
    float4 m_clearCoatNormal;
    float3 m_scatterDistance;
};


PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData, float alpha)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = float4(lightingData.specularLighting, 1.0);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(surface.specularF0, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = o_specularF0_enableMultiScatterCompensation ? 1.0f : 0.0f;
    
    // layout: (packedNormal.x, packedNormal.y, strength factor, clear coat roughness (not base material's roughness))
    lightingOutput.m_clearCoatNormal = float4(EncodeNormalSphereMap(surface.clearCoat.normal), o_clearCoat_feature_enabled ? surface.clearCoat.factor : 0.0, surface.clearCoat.roughness);

    return lightingOutput;
}



