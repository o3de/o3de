/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/Shadow/ShadowmapAtlasLib.azsli>
#include <Atom/RPI/Math.azsli>
#include "BicubicPcfFilters.azsli"
#include "Shadow.azsli"
#include "NormalOffsetShadows.azsli"
#include "ESM.azsli"

// ProjectedShadow calculates shadowed area projected from a light.
class ProjectedShadow
{
    //////////
    // public method

    //! This calculates visibility of the surface from a light source.
    //! @param viewPosition position of the shadow casting view
    //! @param worldPosition surface position in the world coordinate.
    //! @return 1.0 if lit, 0.0 if shadowed.
    static float GetVisibility(
        uint shadowId,
        float3 viewPosition,
        float3 worldPosition,
        float3 lightDirection,
        float3 normalVector);

    static float GetThickness(uint shadowIndex, float3 worldPosition);

    //////////
    // private methods
    float GetVisibilityNoFilter();
    float GetVisibilityPcf();
    float GetVisibilityEsm();
    float GetVisibilityEsmPcf();
    float GetThickness();

    bool IsShadowed(float3 shadowPosition);
    void SetShadowPosition();
    float3 GetAtlasPosition(float2 texturePosition);
    static float UnprojectDepth(uint shadowIndex, float depthBufferValue);

    float3 m_viewPosition;
    uint m_shadowIndex;
    float3 m_worldPosition;
    float3 m_lightDirection;
    float3 m_normalVector;
    float3 m_shadowPosition;
    float m_bias;
};

float ProjectedShadow::GetVisibility(
    uint shadowIndex,
    float3 viewPosition, 
    float3 worldPosition,
    float3 lightDirection,
    float3 normalVector)
{
    // If no shadow, early return.
    if (shadowIndex == 0xFFFF)
    {
        return 1.0;
    }

    ProjectedShadow shadow;
    shadow.m_viewPosition = viewPosition;
    shadow.m_shadowIndex = shadowIndex;
    shadow.m_worldPosition = worldPosition;
    shadow.m_lightDirection = lightDirection;
    shadow.m_normalVector = normalVector;
    shadow.SetShadowPosition();

    float visibility = 1.;
    const uint filterMethod = ViewSrg::m_projectedShadows[shadow.m_shadowIndex].m_shadowFilterMethod;
    switch (filterMethod)
    {
        case ViewSrg::ShadowFilterMethodNone:
            visibility = shadow.GetVisibilityNoFilter();
            break;
        case ViewSrg::ShadowFilterMethodPcf:
            visibility = shadow.GetVisibilityPcf();
            break;
        case ViewSrg::ShadowFilterMethodEsm:
            visibility = shadow.GetVisibilityEsm();
            break;
        case ViewSrg::ShadowFilterMethodEsmPcf:
            visibility = shadow.GetVisibilityEsmPcf();
            break;
    }

    return saturate(visibility);
}    

float ProjectedShadow::UnprojectDepth(uint shadowIndex, float depthBufferValue)
{   
    // Unproject the perspective matrix that was built in ProjectedShadowFeatureProcessor.cpp
    // (Right-hand with non-reversed depth)
    // Should look something like the following:    
    // [... ... ... ...][x]
    // [... ... ... ...][y]
    // [... ...  A   B ][z]
    // [... ... -1  ...][1]
    // unprojectConstants contains the A and B values
    
    const float2 unprojectConstants = ViewSrg::m_projectedShadows[shadowIndex].m_unprojectConstants;
    return -unprojectConstants.y / (depthBufferValue + unprojectConstants.x);
}

float ProjectedShadow::GetThickness(uint shadowIndex, float3 worldPosition)
{
    // If no shadow, early return.
    if (shadowIndex == 0xFFFF)
    {
        return 0.0;
    }

    ProjectedShadow shadow;
    shadow.m_worldPosition = worldPosition;
    shadow.m_normalVector = 0; // The normal vector is used to reduce acne, this is not an issue when using the shadowmap to determine thickness. 
    shadow.m_shadowIndex = shadowIndex;
    shadow.SetShadowPosition();
    return shadow.GetThickness();
}

float ProjectedShadow::GetVisibilityNoFilter()
{
    return IsShadowed(m_shadowPosition) ? 0. : 1.;
}

float ProjectedShadow::GetVisibilityPcf()
{
    const uint filteringSampleCount = ViewSrg::m_projectedShadows[m_shadowIndex].m_filteringSampleCount;
    const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);   

    SampleShadowMapBicubicParameters param;
    param.shadowMap = PassSrg::m_projectedShadowmaps;
    param.shadowPos = float3(atlasPosition.xy * ViewSrg::m_invShadowmapAtlasSize, atlasPosition.z);
    param.shadowMapSize = ViewSrg::m_shadowmapAtlasSize;
    param.invShadowMapSize = ViewSrg::m_invShadowmapAtlasSize;
    param.comparisonValue = m_shadowPosition.z - m_bias;
    param.samplerState = SceneSrg::m_hwPcfSampler;

    if (filteringSampleCount <= 4)       
    {
        return SampleShadowMapBicubic_4Tap(param);
    }
    else if (filteringSampleCount <= 9)
    {
        return SampleShadowMapBicubic_9Tap(param);
    }
    else
    {
        return SampleShadowMapBicubic_16Tap(param);
    }
}

float ProjectedShadow::GetVisibilityEsm()
{
    static const float PixelMargin = 1.5; // avoiding artifact on the edge of shadowmap.

    const uint size = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 1.; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_projectedExponentialShadowmap;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 coefficients = float3(
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_n_f_n,
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_n_f,
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_f);
        if (coefficients.x == 0.) 
        {
            return 1.;
        }
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);
        const float depth = PerspectiveDepthToLinear(
            m_shadowPosition.z - m_bias, 
            coefficients);
            
        const float3 uv = float3(atlasPosition.xy * invAtlasSize, atlasPosition.z);
        const float esmExponent = ViewSrg::m_projectedShadows[m_shadowIndex].m_esmExponent;
        const float ratio = SampleESM(shadowmap, PassSrg::LinearSampler, uv, depth, esmExponent);

        // pow() mitigates light bleeding to shadows from near shadow casters.
        return saturate( pow(ratio, 8) );
    }

    return 1.;
}

float ProjectedShadow::GetVisibilityEsmPcf()
{
    static const float PixelMargin = 1.5; // avoiding artifact on the edge of shadowmap;

    const uint size = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 1.; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_projectedExponentialShadowmap;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 coefficients = float3(
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_n_f_n,
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_n_f,
            ViewSrg::m_projectedFilterParams[m_shadowIndex].m_f);
        if (coefficients.x == 0.)
        {
            return 1.;
        }
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);
        const float3 uv = float3(atlasPosition.xy * invAtlasSize, atlasPosition.z);
        const float depth = PerspectiveDepthToLinear(
            m_shadowPosition.z - m_bias,
            coefficients);
        
        const float esmExponent = ViewSrg::m_projectedShadows[m_shadowIndex].m_esmExponent;
        float ratio = SampleESM(shadowmap, PassSrg::LinearSampler, uv, depth, esmExponent);

        static const float pcfFallbackThreshold = 1.04;
        if (ratio > pcfFallbackThreshold)
        {
            ratio = PCFFallbackForESM(shadowmap, uv, depth, esmExponent);
        }
        else
        {
            // pow() mitigates light bleeding to shadows from near shadow casters.
            ratio = pow(ratio, 8);
        }
        return saturate(ratio);
    }

    return 1.;
}

float ProjectedShadow::GetThickness()
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.

    const uint size = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 0.;
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_projectedShadowmaps;

    if (m_shadowPosition.x >= 0 && m_shadowPosition.x * size < size - PixelMargin &&
        m_shadowPosition.y >= 0 && m_shadowPosition.y * size < size - PixelMargin)
    {
        const float3 atlasPosition = GetAtlasPosition(m_shadowPosition.xy);

        const float depthValue = shadowmap.SampleLevel(PassSrg::LinearSampler,
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z),
            /*LOD=*/0
            ).r;
        
        // Denormalized thickness (avoid negative values given by precision errors or shrinking offsets)
        const float viewSpaceThickness = max(UnprojectDepth(m_shadowIndex, depthValue) - UnprojectDepth(m_shadowIndex, m_shadowPosition.z), 0.0); 
        return viewSpaceThickness;    
    }

    return 0.;
}

bool ProjectedShadow::IsShadowed(float3 shadowPosition)
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.

    const uint size = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return false; // There is no shadowmap for this light.
    }

    const float invAtlasSize = ViewSrg::m_invShadowmapAtlasSize;
    const Texture2DArray<float> shadowmap = PassSrg::m_projectedShadowmaps;

    if (shadowPosition.x >= 0 && shadowPosition.x * size < size - PixelMargin &&
        shadowPosition.y >= 0 && shadowPosition.y * size < size - PixelMargin)
    {
        float3 atlasPosition = GetAtlasPosition(shadowPosition.xy);
        const float depthInShadowmap = shadowmap.SampleLevel(
            PassSrg::LinearSampler,
            float3(atlasPosition.xy * invAtlasSize, atlasPosition.z), /*LOD=*/0).r;
        const float depthDiff = depthInShadowmap - shadowPosition.z;

        if (depthDiff < -m_bias)
        {
            return true;
        }
    }

    return false;
}

void ProjectedShadow::SetShadowPosition()
{
    const float normalBias = ViewSrg::m_projectedShadows[m_shadowIndex].m_normalShadowBias;
    const float shadowmapSize = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    const float3 shadowOffset = ComputeNormalShadowOffset(normalBias, m_normalVector, shadowmapSize);
    const float4x4 depthBiasMatrix = ViewSrg::m_projectedShadows[m_shadowIndex].m_depthBiasMatrix;
    
    float4 shadowPositionHomogeneous = mul(depthBiasMatrix, float4(m_worldPosition + shadowOffset, 1));
         
    m_shadowPosition = shadowPositionHomogeneous.xyz / shadowPositionHomogeneous.w;
    
    m_bias = ViewSrg::m_projectedShadows[m_shadowIndex].m_bias / shadowPositionHomogeneous.w;
}

float3 ProjectedShadow::GetAtlasPosition(float2 texturePosition)
{
    const uint2 originInSlice = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapOriginInSlice;
    const uint shadowmapSize = ViewSrg::m_projectedFilterParams[m_shadowIndex].m_shadowmapSize;
    const uint slice = ViewSrg::m_projectedShadows[m_shadowIndex].m_shadowmapArraySlice;

    const float2 coordInTexture = texturePosition * shadowmapSize + originInSlice;

    return float3(coordInTexture, slice);
}
