/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
enum class ShadowFilterMethod {None, Pcf, Esm, EsmPcf};

// avoiding artifact between cascade levels.
#define PIXEL_MARGIN (1.5)

// avoiding artifact when near depth bounds.
#define DEPTH_MARGIN (1e-8)

// Call GetVisibility() to determine if an object is shadowed by a directional light.
// The reason this is a standalone class is because it can be used either in a Forward Shader or in a fullscreen pass shader.
class DirectionalShadowCalculator 
{
    void SetBlendBetweenCascadesEnable(const bool enable)
    {
        m_blendBetweenCascadesEnable = enable;
    }
    
    void SetShadowmaps(Texture2DArray<float> dirShadowMap, Texture2DArray<float> expShadowmap)
    {
        m_directionalLightShadowmap = dirShadowMap;   
        m_directionalLightExponentialShadowmap = expShadowmap;        
    }

    void SetReceiverShadowPlaneBiasEnable(const bool enable)
    {
        m_receiverShadowPlaneBiasEnable = enable;
    }

    void SetWorldNormal(const float3 worldNormal)
    {
        m_worldNormal = worldNormal;
    }
    
    void SetWorldPos(const float3 worldPos)
    {
        m_worldPos = worldPos;
    }
    
    void SetLightIndex(const int lightIndex)
    {
        m_lightIndex = lightIndex;    
    }
    
    void SetFilterMode(const ShadowFilterMethod filterMode)
    {
        m_filterMode = filterMode;
    }

    
    bool IsShadowCoordInCascade(float3 shadowCoord, uint shadowMapSize);

    float GetVisibility();    
    float GetThickness();
    
    float GetVisibilityFromLightNoFilter();  
    float SamplePcfBicubic(const float3 shadowCoord, const uint indexOfCascade);     
    float GetVisibilityFromLightPcf();            
    float GetVisibilityFromLightEsm();    
    float GetVisibilityFromLightEsmPcf();
    float CalculateCascadeBlendAmount(const float3 texCoord);
    bool2 IsShadowed(const float3 shadowCoord, const uint indexOfCascade); 
    void ComputeShadowCoords();
    
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount];
    float m_slopeBias[ViewSrg::MaxCascadeCount];
    float3 m_shadowPosDX[ViewSrg::MaxCascadeCount];
    float3 m_shadowPosDY[ViewSrg::MaxCascadeCount];
    float3 m_worldNormal;
    float3 m_worldPos;

    bool m_receiverShadowPlaneBiasEnable;
    bool m_blendBetweenCascadesEnable;

    int m_lightIndex;
    int m_cascadeIndex;
    ShadowFilterMethod m_filterMode;

    Texture2DArray<float> m_directionalLightShadowmap;   
    Texture2DArray<float> m_directionalLightExponentialShadowmap;        
};

bool DirectionalShadowCalculator::IsShadowCoordInCascade(float3 shadowCoord, uint shadowMapSize)
{
    return (shadowCoord.x >= 0. && shadowCoord.x * shadowMapSize < shadowMapSize - PIXEL_MARGIN &&
            shadowCoord.y >= 0. && shadowCoord.y * shadowMapSize < shadowMapSize - PIXEL_MARGIN &&
            shadowCoord.z < (1. - DEPTH_MARGIN));       // Test the case where the shadowed pixel is nearer than the maximal depth
                                                        // of the cascade.  Otherwise, escalate the next cascade.
}

float DirectionalShadowCalculator::GetThickness()
{
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 0.;
    }

    Texture2DArray<float> shadowmap = m_directionalLightShadowmap;
    
    if(m_cascadeIndex >= 0)
    {  
        float3 shadowCoord = m_shadowCoords[m_cascadeIndex];
        if (IsShadowCoordInCascade(shadowCoord, size))
        {
            const float depthBufferValue = shadowmap.Sample(PassSrg::LinearSampler, float3(shadowCoord.xy, m_cascadeIndex)).r;
            
            // Normalized thickness (avoid negative values given by precision errors or shrinking offsets)
            const float deltaDepth = max(shadowCoord.z - depthBufferValue,0.0);

            const float viewSpaceThickness = ViewSrg::m_directionalLightShadows[m_lightIndex].m_far_minus_near * deltaDepth;            
            return viewSpaceThickness;
        }
    }

    return 0.;
}

void DirectionalShadowCalculator::ComputeShadowCoords()
{
    const float shadowBias = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowBias;

    const float4x4 lightViewToShadowmapMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[m_lightIndex].m_lightViewToShadowmapMatrices;
    const float4x4 worldToLightViewMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[m_lightIndex].m_worldToLightViewMatrices;

    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    const float3 shadowOffset = ComputeNormalShadowOffset(ViewSrg::m_directionalLightShadows[m_lightIndex].m_normalShadowBias, m_worldNormal, ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize);

    m_cascadeIndex = -1;
    for (uint index = 0; index < cascadeCount; ++index)
    {        
        float4 lightSpacePos = mul(worldToLightViewMatrices[index], float4(m_worldPos + shadowOffset, 1.));
        lightSpacePos.z += shadowBias;
        
        const float4 clipSpacePos = mul(lightViewToShadowmapMatrices[index], lightSpacePos);                
        m_shadowCoords[index] = clipSpacePos.xyz / clipSpacePos.w;

        // Cache Cascade index
        if(IsShadowCoordInCascade(m_shadowCoords[index], size) && m_cascadeIndex < 0)
        {
            m_cascadeIndex = index;
        }
    }
            
    if (m_receiverShadowPlaneBiasEnable)
    {
        [unroll]
        for(int i = 0 ; i < ViewSrg::MaxCascadeCount ; ++i)
        {
            m_shadowPosDX[i] = ddx_fine(m_shadowCoords[i]);
            m_shadowPosDY[i] = ddy_fine(m_shadowCoords[i]);        
        }    
    }        
}

bool2 DirectionalShadowCalculator::IsShadowed(const float3 shadowCoord, const uint indexOfCascade)
{
    // size is the shadowap's width and height.
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;

    [branch]
    if (IsShadowCoordInCascade(shadowCoord, size))
    {
        const float3 coord = float3(shadowCoord.xy, indexOfCascade);
        const float depthInShadowmap = m_directionalLightShadowmap.Sample(PassSrg::LinearSampler, coord).r;
        const float depthDiff = shadowCoord.z - depthInShadowmap;
        return bool2(true, (depthDiff > m_slopeBias[indexOfCascade]));
    }
    return bool2(false, false);
}

float DirectionalShadowCalculator::GetVisibility()
{   
    ComputeShadowCoords();

    // Todo: slope bias exhibits noticeable artifacts, especially with sharp normal values derived from fullscreen
    // depth values which accentuate geometry polygons. Revisit the math and determine if this can be remedied or
    // whether it should be removed altogether. In the meantime, normal shadow bias is plenty capable.
    static const bool useSlopeBias = false;

    if(useSlopeBias)
    {
        // N.L early out
        const float3 lightDirection = normalize(SceneSrg::m_directionalLights[m_lightIndex].m_direction);
        float NdotL = dot(m_worldNormal, -lightDirection);    

        if(NdotL <= -0.01)
        {
            return 0;
        }
    
        // Calculate slope bias
        NdotL = max(NdotL, 0.01);
        const float sinTheta = sqrt(1 - NdotL * NdotL);
        const float tanTheta = sinTheta / NdotL;
        for (uint cascadeIndex = 0; cascadeIndex < ViewSrg::MaxCascadeCount; ++cascadeIndex)
        {
            const float slopeBiasBase = ViewSrg::m_directionalLightShadows[m_lightIndex].m_slopeBiasBase[cascadeIndex];
            m_slopeBias[cascadeIndex] = slopeBiasBase * tanTheta;
        }
    }
    else
    {
        for (uint cascadeIndex = 0; cascadeIndex < ViewSrg::MaxCascadeCount; ++cascadeIndex)
        {
            m_slopeBias[cascadeIndex] = 0;
        }
    }

    float lit = 1;
    switch(m_filterMode)
    {
        case ShadowFilterMethod::None:
            lit = GetVisibilityFromLightNoFilter();
            break;
        case ShadowFilterMethod::Pcf:
            lit = GetVisibilityFromLightPcf();
            break;
        case ShadowFilterMethod::Esm:
            lit = GetVisibilityFromLightEsm();
            break;
        case ShadowFilterMethod::EsmPcf:
            lit = GetVisibilityFromLightEsmPcf();
            break;
    }
                
    return lit;
}

float DirectionalShadowCalculator::GetVisibilityFromLightNoFilter()
{       
    if (m_cascadeIndex >= 0)
    {
        const bool2 checkedShadowed = IsShadowed(m_shadowCoords[m_cascadeIndex], m_cascadeIndex);

        if (checkedShadowed.x)
        {
            return checkedShadowed.y ? 0. : 1.;
        }
    }
    return 1.;
}    

float DirectionalShadowCalculator::SamplePcfBicubic(const float3 shadowCoord, const uint indexOfCascade)
{
    const uint filteringSampleCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_filteringSampleCount;
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    
    SampleShadowMapBicubicParameters param;
    param.shadowMap = m_directionalLightShadowmap;
    param.shadowPos = float3(shadowCoord.xy, indexOfCascade);
    param.shadowMapSize = size;
    param.invShadowMapSize = rcp(size); 
    param.comparisonValue = shadowCoord.z;
    param.samplerState = SceneSrg::m_hwPcfSampler;
    param.receiverPlaneDepthBias = m_receiverShadowPlaneBiasEnable ? ComputeReceiverPlaneDepthBias(m_shadowPosDX[indexOfCascade], m_shadowPosDY[indexOfCascade]) : 0;
    
    [branch]     
    if (filteringSampleCount <= 4)       
    {
        return SampleShadowMapBicubic_4Tap(param);
    }
    else if (filteringSampleCount <= 9)
    {
        return SampleShadowMapBicubic_9Tap(param);
    }
    else
    {
        return SampleShadowMapBicubic_16Tap(param);
    }
}

float DirectionalShadowCalculator::GetVisibilityFromLightPcf()
{   
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;

    [branch]
    if (m_cascadeIndex >= 0)
    {
        float lit = SamplePcfBicubic(m_shadowCoords[m_cascadeIndex], m_cascadeIndex);
        
        if(m_blendBetweenCascadesEnable) 
        {  
            const float blendBetweenCascadesAmount = CalculateCascadeBlendAmount(m_shadowCoords[m_cascadeIndex].xyz);

            const int nextCascadeIndex = m_cascadeIndex + 1;
            [branch]
            if (blendBetweenCascadesAmount < 1.0f && nextCascadeIndex < cascadeCount)
            {
                const float nextLit = SamplePcfBicubic(m_shadowCoords[nextCascadeIndex], nextCascadeIndex);
                lit = lerp(nextLit, lit, blendBetweenCascadesAmount);             
            }
        } 

        return lit;
    }

    return 1.;
} 

float DirectionalShadowCalculator::GetVisibilityFromLightEsm()
{
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;

    for (uint indexOfCascade = m_cascadeIndex; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        bool2 checkedShadowed = IsShadowed(shadowCoord, indexOfCascade);
        const float depthDiff = shadowCoord.z - distanceMin;
    
        [branch]
        if (checkedShadowed.x && depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = m_directionalLightExponentialShadowmap.Sample(PassSrg::LinearSampler, coord).r;                        
            const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
            const float ratio = exp(exponent);

            return saturate(ratio);
        }
    }
    return 1.;
}

float DirectionalShadowCalculator::GetVisibilityFromLightEsmPcf()
{
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;

    for (uint indexOfCascade = m_cascadeIndex; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        bool2 checkedShadowed = IsShadowed(shadowCoord, indexOfCascade);
        const float depthDiff = shadowCoord.z - distanceMin;
    
        [branch]
        if (checkedShadowed.x && depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = m_directionalLightExponentialShadowmap.Sample(PassSrg::LinearSampler, coord).r;
            const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
            float ratio = exp(exponent);

            static const float pcfFallbackThreshold = 1.04;
            if (ratio > pcfFallbackThreshold)
            {
                ratio = GetVisibilityFromLightPcf();
            }
            return saturate(ratio);
        }
    }
    return 1.;
}


float DirectionalShadowCalculator::CalculateCascadeBlendAmount(const float3 texCoord)
{
    const float CascadeBlendArea = 0.015f; // might be worth exposing this as a slider.

    const float distanceToOneMin = min3(1.0f - texCoord);
    const float currentPixelsBlendBandLocation = min(min(texCoord.x, texCoord.y), distanceToOneMin);
    return currentPixelsBlendBandLocation / CascadeBlendArea;
}