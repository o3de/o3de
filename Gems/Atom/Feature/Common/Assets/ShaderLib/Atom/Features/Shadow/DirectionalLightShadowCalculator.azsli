/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#ifndef USING_COMPUTE_SHADER_DIRECTIONAL_LIGHT
#define USING_COMPUTE_SHADER_DIRECTIONAL_LIGHT 0
#endif

enum class ShadowFilterMethod {None, Pcf, Esm, EsmPcf};

// avoiding artifact between cascade levels.
#define PIXEL_MARGIN (1.5)

// avoiding artifact when near depth bounds.
#define DEPTH_MARGIN (1e-8)
#define ESM_CASCADE_MARGIN (1.0 - 1e-3)

// Call GetVisibility() to determine if an object is shadowed by a directional light.
// The reason this is a standalone class is because it can be used either in a Forward Shader or in a fullscreen pass shader.
class DirectionalShadowCalculator 
{
    void SetBlendBetweenCascadesEnable(const bool enable)
    {
        m_blendBetweenCascadesEnable = enable;
    }

    void SetShadowmaps(Texture2DArray<float> dirShadowMap, Texture2DArray<float> expShadowmap)
    {
        m_directionalLightShadowmap = dirShadowMap;
        m_directionalLightExponentialShadowmap = expShadowmap;
    }

    void SetReceiverShadowPlaneBiasEnable(const bool enable)
    {
        m_receiverShadowPlaneBiasEnable = enable;
    }

    void SetWorldNormal(const float3 worldNormal)
    {
        m_worldNormal = worldNormal;
    }

    void SetWorldPos(const float3 worldPos)
    {
        m_worldPos = worldPos;
    }

    void SetLightIndex(const int lightIndex)
    {
        m_lightIndex = lightIndex;
    }

    void SetFilterMode(const ShadowFilterMethod filterMode)
    {
        m_filterMode = filterMode;
    }

    void GetShadowCascadeRange(float3 shadowCoords[ViewSrg::MaxCascadeCount], int cascadeCount, uint shadowmapSize, out int minShadowCascade, out int maxShadowCascade);
    float GetVisibility();
    float GetThickness();

    float GetVisibilityFromLightNoFilter();
    float SamplePcfBicubic(const float3 shadowCoord, const int indexOfCascade);
    float GetVisibilityFromLightPcf();
    float GetVisibilityFromLightEsm();
    float GetVisibilityFromLightEsmPcf();
    float CalculateCascadeBlendAmount(const float3 texCoord);
    bool IsShadowed(const int indexOfCascade);
    void ComputeShadowCoords();

    float3 m_shadowCoords[ViewSrg::MaxCascadeCount];
    float m_slopeBias[ViewSrg::MaxCascadeCount];
    float3 m_shadowPosDX[ViewSrg::MaxCascadeCount];
    float3 m_shadowPosDY[ViewSrg::MaxCascadeCount];
    float3 m_worldNormal;
    float3 m_worldPos;

    bool m_receiverShadowPlaneBiasEnable;
    bool m_blendBetweenCascadesEnable;

    int m_lightIndex;
    int m_minCascade;
    int m_maxCascade;
    int m_cascadeCount;
    ShadowFilterMethod m_filterMode;

    Texture2DArray<float> m_directionalLightShadowmap;   
    Texture2DArray<float> m_directionalLightExponentialShadowmap;        
};

// Find all shadow cascades which could affect a sample. Typically min and max will be the same, however in cases where the view direction lines up with the 
// light direction, and the sample is far away, there may be several cascades which could contain occluders for that sample. This is important because
// shadow cascades might not render objects in them which are already covered in smaller cascades.
void DirectionalShadowCalculator::GetShadowCascadeRange(float3 shadowCoords[ViewSrg::MaxCascadeCount], int cascadeCount, uint shadowmapSize, out int minShadowCascade, out int maxShadowCascade)
{
    float xyMax = shadowmapSize - PIXEL_MARGIN;
    float xyMin = PIXEL_MARGIN;

    // Initilaize min/max to -1. If the sample isn't inside any cascade, then -1 will result in no shadowing.
    minShadowCascade = -1;
    maxShadowCascade = -1;

    for (int index = 0; index < m_cascadeCount; ++index)
    {
        float3 shadowCoord = shadowCoords[index];
        shadowCoord.xy *= shadowmapSize;
        if (all(shadowCoord.xy >= xyMin) && all(shadowCoord.xy <= xyMax))
        {
            // The shadow coord is inside the shadow frustum in the xy direction. Subsequent shadow cascades will be larger,
            // so they do not need to be explicitly checked in the xy direction.
            minShadowCascade = index;

            // Continue searching for max cascade if this shadow coord's depth is beyond the min cascade (ie, the light ray
            // passes through this shadow frustum before hitting the sample). For most pixels, the shadow coord's z will already
            // be within the frustum's z extent and this loop will not execute.
            while (index < m_cascadeCount && shadowCoords[index].z > (1.0 - DEPTH_MARGIN))
            {
                ++index;
            }
            maxShadowCascade = index;
            break;
        }
    }
}

float DirectionalShadowCalculator::GetThickness()
{
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 0.;
    }

    Texture2DArray<float> shadowmap = m_directionalLightShadowmap;
    
    if(m_maxCascade >= 0)
    {
        float3 shadowCoord = m_shadowCoords[m_maxCascade];
        
        float depthBufferValue = 1.0;
        for (int cascade = m_minCascade; cascade <= m_maxCascade && depthBufferValue == 1.0; ++cascade)
        {
            depthBufferValue = shadowmap.SampleLevel(PassSrg::PointSampler, float3(shadowCoord.xy, m_maxCascade), 0).r;
        }

        // Normalized thickness (avoid negative values given by precision errors or shrinking offsets)
        const float deltaDepth = max(shadowCoord.z - depthBufferValue, 0.0);

        const float viewSpaceThickness = ViewSrg::m_directionalLightShadows[m_lightIndex].m_far_minus_near * deltaDepth;
        return viewSpaceThickness;
    }

    return 0.;
}

void DirectionalShadowCalculator::ComputeShadowCoords()
{
    const float shadowBias = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowBias;

    const float4x4 lightViewToShadowmapMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[m_lightIndex].m_lightViewToShadowmapMatrices;
    const float4x4 worldToLightViewMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[m_lightIndex].m_worldToLightViewMatrices;

    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const float3 shadowOffset = ComputeNormalShadowOffset(ViewSrg::m_directionalLightShadows[m_lightIndex].m_normalShadowBias, m_worldNormal, size);

    m_cascadeCount = min(ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount, ViewSrg::MaxCascadeCount);
    
    for (int index = 0; index < m_cascadeCount; ++index)
    {
        float4 lightSpacePos = mul(worldToLightViewMatrices[index], float4(m_worldPos + shadowOffset, 1.));
        lightSpacePos.z += shadowBias;

        const float4 clipSpacePos = mul(lightViewToShadowmapMatrices[index], lightSpacePos);
        m_shadowCoords[index] = clipSpacePos.xyz / clipSpacePos.w;
    }

    GetShadowCascadeRange(m_shadowCoords, m_cascadeCount, size, m_minCascade, m_maxCascade);

// Todo: No ddx in compute, find a way to leverage world space normal for this
#if !USING_COMPUTE_SHADER_DIRECTIONAL_LIGHT
    if (m_receiverShadowPlaneBiasEnable)
    {
        for(int i = 0 ; i < m_cascadeCount; ++i)
        {
            m_shadowPosDX[i] = ddx_fine(m_shadowCoords[i]);
            m_shadowPosDY[i] = ddy_fine(m_shadowCoords[i]);
        }
    }
#endif
}

bool DirectionalShadowCalculator::IsShadowed(const int indexOfCascade)
{
    const float3 shadowCoord = m_shadowCoords[indexOfCascade];
    const float3 coord = float3(shadowCoord.xy, indexOfCascade);
    const float depthInShadowmap = m_directionalLightShadowmap.SampleLevel(PassSrg::PointSampler, coord, 0).r;
    const float depthDiff = shadowCoord.z - depthInShadowmap;
    return depthInShadowmap != 1.0 && depthDiff > m_slopeBias[indexOfCascade];
}

float DirectionalShadowCalculator::GetVisibility()
{
    ComputeShadowCoords();

    float lit = 1.0;

    [branch]
    if (m_maxCascade < 0)
    {
        return lit;
    }

    // Todo: slope bias exhibits noticeable artifacts, especially with sharp normal values derived from fullscreen
    // depth values which accentuate geometry polygons. Revisit the math and determine if this can be remedied or
    // whether it should be removed altogether. In the meantime, normal shadow bias is plenty capable.
    static const bool useSlopeBias = false;

    if(useSlopeBias)
    {
        // N.L early out
        const float3 lightDirection = normalize(SceneSrg::m_directionalLights[m_lightIndex].m_direction);
        float NdotL = dot(m_worldNormal, -lightDirection);    

        if(NdotL <= -0.01)
        {
            return 0;
        }

        // Calculate slope bias
        NdotL = max(NdotL, 0.01);
        const float sinTheta = sqrt(1 - NdotL * NdotL);
        const float tanTheta = sinTheta / NdotL;
        for (int cascadeIndex = 0; cascadeIndex < m_cascadeCount; ++cascadeIndex)
        {
            const float slopeBiasBase = ViewSrg::m_directionalLightShadows[m_lightIndex].m_slopeBiasBase[cascadeIndex];
            m_slopeBias[cascadeIndex] = slopeBiasBase * tanTheta;
        }
    }
    else
    {
        for (int cascadeIndex = 0; cascadeIndex < m_cascadeCount; ++cascadeIndex)
        {
            m_slopeBias[cascadeIndex] = 0;
        }
    }

    switch(m_filterMode)
    {
        case ShadowFilterMethod::None:
            lit = GetVisibilityFromLightNoFilter();
            break;
        case ShadowFilterMethod::Pcf:
            lit = GetVisibilityFromLightPcf();
            break;
        case ShadowFilterMethod::Esm:
            lit = GetVisibilityFromLightEsm();
            break;
        case ShadowFilterMethod::EsmPcf:
            lit = GetVisibilityFromLightEsmPcf();
            break;
    }

    return lit;
}

float DirectionalShadowCalculator::GetVisibilityFromLightNoFilter()
{
    for (int cascade = m_minCascade; cascade <= m_maxCascade; ++cascade)
    {
        if (IsShadowed(cascade))
        {
            return 0.0;
        }
    }
    return 1.0;
}

float DirectionalShadowCalculator::SamplePcfBicubic(const float3 shadowCoord, const int indexOfCascade)
{
    const uint filteringSampleCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_filteringSampleCount;
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    
    SampleShadowMapBicubicParameters param;
    param.shadowMap = m_directionalLightShadowmap;
    param.shadowPos = float3(shadowCoord.xy, indexOfCascade);
    param.shadowMapSize = size;
    param.invShadowMapSize = rcp(size); 
    param.comparisonValue = shadowCoord.z;
    param.samplerState = SceneSrg::m_hwPcfSampler;

#if USING_COMPUTE_SHADER_DIRECTIONAL_LIGHT
    param.receiverPlaneDepthBias = 0;
#else
    param.receiverPlaneDepthBias = m_receiverShadowPlaneBiasEnable ? ComputeReceiverPlaneDepthBias(m_shadowPosDX[indexOfCascade], m_shadowPosDY[indexOfCascade]) : 0;
#endif
    
    [branch]
    if (filteringSampleCount <= 4)
    {
        return SampleShadowMapBicubic_4Tap(param);
    }
    else if (filteringSampleCount <= 9)
    {
        return SampleShadowMapBicubic_9Tap(param);
    }
    else
    {
        return SampleShadowMapBicubic_16Tap(param);
    }
}

float DirectionalShadowCalculator::GetVisibilityFromLightPcf()
{
    float lit = 1.0;
    for (int indexOfCascade = m_minCascade; indexOfCascade <= m_maxCascade && lit > 0.01; ++indexOfCascade)
    {
        lit = min(lit, SamplePcfBicubic(m_shadowCoords[indexOfCascade], indexOfCascade));
    }

    if(m_blendBetweenCascadesEnable) 
    {
        const float blendBetweenCascadesAmount = CalculateCascadeBlendAmount(m_shadowCoords[m_maxCascade].xyz);

        const int nextCascadeIndex = m_maxCascade + 1;
        [branch]
        if (blendBetweenCascadesAmount < 1.0f && nextCascadeIndex < m_cascadeCount)
        {
            const float nextLit = SamplePcfBicubic(m_shadowCoords[nextCascadeIndex], nextCascadeIndex);
            lit = lerp(nextLit, lit, blendBetweenCascadesAmount);
        }
    } 

    return lit;
} 

float DirectionalShadowCalculator::GetVisibilityFromLightEsm()
{
    for (int indexOfCascade = m_minCascade; indexOfCascade <= m_maxCascade; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        const float depthDiff = shadowCoord.z - distanceMin;

        [branch]
        if (depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = m_directionalLightExponentialShadowmap.SampleLevel(PassSrg::LinearSampler, coord, 0).r;
            if (occluder < ESM_CASCADE_MARGIN)
            {
                const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
                const float ratio = exp(exponent);
                return saturate(ratio);
            }
        }
    }
    return 1.;
}

float DirectionalShadowCalculator::GetVisibilityFromLightEsmPcf()
{
    for (int indexOfCascade = m_minCascade; indexOfCascade <= m_maxCascade; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        const float depthDiff = shadowCoord.z - distanceMin;

        [branch]
        if (depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = m_directionalLightExponentialShadowmap.SampleLevel(PassSrg::LinearSampler, coord, 0).r;
            
            if (occluder < ESM_CASCADE_MARGIN)
            {
                const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
                float ratio = exp(exponent);

                static const float pcfFallbackThreshold = 1.04;
                if (ratio > pcfFallbackThreshold)
                {
                    ratio = SamplePcfBicubic(shadowCoord, indexOfCascade);
                }
                return saturate(ratio);
            }
        }
    }
    return 1.;
}

float DirectionalShadowCalculator::CalculateCascadeBlendAmount(const float3 texCoord)
{
    const float CascadeBlendArea = 0.015f; // might be worth exposing this as a slider.

    const float distanceToOneMin = min3(1.0f - texCoord);
    const float currentPixelsBlendBandLocation = min(min(texCoord.x, texCoord.y), distanceToOneMin);
    return currentPixelsBlendBandLocation / CascadeBlendArea;
}
