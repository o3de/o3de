/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#if ENABLE_TRANSMISSION

class TransmissionSurfaceData
{
    real3 tint;
    real thickness;                 //!< pre baked local thickness, used for transmission
    real4 transmissionParams;       //!< parameters: thick mode->(attenuation coefficient, power, distortion, scale), thin mode:  (shrinkFactor, transmissionNdLBias, distanceAttenuation, scale)
    real3 scatterDistance;          //!< scatter distance (same as in MaterialSrg) > 

    void InitializeToZero();

    // ----- Thick mode getters -----

    real GetAttenuationCoefficient() { return transmissionParams.x; }
    real GetPower() { return transmissionParams.y; }
    real GetDistortion() { return transmissionParams.z; }

    // ----- Thin mode getters -----

    // Shrink (absolute) offset towards the normal opposite direction to ensure correct shadow map projection
    real GetShrinkFactor() { return transmissionParams.x; }

    // (N . L) to accept below (N . L = 0) in scattering through thin objects
    real GetTransmissionNdLBias() { return transmissionParams.y; }

    // Attenuation applied to hide artifacts due to low-res shadow maps 
    real GetDistanceAttenuation() { return transmissionParams.z; }

    // ----- Common getters -----

    real GetScale() { return transmissionParams.w; }
};

void TransmissionSurfaceData::InitializeToZero()
{
    tint = real3(0.0, 0.0, 0.0);
    thickness = 0.0f;
    transmissionParams = real4(0.0, 0.0, 0.0, 0.0);
    scatterDistance = real3(0.0, 0.0, 0.0);
}

#endif
