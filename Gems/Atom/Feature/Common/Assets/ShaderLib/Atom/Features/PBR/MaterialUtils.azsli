/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/RPI/Math.azsli>
#include <Atom/Features/PBR/SpecularAA.azsli>

// For artists workflows, specular F0 for dialectric (non-metal) materials is exposed as a 0-1 scale
// However the specular F0 for dialectrics is much lower than metals, so we expose this scaling factor here
static const float3 MaxDielectricSpecularF0 = 0.08f;

// Make sure roughnessA is above 0 to avoid precision and divide by zero issues.
// 0.0005f is sufficient for directional lights since they tend to be quite bright.
static const float MinRoughnessA = 0.0005f;


// The roughness value in microfacet calculations (called "alpha" in the literature) does not give perceptually
// linear results. Disney found that squaring the roughness value before using it in microfacet equations causes
// the user-provided roughness parameter to be more perceptually linear. We keep both values available as some
// equations need roughnessLinear (i.e. IBL sampling) while others need roughnessA (i.e. GGX equations).
// See Burley's Disney PBR: https://pdfs.semanticscholar.org/eeee/3b125c09044d3e2f58ed0e4b1b66a677886d.pdf
void CalculateRoughnessValues(float3 normal, inout float roughnessLinear, out float roughnessA, out float roughnessA2)
{
    roughnessA = max( Pow2(roughnessLinear), MinRoughnessA);
    roughnessA2 = Pow2(roughnessA);

    if(o_applySpecularAA)
    {
        roughnessA2 = CalculateSpecularAA(normal, roughnessA2);

        // Apply backwards so we get consistent behavior (for things like lookup tables for example)
        roughnessA = sqrt(roughnessA2);
        roughnessLinear = sqrt(roughnessA);
    }
}

float3 GetAlbedo(float3 baseColor, float metallic)
{
    return baseColor * (1.0f - metallic);
}

float3 GetSpecularF0(float3 baseColor, float metallic, float specularF0Factor)
{
    float3 dielectricSpecularF0 = MaxDielectricSpecularF0 * specularF0Factor;
    return lerp(dielectricSpecularF0, baseColor, metallic);
}
