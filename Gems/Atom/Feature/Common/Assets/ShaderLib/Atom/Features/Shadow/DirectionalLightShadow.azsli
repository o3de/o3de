/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include "Shadow.azsli"
#include "ShadowmapAtlasLib.azsli"
#include "BicubicPcfFilters.azsli"
#include "ReceiverPlaneDepthBias.azsli"
#include "NormalOffsetShadows.azsli"

// Before including this azsli file, a PassSrg must be defined with the following members:
// Texture2DArray<float> m_directionalLightShadowmap;
// Texture2DArray<float> m_directionalLightExponentialShadowmap;
// Sampler LinearSampler;

// This matchs ShadowFilterMethod in ShadowConstants.h
enum class ShadowFilterMethod {None, Pcf, Esm, EsmPcf};
option ShadowFilterMethod o_directional_shadow_filtering_method = ShadowFilterMethod::None;
option bool o_directional_shadow_receiver_plane_bias_enable = true;

// DirectionalLightShadow calculates lit ratio for a directional light.
class DirectionalLightShadow
{
    struct DebugInfo
    {
        uint m_cascadeIndex; // cascade index where lit ratio determined.
        bool m_usePcfFallback;
    };

    //////////
    // public method

    //! This calculates the shadow coordinate for each cascade.
    //! This can be called from vertex shaders.
    //! @param lightIndex directional light index.
    //! @param worldPosition position of the surface in the world space.
    //! @param shadowCoords calculated shadow coordinates.
    static void GetShadowCoords(
        uint lightIndex,
        float3 worldPosition,
        float3 worldNormal,
        out float3 shadowCoords[ViewSrg::MaxCascadeCount]);

    //! This calculates visibility ratio of the surface from the light origin.
    //! This should be called from fragment shaders.
    //! @param lightIndex directional light index.
    //! @param shadowCoords shadow coordinates of the surface for each cascade.
    //! @param normalVector normal vector of the surface in world space.
    //! @param debugInfo information used in debug coloring.
    //! @return lit ratio from the light (1.0 is fully visible).
    static float GetVisibility(
        uint lightIndex,
        float3 shadowCoords[ViewSrg::MaxCascadeCount],
        float3 normalVector,
        out DebugInfo debugInfo);

    static float GetThickness(uint lightIndex, float3 shadowCoords[ViewSrg::MaxCascadeCount]);

    //! This alters the input color to visualize which cascade is being used
    //! and whether PCF is used as a fallback in ESM+PCF mode or not.
    //! @param color input color.
    //! @param lightIndex directional light index.
    //! @param debugInfo information of used cascade and PCF is used in ESM+PCF mode.
    //! @return resulting color.
    static float3 AddDebugColoring(
        float3 color, 
        uint lightIndex,
        DebugInfo debugInfo);

    //////////
    // private methods

    // This checks if the point from the given coordinate is shadowed or not.
    // result.x == true if the shadowCoord falls within the cascade.
    // result.y == true if the given coordinate is in shadow.
    bool2 IsShadowed(float3 shadowCoord, uint indexOfCascade);

    // This outputs visibility ratio (from 0.0 to 1.0) of the given coordinate
    // from the light origin without filtering.
    float GetVisibilityFromLightNoFilter();

    // This outputs visibility ratio (from 0.0 to 1.0) for PCF.
    float GetVisibilityFromLightPcf();

    // This outputs visibility ratio (from 0.0 to 1.0) for ESM.
    float GetVisibilityFromLightEsm();

    // This outputs visibility ratio (from 0.0 to 1.0) for ESM+PCF.
    float GetVisibilityFromLightEsmPcf();

    float SamplePcfBicubic(float3 shadowCoord, uint indexOfCascade);

    uint m_lightIndex;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount];
    float m_slopeBias[ViewSrg::MaxCascadeCount];
    float3 m_normalVector;
    DebugInfo m_debugInfo;
    float3 m_shadowPosDX[ViewSrg::MaxCascadeCount];
    float3 m_shadowPosDY[ViewSrg::MaxCascadeCount];
};

// This outputs the coordinate in shadowmap Texture space of the given point.
void DirectionalLightShadow::GetShadowCoords(
    uint lightIndex,
    float3 worldPosition,
    float3 worldNormal,
    out float3 shadowCoords[ViewSrg::MaxCascadeCount])
{
    const float shadowBias = ViewSrg::m_directionalLightShadows[lightIndex].m_shadowBias;

    const float4x4 lightViewToShadowmapMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[lightIndex].m_lightViewToShadowmapMatrices;
    const float4x4 worldToLightViewMatrices[ViewSrg::MaxCascadeCount] = ViewSrg::m_directionalLightShadows[lightIndex].m_worldToLightViewMatrices;

    const uint cascadeCount = ViewSrg::m_directionalLightShadows[lightIndex].m_cascadeCount;
    const float3 shadowOffset = ComputeNormalShadowOffset(ViewSrg::m_directionalLightShadows[lightIndex].m_normalShadowBias, worldNormal, ViewSrg::m_directionalLightShadows[lightIndex].m_shadowmapSize);

    for (uint index = 0; index < cascadeCount; ++index)
    {        
        float4 lightSpacePos = mul(worldToLightViewMatrices[index], float4(worldPosition + shadowOffset, 1.));
        lightSpacePos.z += shadowBias;
        
        const float4 clipSpacePos = mul(lightViewToShadowmapMatrices[index], lightSpacePos);                
        shadowCoords[index] = clipSpacePos.xyz / clipSpacePos.w;
    }
}

float DirectionalLightShadow::GetThickness(uint lightIndex, float3 shadowCoords[ViewSrg::MaxCascadeCount])
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.
    static const float DepthMargin = 1e-8; // avoiding artifact when near depth bounds.

    const uint size = ViewSrg::m_directionalLightShadows[lightIndex].m_shadowmapSize;
    if (size <= 1)
    {
        return 0.;
    }

    Texture2DArray<float> shadowmap = PassSrg::m_directionalLightShadowmap;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[lightIndex].m_cascadeCount;
    
    float3 shadowCoord;
    for (uint indexOfCascade = 0; indexOfCascade < cascadeCount; ++indexOfCascade)
    {  
        shadowCoord = shadowCoords[indexOfCascade];
        if (shadowCoord.x >= 0. && shadowCoord.x * size < size - PixelMargin &&
             shadowCoord.y >= 0. && shadowCoord.y * size < size - PixelMargin && shadowCoord.z < (1. - DepthMargin))
        {
            const float depthBufferValue = shadowmap.Sample(PassSrg::LinearSampler, float3(shadowCoord.xy, indexOfCascade)).r;
            const float deltaDepth = abs(shadowCoord.z - depthBufferValue);
            const float viewSpaceThickness = ViewSrg::m_directionalLightShadows[lightIndex].m_far_minus_near * deltaDepth;            
            return viewSpaceThickness;
        }
    }
    
    return 0.;
}

bool2 DirectionalLightShadow::IsShadowed(float3 shadowCoord, uint indexOfCascade)
{
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.
    static const float DepthMargin = 1e-8; // avoiding artifact when near depth bounds.

    // size is the shadowap's width and height.
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;

    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    Texture2DArray<float> shadowmap = PassSrg::m_directionalLightShadowmap;

    if (shadowCoord.x >= 0. && shadowCoord.x * size < size - PixelMargin &&
        shadowCoord.y >= 0. && shadowCoord.y * size < size - PixelMargin)
    {
        const float3 coord = float3(shadowCoord.xy, indexOfCascade);
        const float depthInShadowmap = shadowmap.Sample(PassSrg::LinearSampler, coord).r;
        // Test the case where the shadowed pixel is nearer than the maximal depth
        // of the cascade.  Otherwise, escalate the next cascade.
        if (shadowCoord.z < 1. - DepthMargin)
        {
            const float depthDiff = shadowCoord.z - depthInShadowmap;
            return bool2(true, (depthDiff > m_slopeBias[indexOfCascade]));
        }
    }
    return bool2(false, false);
}

float DirectionalLightShadow::GetVisibilityFromLightNoFilter()
{
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    for (uint indexOfCascade = 0; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const bool2 checkedShadowed = IsShadowed(
            m_shadowCoords[indexOfCascade],
            indexOfCascade);
        if (checkedShadowed.x)
        {
            m_debugInfo.m_cascadeIndex = indexOfCascade;
            return checkedShadowed.y ? 0. : 1.;
        }
    }
    m_debugInfo.m_cascadeIndex = cascadeCount;
    return 1.;
}

float DirectionalLightShadow::GetVisibilityFromLightPcf()
{   
    static const float PixelMargin = 1.5; // avoiding artifact between cascade levels.
    static const float DepthMargin = 1e-8; // avoiding artifact when near depth bounds.

    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    for (uint indexOfCascade = 0; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
    
        if (shadowCoord.x >= 0. && shadowCoord.x * size < size - PixelMargin &&
            shadowCoord.y >= 0. && shadowCoord.y * size < size - PixelMargin && 
            shadowCoord.z < 1. - DepthMargin)
        {
            m_debugInfo.m_cascadeIndex = indexOfCascade;
            return SamplePcfBicubic(shadowCoord, indexOfCascade);
        }
    }
    m_debugInfo.m_cascadeIndex = cascadeCount;
    return 1.;
}

float DirectionalLightShadow::GetVisibilityFromLightEsm()
{
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    Texture2DArray<float> shadowmap = PassSrg::m_directionalLightShadowmap;
    Texture2DArray<float> expShadowmap = PassSrg::m_directionalLightExponentialShadowmap;

    for (uint indexOfCascade = 0; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        bool2 checkedShadowed = IsShadowed(shadowCoord, indexOfCascade);
        const float depthDiff = shadowCoord.z - distanceMin;
        if (checkedShadowed.x && depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = expShadowmap.Sample(PassSrg::LinearSampler, coord).r;                        
            const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
            const float ratio = exp(exponent);

            m_debugInfo.m_cascadeIndex = indexOfCascade;
            return saturate(ratio);
        }
    }

    m_debugInfo.m_cascadeIndex = cascadeCount;
    return 1.;
}

float DirectionalLightShadow::GetVisibilityFromLightEsmPcf()
{
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    Texture2DArray<float> shadowmap = PassSrg::m_directionalLightShadowmap;
    Texture2DArray<float> expShadowmap = PassSrg::m_directionalLightExponentialShadowmap;

    for (uint indexOfCascade = 0; indexOfCascade < cascadeCount; ++indexOfCascade)
    {
        const float3 shadowCoord = m_shadowCoords[indexOfCascade];
        const float distanceMin = ViewSrg::m_esmsDirectional[indexOfCascade].m_lightDistanceOfCameraViewFrustum;
        bool2 checkedShadowed = IsShadowed(shadowCoord, indexOfCascade);
        const float depthDiff = shadowCoord.z - distanceMin;
        if (checkedShadowed.x && depthDiff >= 0)
        {
            const float distanceWithinCameraView = depthDiff / (1. - distanceMin);
            const float3 coord = float3(shadowCoord.xy, indexOfCascade);
            const float occluder = expShadowmap.Sample(PassSrg::LinearSampler, coord).r;
            const float exponent = -EsmExponentialShift * (distanceWithinCameraView - occluder);
            float ratio = exp(exponent);

            static const float pcfFallbackThreshold = 1.04;
            if (ratio > pcfFallbackThreshold)
            {
                m_debugInfo.m_usePcfFallback = true;
                ratio = GetVisibilityFromLightPcf();
            }
            else
            {
                m_debugInfo.m_usePcfFallback = false;
            }
            m_debugInfo.m_cascadeIndex = indexOfCascade;
            return saturate(ratio);
        }
    }

    m_debugInfo.m_usePcfFallback = false;
    m_debugInfo.m_cascadeIndex = cascadeCount;
    return 1.;
}

float DirectionalLightShadow::SamplePcfBicubic(float3 shadowCoord, uint indexOfCascade)
{
    const uint filteringSampleCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_filteringSampleCount;
    const uint size = ViewSrg::m_directionalLightShadows[m_lightIndex].m_shadowmapSize;
    
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[m_lightIndex].m_cascadeCount;
    Texture2DArray<float> shadowmap = PassSrg::m_directionalLightShadowmap;

    SampleShadowMapBicubicParameters param;
    param.shadowMap = shadowmap;
    param.shadowPos = float3(shadowCoord.xy, indexOfCascade);
    param.shadowMapSize = size;
    param.invShadowMapSize = rcp(size); 
    param.comparisonValue = shadowCoord.z;
    param.samplerState = SceneSrg::m_hwPcfSampler;
    param.receiverPlaneDepthBias = o_directional_shadow_receiver_plane_bias_enable ? ComputeReceiverPlaneDepthBias(m_shadowPosDX[indexOfCascade], m_shadowPosDY[indexOfCascade]) : 0;
    
    if (filteringSampleCount <= 4)       
    {
        return SampleShadowMapBicubic_4Tap(param);
    }
    else if (filteringSampleCount <= 9)
    {
        return SampleShadowMapBicubic_9Tap(param);
    }
    else
    {
        return SampleShadowMapBicubic_16Tap(param);
    }
}

float DirectionalLightShadow::GetVisibility(
    uint lightIndex,
    float3 shadowCoords[ViewSrg::MaxCascadeCount],
    float3 normalVector,
    out DirectionalLightShadow::DebugInfo debugInfo)
{
    DirectionalLightShadow shadow;
    shadow.m_lightIndex = lightIndex;
    shadow.m_shadowCoords = shadowCoords;
    shadow.m_normalVector = normalVector;
    shadow.m_debugInfo.m_cascadeIndex = 0;
    shadow.m_debugInfo.m_usePcfFallback = false;

    if (o_directional_shadow_receiver_plane_bias_enable)
    {
        [unroll]
        for(int i = 0 ; i < ViewSrg::MaxCascadeCount ; ++i)
        {
            shadow.m_shadowPosDX[i] = ddx_fine(shadowCoords[i]);
            shadow.m_shadowPosDY[i] = ddy_fine(shadowCoords[i]);        
        }    
    }

    // Calculate slope bias
    const float3 lightDirection = 
        normalize(SceneSrg::m_directionalLights[lightIndex].m_direction);
    const float cosTheta = -dot(normalVector, lightDirection);
    const float sinTheta = sqrt(1 - cosTheta * cosTheta);
    const float tanTheta = sinTheta / cosTheta;
    for (uint cascadeIndex = 0; cascadeIndex < ViewSrg::MaxCascadeCount; ++cascadeIndex)
    {
        const float slopeBiasBase = ViewSrg::m_directionalLightShadows[lightIndex].m_slopeBiasBase[cascadeIndex];
        shadow.m_slopeBias[cascadeIndex] = slopeBiasBase * tanTheta;
    }

    float visibility = 1.;
    switch (o_directional_shadow_filtering_method)
    {
        case ShadowFilterMethod::None:
            visibility = shadow.GetVisibilityFromLightNoFilter();
            break;
        case ShadowFilterMethod::Pcf:
            visibility = shadow.GetVisibilityFromLightPcf();
            break;
        case ShadowFilterMethod::Esm:
            visibility = shadow.GetVisibilityFromLightEsm();
            break;
        case ShadowFilterMethod::EsmPcf:
            visibility = shadow.GetVisibilityFromLightEsmPcf();
            break;
    }

    debugInfo = shadow.m_debugInfo;
    return visibility;
}

float3 DirectionalLightShadow::AddDebugColoring(
    float3 color, 
    uint lightIndex, 
    DirectionalLightShadow::DebugInfo debugInfo)
{
    const uint cascadeIndex = debugInfo.m_cascadeIndex;
    const bool usePcfFallback = debugInfo.m_usePcfFallback;
    const uint cascadeCount = ViewSrg::m_directionalLightShadows[lightIndex].m_cascadeCount;

    if ((ViewSrg::m_directionalLightShadows[lightIndex].m_debugFlags &
        ViewSrg::DirectionalLightShadowDebugColoringBitMask) == 0)
    {
        return color;
    }
    if (usePcfFallback)
    {
        return float3(1, 0, 1);
    }

    if (cascadeIndex < cascadeCount)
    {
        static const float3 debuggingColors[ViewSrg::MaxCascadeCount] = 
        {
            float3(1., 0., 0.), 
            float3(0., 1., 0.), 
            float3(0., 0., 1.), 
            float3(1., 1., 0.)};
        color = color * 0.75 + debuggingColors[cascadeIndex] * 0.25;
    }
    return color;
}
