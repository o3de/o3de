/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

Surface EvaluateSurface(float3 surfacePosWS, float3 vertexNormal, float3 normal, float3 baseColor, float specularF0Factor, float roughness, float metallic, uint lightingChannels)
{
    Surface surface = (Surface)0;

    surface.lightingChannels = lightingChannels;

    // Position, Normal, Roughness
    surface.position = surfacePosWS;
    surface.vertexNormal = vertexNormal;
    surface.normal = normal;
    surface.roughnessLinear = roughness;
    surface.CalculateRoughnessA();
    
    // Albedo, SpecularF0
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);
    
    // Clear Coat
    surface.clearCoat.InitializeToZero();
    
    surface.diffuseAmbientOcclusion = 1.0f;
    surface.specularOcclusion = 1.0f;

    return surface;
}
