/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once


#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>

// --- Vertex Shader ---

VsOutput VertexShader(VsInput IN)
{
    VsOutput OUT = EvaluateVertexGeometry(IN);
    return OUT;
}

// --- Pixel Shader ---

#if !OUTPUT_DEPTH
    [earlydepthstencil]
#endif
ForwardPassOutput PixelShader(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    // ------- Geometry -> Surface -> Lighting -------

    PixelGeometryData geoData = EvaluatePixelGeometry(IN, isFrontFace);

    Surface surface = EvaluateSurface(geoData);

    LightingData lightingData = EvaluateLighting(surface, IN.position);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_color.rgb = lightingData.diffuseLighting.rgb + lightingData.specularLighting.rgb + lightingData.emissiveLighting.rgb;
    OUT.m_color.a = 1.0;

#if OUTPUT_DEPTH
    // Can be modified in Parallax calculations in EvaluatePixelGeometry
    OUT.m_depth = IN.position.z;
#endif

    return OUT;
}

