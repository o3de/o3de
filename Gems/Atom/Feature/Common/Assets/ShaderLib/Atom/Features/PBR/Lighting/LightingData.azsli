/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <viewsrg_all.srgi>
#include <Atom/Features/Debug.azsli>
#include <Atom/Features/LightCulling/LightCullingTileIterator.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>

#ifndef MAX_SHADING_VIEWS
#define MAX_SHADING_VIEWS 1
#endif

#ifndef GET_SHADING_VIEW_COUNT
#define GET_SHADING_VIEW_COUNT 1
#endif

class LightingData
{
    // Lighting outputs
    real3 diffuseLighting;
    real3 specularLighting[MAX_SHADING_VIEWS];
    real3 translucentBackLighting;

    // Factors for the amount of diffuse and specular lighting applied
    real3 diffuseResponse;
    real3 specularResponse;

    // (N . L) to accept below (N . L = 0) in scattering through thin objects
    real transmissionNdLBias;

    // Shrink (absolute) offset towards the normal opposite direction to ensure correct shadow map projection
    real shrinkFactor;

    // Attenuation applied to hide artifacts due to low-res shadow maps
    real distanceAttenuation;

    // Normalized direction from surface to camera
    real3 dirToCamera[MAX_SHADING_VIEWS];

    // Scaling term to approximate multiscattering contribution in specular BRDF
    real3 multiScatterCompensation;

    // Lighting emitted from the surface
    real3 emissiveLighting;

    // BRDF texture values
    real2 brdf[MAX_SHADING_VIEWS];

    // Normal . View
    real NdotV[MAX_SHADING_VIEWS];

    // Occlusion factors
    // 0 = dark, 1 = light
    real diffuseAmbientOcclusion;
    real specularOcclusion;

    void Init(float3 positionWS, real3 specularNormal, real roughnessLinear, float3 viewPosition[MAX_SHADING_VIEWS]);
    void CalculateMultiscatterCompensation(real3 specularF0, bool enabled);
    void FinalizeLighting();
    void FinalizeLighting(real3 transmissionTint);

    real GetSpecularNdotV() { return NdotV[0]; }
    real GetSpecularNdotV(uint i) { return NdotV[i]; }
};

void LightingData::Init(float3 positionWS, real3 specularNormal, real roughnessLinear, float3 viewPosition[MAX_SHADING_VIEWS])
{
    diffuseLighting = real3(0.0, 0.0, 0.0);
    translucentBackLighting = real3(0.0, 0.0, 0.0);
    multiScatterCompensation = real3(1.0, 1.0, 1.0);
    emissiveLighting = real3(0.0, 0.0, 0.0);
    diffuseAmbientOcclusion = 1.0;
    specularOcclusion = 1.0;

    [unroll]
    for(uint i = 0; i < GET_SHADING_VIEW_COUNT; ++i)
    {
        specularLighting[i] = real3(0.0, 0.0, 0.0);
        dirToCamera[i] = normalize(viewPosition[i] - positionWS);
        NdotV[i] = saturate(dot(specularNormal, dirToCamera[i]));

        // sample BRDF map (indexed by smoothness values rather than roughness)
        real2 brdfUV = real2(NdotV[i], (1.0 - roughnessLinear));
        brdf[i] = real2(PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, brdfUV).rg);
    }
}

void LightingData::CalculateMultiscatterCompensation(real3 specularF0, bool enabled)
{
    // Default to using 0 for brdf viewIndex as we don't want to pay the VGPR cost of
    // a real3 per view for multiScatterCompensation as it's a minor effect
    multiScatterCompensation = GetMultiScatterCompensation(specularF0, brdf[0], enabled);
}

void LightingData::FinalizeLighting()
{
    [unroll]
    for(uint i = 0; i < GET_SHADING_VIEW_COUNT; ++i)
    {
        specularLighting[i] *= specularOcclusion;
        if(!IsSpecularLightingEnabled())
        {
            specularLighting[i] = real3(0, 0, 0);
        }
    }

    diffuseLighting *= diffuseAmbientOcclusion;
    if(!IsDiffuseLightingEnabled())
    {
        diffuseLighting = real3(0, 0, 0);
    }
}

void LightingData::FinalizeLighting(real3 transmissionTint)
{
    FinalizeLighting();

    // Transmitted light
#if ENABLE_TRANSMISSION
    if(o_transmission_mode != TransmissionMode::None)
    {
        diffuseLighting += translucentBackLighting * transmissionTint;
    }
#endif
}
