/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <viewsrg.srgi>
#include <Atom/Features/Debug.azsli>
#include <Atom/Features/LightCulling/LightCullingTileIterator.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>

class LightingData
{
    LightCullingTileIterator tileIterator;
    
    // Lighting outputs
    float3 diffuseLighting;
    float3 specularLighting;
    float3 translucentBackLighting;

    // Factors for the amount of diffuse and specular lighting applied
    float3 diffuseResponse;
    float3 specularResponse;

    // (N . L) to accept below (N . L = 0) in scattering through thin objects
    float transmissionNdLBias; 
    
    // Shrink (absolute) offset towards the normal opposite direction to ensure correct shadow map projection
    float shrinkFactor;

    // Attenuation applied to hide artifacts due to low-res shadow maps 
    float distanceAttenuation;

    // Normalized direction from surface to camera
    float3 dirToCamera;
    
    // Scaling term to approximate multiscattering contribution in specular BRDF
    float3 multiScatterCompensation;

    // Lighting emitted from the surface
    float3 emissiveLighting;

    // BRDF texture values
    float2 brdf;

    // Normal . View
    float NdotV;

    // Occlusion factors
    // 0 = dark, 1 = light
    float diffuseAmbientOcclusion;
    float specularOcclusion;

    void Init(float3 positionWS, float3 normal, float roughnessLinear);
    void CalculateMultiscatterCompensation(float3 specularF0, bool enabled);
    void FinalizeLighting();
    void FinalizeLighting(float3 transmissionTint);
};

void LightingData::Init(float3 positionWS, float3 normal, float roughnessLinear)
{
    diffuseLighting = float3(0.0, 0.0, 0.0);
    specularLighting = float3(0.0, 0.0, 0.0);
    translucentBackLighting = float3(0.0, 0.0, 0.0);
    multiScatterCompensation = float3(1.0f, 1.0f, 1.0f);
    emissiveLighting = float3(0.0f, 0.0f, 0.0f);
    diffuseAmbientOcclusion = 1.0f;
    specularOcclusion = 1.0f;

    dirToCamera = normalize(ViewSrg::m_worldPosition.xyz - positionWS);

    // sample BRDF map (indexed by smoothness values rather than roughness)
    NdotV = saturate(dot(normal, dirToCamera));
    float2 brdfUV = float2(NdotV, (1.0f - roughnessLinear));
    brdf = PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, brdfUV).rg;
}

void LightingData::CalculateMultiscatterCompensation(float3 specularF0, bool enabled)
{
    multiScatterCompensation = GetMultiScatterCompensation(specularF0, brdf, enabled);
}

void LightingData::FinalizeLighting()
{
    specularLighting *= specularOcclusion;
    specularLighting += emissiveLighting;

    if(!IsSpecularLightingEnabled())
    {
        specularLighting = float3(0, 0, 0);
    }
    if(!IsDiffuseLightingEnabled())
    {
        diffuseLighting = float3(0, 0, 0);
    }
}

void LightingData::FinalizeLighting(float3 transmissionTint)
{
    FinalizeLighting();

    // Transmitted light
#if ENABLE_TRANSMISSION
    if(o_transmission_mode != TransmissionMode::None)
    {
        diffuseLighting += translucentBackLighting * transmissionTint;
    }
#endif
}
