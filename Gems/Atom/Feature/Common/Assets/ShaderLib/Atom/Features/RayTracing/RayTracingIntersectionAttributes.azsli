/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/RPI/Math.azsli>


#ifdef NO_FLOAT_16

uint PackNormalToLower30BitsOfUint(float3 normal)
{
    float3 encodedNormal = EncodeNormalSignedOctahedron(normal);
    return
        ((uint)(encodedNormal.x * 1023.f) & 0x3FF) << 20 |
        ((uint)(encodedNormal.y * 1023.f) & 0x3FF) << 10 |
        ((uint)(encodedNormal.z * 1023.f) & 0x3FF) <<  0;
}

float3 UnpackNormalFromLower30BitsOfUint(uint packedNormal)
{
    float3 encodedNormal = float3(
        (float)((packedNormal >> 20) & 0x3FF) / 1023.f,
        (float)((packedNormal >> 10) & 0x3FF) / 1023.f,
        (float)((packedNormal >>  0) & 0x3FF) / 1023.f
    );
    return DecodeNormalSignedOctahedron(encodedNormal);
}

uint PackTangentToLower31BitsOfUint(float4 tangent)
{
    return PackNormalToLower30BitsOfUint(tangent.xyz) | (tangent.w > 0 ? 1 : 0) << 30;
}

float4 UnpackTangentFromLower31BitsOfUint(uint packedTangent)
{
    float3 tangent = UnpackNormalFromLower30BitsOfUint(packedTangent);
    return float4(tangent, (packedTangent >> 30) ? 1.f : -1.f);
}

// This structure must not be larger than 32 bytes (D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES)
class ProceduralGeometryIntersectionAttributes
{
    float3 m_position;    // [12 bytes] Surface hit point in object space (BLAS space)
    float2 m_uv;          // [ 8 bytes] Surface uv coordinates
    uint m_packedNormal;  // [ 4 bytes] Surface normal in object space (BLAS space)
    uint m_packedTangent; // [ 4 bytes] Surface tangent in object space (BLAS space)
    //                   sum: 28 bytes

    float3 GetPosition() { return m_position; }
    float2 GetUv()       { return m_uv; }
    float3 GetNormal()   { return UnpackNormalFromLower30BitsOfUint(m_packedNormal); }
    float4 GetTangent()  { return UnpackTangentFromLower31BitsOfUint(m_packedTangent); }
    void SetPosition(float3 position) { m_position = position; }
    void SetUv      (float2 uv)       { m_uv = uv; }
    void SetNormal  (float3 normal)   { m_packedNormal = PackNormalToLower30BitsOfUint(normal); }
    void SetTangent (float4 tangent)  { m_packedTangent = PackTangentToLower31BitsOfUint(tangent); }
};

#else

// This structure must not be larger than 32 bytes (D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES)
class ProceduralGeometryIntersectionAttributes
{
    float3 m_position; // [12 bytes] Surface hit point in object space (BLAS space)
    half3 m_normal;    // [ 6 bytes] Surface normal in object space (BLAS space)
    half2 m_uv;        // [ 4 bytes] Surface uv coordinates
    half4 m_tangent;   // [ 8 bytes] Surface tangent in object space (BLAS space)
    //                sum: 30 bytes

    float3 GetPosition() { return m_position; }
    float2 GetUv()       { return float2(m_uv); }
    float3 GetNormal()   { return float3(m_normal); }
    float4 GetTangent()  { return float4(m_tangent); }
    void SetPosition(float3 position) { m_position = position; }
    void SetUv      (float2 uv)       { m_uv = half2(uv); }
    void SetNormal  (float3 normal)   { m_normal = half3(normal); }
    void SetTangent (float4 tangent)  { m_tangent = half4(tangent); }
};

#endif
