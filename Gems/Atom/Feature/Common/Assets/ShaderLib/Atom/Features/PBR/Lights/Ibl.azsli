/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// --- Static Options Available ---
// FORCE_IBL_IN_FORWARD_PASS - forces IBL lighting to be run in the forward pass, used in pipelines that don't have a reflection pass

#include <Atom/Features/Debug.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>

#include <Atom/RPI/Math.azsli>
#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>
#include <Atom/Features/PBR/Lights/ReflectionProbeData.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>

#ifndef ENABLE_REFLECTIONPROBE_PARALLAXCORRECTION
#define ENABLE_REFLECTIONPROBE_PARALLAXCORRECTION 1
#endif

#ifndef ENABLE_REFLECTIONPROBE_BLENDING
#define ENABLE_REFLECTIONPROBE_BLENDING 1
#endif

real3 GetIblDiffuse(
    real3 normal, 
    real3 albedo, 
    real3 diffuseResponse)
{
    real3 irradianceDir = MultiplyVectorQuaternion(normal, real4(SceneSrg::m_iblOrientation));
    real3 diffuseSample = real3(SceneSrg::m_diffuseEnvMap.Sample(SceneSrg::m_samplerEnv, GetCubemapCoords(irradianceDir)).rgb);

    return diffuseResponse * albedo * diffuseSample;
}

real3 GetIblSpecular(
    float3 position, 
    real3 normal, 
    real3 specularF0, 
    real roughnessLinear, 
    real3 dirToCamera, 
    real2 brdf,
    ReflectionProbeData reflectionProbe,
    TextureCube reflectionProbeCubemap)
{
    real3 reflectDir = reflect(-dirToCamera, normal);
    reflectDir = MultiplyVectorQuaternion(reflectDir, real4(SceneSrg::m_iblOrientation));    

    // global
    real3 outSpecular = real3(SceneSrg::m_specularEnvMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(roughnessLinear)).rgb);
    outSpecular *= (specularF0 * brdf.x + brdf.y);
    
    // reflection probe
    if (reflectionProbe.m_useReflectionProbe)
    {
#if ENABLE_REFLECTIONPROBE_PARALLAXCORRECTION
        if (reflectionProbe.m_useParallaxCorrection)
        {
            reflectDir = ApplyParallaxCorrectionOBB(
                real4x4(GetReflectionProbeWorldMatrixInverse(reflectionProbe)),
                real3(reflectionProbe.m_outerObbHalfLengths),
                position,
                reflectDir);
        }
#endif
        real3 probeSpecular = real3(reflectionProbeCubemap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(roughnessLinear)).rgb);
        probeSpecular *= (specularF0 * brdf.x + brdf.y);

#if ENABLE_REFLECTIONPROBE_BLENDING
        // compute blend amount based on world position in the reflection probe volume
        real blendAmount = ComputeLerpBetweenInnerOuterOBBs(
            (real3x4)GetReflectionProbeWorldMatrixInverse(reflectionProbe),
            real3(reflectionProbe.m_innerObbHalfLengths),
            real3(reflectionProbe.m_outerObbHalfLengths),
            position);
        outSpecular = lerp(outSpecular, probeSpecular, blendAmount);
#else
        outSpecular = probeSpecular;
#endif 
    }
    
    return outSpecular;
}

void ApplyIBL(Surface surface, inout LightingData lightingData, bool useDiffuseIbl, bool useSpecularIbl, ReflectionProbeData reflectionProbe, TextureCube reflectionProbeCubemap)
{
    bool useIbl = IsIndirectLightingEnabled() && (useDiffuseIbl || useSpecularIbl);

    if(useIbl)
    {
        real globalIblExposure = pow(2.0, real(SceneSrg::m_iblExposure));
        
        if(useDiffuseIbl)
        {
            real3 iblDiffuse = GetIblDiffuse(surface.normal, surface.albedo, lightingData.diffuseResponse);
            lightingData.diffuseLighting += (iblDiffuse * globalIblExposure * lightingData.diffuseAmbientOcclusion);
        }

        if(useSpecularIbl)
        {
            real3 iblSpecular = GetIblSpecular(surface.position, surface.normal, surface.specularF0, surface.roughnessLinear, lightingData.dirToCamera, lightingData.brdf, reflectionProbe, reflectionProbeCubemap);
            iblSpecular *= lightingData.multiScatterCompensation;
            
#if ENABLE_CLEAR_COAT
            if (o_clearCoat_feature_enabled && surface.clearCoat.factor > 0.0)
            {
                real clearCoatNdotV = saturate(dot(surface.clearCoat.normal, lightingData.dirToCamera));
                clearCoatNdotV = max(clearCoatNdotV, 0.01);  // [GFX TODO][ATOM-4466] This is a current band-aid for specular noise at grazing angles.
                real2 clearCoatBrdf = real2(PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, GetBRDFTexCoords(surface.clearCoat.roughness, clearCoatNdotV)).rg);

                // clear coat uses fixed IOR = 1.5 represents polyurethane which is the most common material for gloss clear coat
                // coat layer assumed to be dielectric thus don't need multiple scattering compensation
                real3 clearCoatSpecularF0 = real3(0.04, 0.04, 0.04);
                real3 clearCoatIblSpecular = GetIblSpecular(surface.position, surface.clearCoat.normal, clearCoatSpecularF0, surface.clearCoat.roughness, lightingData.dirToCamera, clearCoatBrdf, reflectionProbe, reflectionProbeCubemap);

                clearCoatIblSpecular *= surface.clearCoat.factor;
        
                // attenuate base layer energy
                real3 clearCoatResponse = FresnelSchlickWithRoughness(clearCoatNdotV, clearCoatSpecularF0, surface.clearCoat.roughness) * surface.clearCoat.factor;
                iblSpecular = iblSpecular * (1.0 - clearCoatResponse) * (1.0 - clearCoatResponse) + clearCoatIblSpecular;
            }
#endif

            real exposure = reflectionProbe.m_useReflectionProbe ? pow(2.0, real(reflectionProbe.m_exposure)) : globalIblExposure;
            lightingData.specularLighting += (iblSpecular * exposure);
        }
    }
}
