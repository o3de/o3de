/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// --- Static Options Available ---
// FORCE_IBL_IN_FORWARD_PASS - forces IBL lighting to be run in the forward pass, used in pipelines that don't have a reflection pass

#include <Atom/Features/Debug.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>

#include <Atom/RPI/Math.azsli>
#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>

float3 GetIblDiffuse(
    float3 normal, 
    float3 albedo, 
    float3 diffuseResponse)
{
    float3 irradianceDir = MultiplyVectorQuaternion(normal, SceneSrg::m_iblOrientation);
    float3 diffuseSample = SceneSrg::m_diffuseEnvMap.Sample(SceneSrg::m_samplerEnv, GetCubemapCoords(irradianceDir)).rgb;

    return diffuseResponse * albedo * diffuseSample;
}

float3 GetIblSpecular(
    float3 position, 
    float3 normal, 
    float3 specularF0, 
    float roughnessLinear, 
    float3 dirToCamera, 
    float2 brdf)
{
    float3 reflectDir = reflect(-dirToCamera, normal);
    reflectDir = MultiplyVectorQuaternion(reflectDir, SceneSrg::m_iblOrientation);    

    // global
    float3 outSpecular = SceneSrg::m_specularEnvMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(roughnessLinear)).rgb;
    outSpecular *= (specularF0 * brdf.x + brdf.y);
    
    // reflection probe
    if (ObjectSrg::m_reflectionProbeData.m_useReflectionProbe)
    {
        if (ObjectSrg::m_reflectionProbeData.m_useParallaxCorrection)
        {
            reflectDir = ApplyParallaxCorrectionOBB(
                ObjectSrg::GetReflectionProbeWorldMatrixInverse(),
                ObjectSrg::m_reflectionProbeData.m_outerObbHalfLengths,
                position,
                reflectDir);
        }
    
        float3 probeSpecular = ObjectSrg::m_reflectionProbeCubeMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(roughnessLinear)).rgb;
        probeSpecular *= (specularF0 * brdf.x + brdf.y);
    
        // compute blend amount based on world position in the reflection probe volume
        float blendAmount = ComputeLerpBetweenInnerOuterOBBs(
            (float3x4)ObjectSrg::GetReflectionProbeWorldMatrixInverse(),
            ObjectSrg::m_reflectionProbeData.m_innerObbHalfLengths,
            ObjectSrg::m_reflectionProbeData.m_outerObbHalfLengths,
            position);
    
        outSpecular = lerp(outSpecular, probeSpecular, blendAmount);
    }
    return outSpecular;
}

void ApplyIBL(Surface surface, inout LightingData lightingData)
{
    bool useIbl = o_enableIBL && IsIndirectLightingEnabled();

#ifdef FORCE_IBL_IN_FORWARD_PASS
    bool useDiffuseIbl = true;
    bool useSpecularIbl = true;
#else
    bool isTransparent = (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent);
    bool useDiffuseIbl = isTransparent;
    bool useSpecularIbl = (isTransparent || o_meshUseForwardPassIBLSpecular || o_materialUseForwardPassIBLSpecular);
    useIbl = useIbl && (useDiffuseIbl || useSpecularIbl);
#endif

    if(useIbl)
    {
        float globalIblExposure = pow(2.0, SceneSrg::m_iblExposure);
        
        if(useDiffuseIbl)
        {
            float3 iblDiffuse = GetIblDiffuse(surface.normal, surface.albedo, lightingData.diffuseResponse);
            lightingData.diffuseLighting += (iblDiffuse * globalIblExposure * lightingData.diffuseAmbientOcclusion);
        }

        if(useSpecularIbl)
        {
            float3 iblSpecular = GetIblSpecular(surface.position, surface.normal, surface.specularF0, surface.roughnessLinear, lightingData.dirToCamera, lightingData.brdf);
            iblSpecular *= lightingData.multiScatterCompensation;

#if ENABLE_CLEAR_COAT
            if (o_clearCoat_feature_enabled && surface.clearCoat.factor > 0.0f)
            {
                float clearCoatNdotV = saturate(dot(surface.clearCoat.normal, lightingData.dirToCamera));
                clearCoatNdotV = max(clearCoatNdotV, 0.01f);  // [GFX TODO][ATOM-4466] This is a current band-aid for specular noise at grazing angles.
                float2 clearCoatBrdf = PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, GetBRDFTexCoords(surface.clearCoat.roughness, clearCoatNdotV)).rg;

                // clear coat uses fixed IOR = 1.5 represents polyurethane which is the most common material for gloss clear coat
                // coat layer assumed to be dielectric thus don't need multiple scattering compensation
                float3 clearCoatSpecularF0 = float3(0.04f, 0.04f, 0.04f);
                float3 clearCoatIblSpecular = GetIblSpecular(surface.position, surface.clearCoat.normal, clearCoatSpecularF0, surface.clearCoat.roughness, lightingData.dirToCamera, clearCoatBrdf);

                clearCoatIblSpecular *= surface.clearCoat.factor;
        
                // attenuate base layer energy
                float3 clearCoatResponse = FresnelSchlickWithRoughness(clearCoatNdotV, clearCoatSpecularF0, surface.clearCoat.roughness) * surface.clearCoat.factor;
                iblSpecular = iblSpecular * (1.0 - clearCoatResponse) * (1.0 - clearCoatResponse) + clearCoatIblSpecular;
            }
#endif

            float exposure = ObjectSrg::m_reflectionProbeData.m_useReflectionProbe ? pow(2.0, ObjectSrg::m_reflectionProbeData.m_exposure) : globalIblExposure;
            lightingData.specularLighting += (iblSpecular * exposure);
        }
    }
}
