/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/Debug.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <Atom/Features/PBR/Lights/CapsuleLight.azsli>
#include <Atom/Features/PBR/Lights/DirectionalLight.azsli>
#include <Atom/Features/PBR/Lights/DiskLight.azsli>
#include <Atom/Features/PBR/Lights/PointLight.azsli>
#include <Atom/Features/PBR/Lights/PolygonLight.azsli>
#include <Atom/Features/PBR/Lights/QuadLight.azsli>
#include <Atom/Features/PBR/Lights/SimplePointLight.azsli>
#include <Atom/Features/PBR/Lights/SimpleSpotLight.azsli>

void ApplyDirectLighting(Surface surface, inout LightingData lightingData, float4 screenUv)
{
    if( IsDirectLightingEnabled() )
    {
        if (o_enableDirectionalLights)
        {
            ApplyDirectionalLights(surface, lightingData, screenUv);
        }
        if (o_enablePunctualLights)
        {
            ApplySimplePointLights(surface, lightingData);
            ApplySimpleSpotLights(surface, lightingData);
        }
        if (o_enableAreaLights)
        {
            ApplyPointLights(surface, lightingData);
            ApplyDiskLights(surface, lightingData);
            ApplyCapsuleLights(surface, lightingData);
            ApplyQuadLights(surface, lightingData);
            ApplyPolygonLights(surface, lightingData);
        }
    }
    else if(GetRenderDebugViewMode() == RenderDebugViewMode::CascadeShadows)
    {
        if (o_enableDirectionalLights)
        {
            ApplyDirectionalLights(surface, lightingData, screenUv);
        }
    }
    else if( UseDebugLight() )
    {
        float3 lightIntensity = SceneSrg::m_debugLightingIntensity;
        float3 lightDirection = SceneSrg::m_debugLightingDirection;

        lightingData.diffuseLighting += GetDiffuseLighting(surface, lightingData, lightIntensity, lightDirection);
        lightingData.specularLighting += GetSpecularLighting(surface, lightingData, lightIntensity, lightDirection);
    }

}
