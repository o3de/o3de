/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <scenesrg.srgi>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    uint m_objectId;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }

    //! Returns the inverse-transpose of the world matrix.
    //! Commonly used to transform normals while supporting non-uniform scale.
    float3x3 GetWorldMatrixInverseTranspose()
    {
        return SceneSrg::GetObjectToWorldInverseTransposeMatrix(m_objectId);
    }

    //! Reflection Probe (smallest probe volume that overlaps the object position)
    struct ReflectionProbeData
    {
        row_major float3x4 m_modelToWorld;
        row_major float3x4 m_modelToWorldInverse; // does not include extents
        float3 m_outerObbHalfLengths;
        float3 m_innerObbHalfLengths;
        float m_padding;
        bool m_useReflectionProbe;
        bool m_useParallaxCorrection;
        float m_exposure;
    };

    ReflectionProbeData m_reflectionProbeData;
    TextureCube m_reflectionProbeCubeMap;

    float4x4 GetReflectionProbeWorldMatrix()
    {
        float4x4 modelToWorld = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorld[0] = m_reflectionProbeData.m_modelToWorld[0];
        modelToWorld[1] = m_reflectionProbeData.m_modelToWorld[1];
        modelToWorld[2] = m_reflectionProbeData.m_modelToWorld[2];
        return modelToWorld;
    }

    float4x4 GetReflectionProbeWorldMatrixInverse()
    {
        float4x4 modelToWorldInverse = float4x4(
            float4(1, 0, 0, 0),
            float4(0, 1, 0, 0),
            float4(0, 0, 1, 0),
            float4(0, 0, 0, 1));

        modelToWorldInverse[0] = m_reflectionProbeData.m_modelToWorldInverse[0];
        modelToWorldInverse[1] = m_reflectionProbeData.m_modelToWorldInverse[1];
        modelToWorldInverse[2] = m_reflectionProbeData.m_modelToWorldInverse[2];
        return modelToWorldInverse;
    }
}
