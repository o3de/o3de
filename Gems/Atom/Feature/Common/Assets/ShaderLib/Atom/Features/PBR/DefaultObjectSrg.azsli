/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <scenesrg.srgi>

ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    uint m_objectId;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }

    //! Returns the inverse-transpose of the world matrix.
    //! Commonly used to transform normals while supporting non-uniform scale.
    float3x3 GetWorldMatrixInverseTranspose()
    {
        return SceneSrg::GetObjectToWorldInverseTransposeMatrix(m_objectId);
    }

    //[GFX TODO][ATOM-15280] Move wrinkle mask data from the default object srg into something specific to the Skin shader
    uint m_wrinkle_mask_count;
    float4 m_wrinkle_mask_weights[4];
    Texture2D m_wrinkle_masks[16];

    float GetWrinkleMaskWeight(uint index)
    {
        return m_wrinkle_mask_weights[index / 4][index % 4];
    }

    //! Reflection Probe (smallest probe volume that overlaps the object position)
    struct ReflectionProbeData
    {
        float3 m_aabbPos;
        float3 m_outerAabbMin;
        float3 m_outerAabbMax;
        float3 m_innerAabbMin;
        float3 m_innerAabbMax;
        float m_padding;
        bool m_useReflectionProbe;
        bool m_useParallaxCorrection;
    };

    ReflectionProbeData m_reflectionProbeData;
    TextureCube m_reflectionProbeCubeMap;
}
