/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/Features/PBR/Lights/ReflectionProbeData.azsli>

// this define specifies that the mesh buffers and material textures are stored in the Bindless Srg
// Note1: The previous implementation using separate unbounded arrays is preserved since it demonstrates a TDR caused by
//        the RHI unbounded array allocation.  This define and the previous codepath can be removed once the TDR is
//        investigated and resolved.
// Note2: There are corresponding USE_BINDLESS_SRG defines in the RayTracingSceneSrg.azsli and RayTracingFeatureProcessor.h files
//        that must match the setting of this define.
#define USE_BINDLESS_SRG 1

ShaderResourceGroup RayTracingMaterialSrg : SRG_RayTracingMaterial
{
    Sampler LinearSampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };

    // material info structured buffer
    struct MaterialInfo
    {
        float4 m_baseColor;
        float3 m_emissiveColor;
        float  m_metallicFactor;
        float  m_roughnessFactor;
        uint   m_textureFlags;
        uint   m_textureStartIndex;
        uint   m_padding0;

        ReflectionProbeData m_reflectionProbeData;
        uint   m_reflectionProbeCubeMapIndex;
        float  m_padding1;
    };
    
    // hit shaders can retrieve the MaterialInfo for a mesh hit using: RayTracingMaterialSrg::m_materialInfo[InstanceIndex()]   
    StructuredBuffer<MaterialInfo> m_materialInfo;

    // indirection buffer containing indices into the material textures unbounded array
    // Note 1: the index list for a particular mesh begins at MaterialInfo::m_textureStartIndex
    // Note 2: the indirection buffer entries for multiple MaterialInfos will refer to the same texture in m_materialTextures when they are the same material
    Buffer<uint> m_materialTextureIndices;
    
    // texture array index offsets from MaterialInfo::m_textureStartIndex
    // Note: every material has all four entries in the index list, but the flag bits must be checked to determine if the texture is valid
    #define MATERIAL_BASECOLOR_TEXTURE_OFFSET   0
    #define MATERIAL_NORMAL_TEXTURE_OFFSET      1
    #define MATERIAL_METALLIC_TEXTURE_OFFSET    2   
    #define MATERIAL_ROUGHNESS_TEXTURE_OFFSET   3
    #define MATERIAL_EMISSIVE_TEXTURE_OFFSET    4

    // texture flag bits indicating if optional textures are present
    #define TEXTURE_FLAG_BASECOLOR      (1 << 0)
    #define TEXTURE_FLAG_NORMAL         (1 << 1)
    #define TEXTURE_FLAG_METALLIC       (1 << 2)
    #define TEXTURE_FLAG_ROUGHNESS      (1 << 3)
    #define TEXTURE_FLAG_EMISSIVE       (1 << 4)

#if !USE_BINDLESS_SRG
    // unbounded array of Material textures
    Texture2D m_materialTextures[];
#endif
}
