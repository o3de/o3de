/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#ifndef ENABLE_CLEAR_COAT
#define ENABLE_CLEAR_COAT               1
#endif

#ifndef ENABLE_SPECULARAA
#define ENABLE_SPECULARAA               1
#endif

#include <Atom/Features/PBR/MaterialUtils.azsli>
#include <Atom/Features/PBR/SpecularAA.azsli>
#include <Atom/Features/PBR/Surfaces/ClearCoatSurfaceData.azsli>
#include <Atom/Features/PBR/Surfaces/TransmissionSurfaceData.azsli>

#if ENABLE_CLEAR_COAT
#include <Atom/Features/PBR/Surfaces/ClearCoatSurfaceData.azsli>
#endif

// This data varies across different surfaces, but is uniform within a surface
class SurfaceSettings
{
    // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
    // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
    // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
    // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
    // not apply.
    float opacityAffectsSpecularFactor;
};

class Surface
{

#if ENABLE_CLEAR_COAT
    ClearCoatSurfaceData clearCoat;
#endif

    // ------- BasePbrSurfaceData -------
    
    precise real3 position;    //!< Position in world-space
    real3 normal;              //!< Normal in world-space
    real3 vertexNormal;        //!< Vertex normal in world-space
    real3 baseColor;           //!< Surface base color
    real metallic;             //!< Surface metallic property
    real roughnessLinear;      //!< Perceptually linear roughness value authored by artists. Must be remapped to roughnessA before use
    real roughnessA;           //!< Actual roughness value ( a.k.a. "alpha roughness") to be used in microfacet calculations
    real roughnessA2;          //!< Alpha roughness ^ 2 (i.e. roughnessA * roughnessA), used in GGX, cached here for perfromance

    // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
    // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
    // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
    // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
    // not apply.
    real opacityAffectsSpecularFactor;

    float opacityAffectsEmissiveFactor; //!< Allows emissive to be attenuated by alpha or not.

    //! Surface lighting data
    real3 albedo;              //!< Albedo color of the non-metallic material, will be multiplied against the diffuse lighting value
    real3 specularF0;          //!< Fresnel f0 spectral value of the surface
    real3 emissiveLighting;    //!< Emissive lighting
    real diffuseAmbientOcclusion; //!< Diffuse ambient occlusion factor - [0, 1] :: [Dark, Bright]
    real specularOcclusion;       //!< Specular occlusion factor - [0, 1] :: [Dark, Bright]

    //! Applies specular anti-aliasing to roughnessA2 
    void ApplySpecularAA();

    //! Calculates roughnessA and roughnessA2 after roughness has been set
    void CalculateRoughnessA();

    //! Sets albedo, base color, specularF0, and metallic properties using metallic workflow
    void SetAlbedoAndSpecularF0(real3 baseColor, real specularF0Factor, real metallic);

    real3 GetDiffuseNormal() { return normal; }         // Returns the normal used for diffuse  lighting calculations
    real3 GetSpecularNormal() { return normal; }        // Returns the normal used for specular lighting calculations
    real3 GetDefaultNormal() { return normal; }         // Returns the normal used for calculations that are common to both diffuse and specular calculations
                                                        // If you're doing something unusual with one of the normals, you probably want to return the other one here
                                                        // Search the code for 'GetDefaultNormal' to see how/where this is applied
    real3 GetVertexNormal() { return vertexNormal; }    // Returns the interpolated vertex normal
    real3 GetSpecularF0() { return specularF0; }
};

// Specular Anti-Aliasing technique from this paper:
// http://www.jp.square-enix.com/tech/library/pdf/ImprovedGeometricSpecularAA.pdf
void Surface::ApplySpecularAA()
{
    // Constants for formula below
    const float screenVariance = 0.25;
    const float varianceThresh = 0.18;
    
    // Specular Anti-Aliasing
    float3 dndu = ddx_fine( float3(normal) );
    float3 dndv = ddy_fine( float3(normal) );
    float variance = screenVariance * (dot( dndu , dndu ) + dot( dndv , dndv ));
    float kernelRoughnessA2 = min(2.0 * variance , varianceThresh );
    float filteredRoughnessA2 = saturate ( roughnessA2 + kernelRoughnessA2 );
    roughnessA2 = real(filteredRoughnessA2);

    roughnessA = sqrt(roughnessA2);
    roughnessLinear = sqrt(roughnessA);
}

void Surface::CalculateRoughnessA()
{
    // The roughness value in microfacet calculations (called "alpha" in the literature) does not give perceptually
    // linear results. Disney found that squaring the roughness value before using it in microfacet equations causes
    // the user-provided roughness parameter to be more perceptually linear. We keep both values available as some
    // equations need roughnessLinear (i.e. IBL sampling) while others need roughnessA (i.e. GGX equations).
    // See Burley's Disney PBR: https://pdfs.semanticscholar.org/eeee/3b125c09044d3e2f58ed0e4b1b66a677886d.pdf

    roughnessA = max(roughnessLinear * roughnessLinear, MinRoughnessA);
    roughnessA2 = roughnessA * roughnessA;

#if ENABLE_SPECULARAA
    if(o_applySpecularAA)
    {
        ApplySpecularAA();
    }
#endif
}

void Surface::SetAlbedoAndSpecularF0(real3 newBaseColor, real specularF0Factor, real newMetallic)
{
    baseColor = newBaseColor;
    metallic = newMetallic;

    real3 dielectricSpecularF0 = MaxDielectricSpecularF0 * specularF0Factor;

    // Compute albedo and specularF0 based on metalness
    albedo = lerp(baseColor, real3(0.0, 0.0, 0.0), metallic);
    specularF0 = lerp(dielectricSpecularF0, baseColor, metallic);
}
