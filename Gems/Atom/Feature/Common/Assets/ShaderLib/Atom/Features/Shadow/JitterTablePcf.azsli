/*
 * Copyright (c) Contributors to the Open 3D Engine Project. For complete copyright and license terms please see the LICENSE at the root of this distribution.
 * 
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

 /*
  The following is the output of
     $ python3 pcf_jitter_table.py 6 g_jitterTablePcf 0
  where pcf_jitter_table.py has the following contents.

@code
#!/usr/bin/env python3

import random
import sys
import math


""" Returns if a point in the range
[radius_min, radius_sup)*[angle_min, angle_sup)
is contained in the tuple polar coordinates.
"""
def is_point_include(radius_min, radius_sup, angle_min, angle_sup, polars):
    for polar in polars:
        if (radius_min <= polar[0] and polar[0] < radius_sup and
            angle_min <= polar[1] and polar[1] < angle_sup):
            return True
    return False


""" Insert a randomly generated polar coordianted point in each
range [r0, r1)*[a0, a1) if there has not been such a point
in tuple coords yet, where [0, 1)*[0, 2pi) is divided
into the rad_count*agl_count ranges.
"""
def add_jitter_coords(radius_count, angle_count, polars):
    radius_base = 1.0 / math.sqrt(radius_count)
    for radius_index in range(radius_count):
        # range of radius
        radius_min = math.sqrt(radius_index) * radius_base
        radius_sup = math.sqrt(radius_index + 1) * radius_base

        # randomize angle order
        random_state = random.getstate()
        angle_indices = list(range(angle_count))
        random.shuffle(angle_indices)
        random.setstate(random_state)

        for angle_index in angle_indices:
            # range of angle
            angle_min = 2 * math.pi * angle_index / angle_count
            angle_sup = 2 * math.pi * (angle_index + 1) / angle_count

            # if no point in the radius/angle range, add a new point
            if not is_point_include(radius_min, radius_sup,
                                    angle_min, angle_sup,
                                    polars):
                radius = radius_min + (radius_sup - radius_min) * random.random()
                angle = angle_min + (angle_sup - angle_min) * random.random()
                polars += [[radius, angle]]


""" Return a formatted string readable as an array of
orthogonal coordinated points which are in inside of the unit disk.
"""
def conv_array_string(polars):
    result = "{\n"
    for [radius, angle] in polars:
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        result += str.format("    float2({: 1.20e}, {: 1.20e}),\n", x, y)
    result = result.rstrip(",\n") + "\n};\n"
    return result


if __name__ == "__main__":
    rad_size = 1
    ang_size = 1

    if len(sys.argv) > 3:
        random_seed = int(sys.argv[3])
    else:
        random_seed = 0

    if len(sys.argv) > 2:
        array_name = sys.argv[2]
    else:
        array_name = False

    if len(sys.argv) > 1:
        len_log = int(sys.argv[1])
    else:
        print("    usage: {} array_len_log2 [array_file_name] [random_seed]".format(__file__))
        print("    array_len_log2 = 2 -> array length = 4")
        print("    array_len_log2 = 6 -> array length = 64")
        sys.exit()

    random.seed(random_seed)
    coords = []
    add_jitter_coords(rad_size, ang_size, coords)
    for index in range(len_log):
        if index % 2 == 0:
            rad_size *= 2
        else:
            ang_size *= 2
        add_jitter_coords(rad_size, ang_size, coords)

    if array_name:
        print(str.format("static const float2 {}[{}] =", array_name, len(coords)))
    print(conv_array_string(coords))

  @endcode
 */
#pragma once

static const float2 g_jitterTablePcf[64] =
{
    float2( 4.21857815578105532772e-02, -8.43367430701083664601e-01),
    float2(-1.66526814909220763350e-02,  2.96922406531470617352e-01),
    float2(-1.06374665780382349212e-01, -3.45521852905696924552e-01),
    float2( 5.42648241814168375008e-01,  7.63475573328278533936e-01),
    float2(-1.55045122122251910479e-01,  5.78282315712970729216e-01),
    float2( 1.01310018770242576264e-02, -6.88001749851880561870e-01),
    float2(-5.41276603451248283783e-01,  5.21888233660957712168e-01),
    float2(-6.69885071867917680777e-01, -6.72019666097878665134e-01),
    float2( 1.22985029409499718039e-02,  4.54706838949524849713e-01),
    float2( 4.00334354168925599105e-01, -6.20112671104014120949e-02),
    float2( 2.32326155804074424571e-01,  5.14183027524470093184e-01),
    float2(-3.26788693165450228051e-01, -6.03339478694129849323e-01),
    float2( 7.72374386126136736053e-01,  1.23204314299169448432e-01),
    float2(-4.45379212004159807936e-01, -6.35591042627205338178e-01),
    float2( 9.86986293787213919693e-01, -5.18195017297516449806e-02),
    float2(-9.09197225477999193544e-01,  1.95281945570711268356e-01),
    float2( 8.78123785413316704229e-02, -2.77671865082058690055e-02),
    float2( 1.93947312440399088906e-01,  4.27852204081567363825e-03),
    float2(-2.06133675819526185347e-01, -1.49183652412411493771e-01),
    float2(-4.11351098583102647854e-01,  2.36214692717993696158e-01),
    float2( 3.50058750095615767162e-01, -3.57193658067260721989e-01),
    float2(-5.54174780014121681759e-01, -2.23361040823672196698e-01),
    float2(-6.29913348094886860196e-01,  1.29962593232600148729e-01),
    float2( 3.96119563669521335125e-01,  4.90495219155295036906e-01),
    float2( 7.26077464944819728210e-01, -3.70531027878536270426e-02),
    float2(-5.50726266551596621568e-01,  6.48997654184258587762e-01),
    float2(-6.98067624269093189859e-01, -3.83843898992943299842e-01),
    float2( 8.72900706885875177221e-02,  8.24287559846993866941e-01),
    float2( 6.65413234189638491678e-01, -5.66029707430476647367e-01),
    float2(-5.97071574457786802270e-01, -6.93417220711863180327e-01),
    float2( 6.09778569514949131403e-01,  6.92279483269558570946e-01),
    float2(-8.10051800827623957879e-01,  5.82366304247235455627e-01),
    float2(-8.77200948157437071506e-02, -1.88326609190753474499e-01),
    float2( 9.79306884403889771340e-02,  1.86693151785678163046e-01),
    float2( 4.60071424048798319206e-02, -1.98255149016034859510e-01),
    float2(-5.37585860722621794450e-02,  3.99205315590760584366e-02),
    float2( 2.18621803321778829243e-01, -3.85632280444686503795e-01),
    float2(-2.98409571230789372187e-02,  4.22286693608096730390e-01),
    float2( 3.58654757584850270025e-01,  2.95175871390239985548e-01),
    float2(-3.85631921979480485341e-01, -3.00322047091407640096e-01),
    float2( 4.49800763439369810648e-01,  3.98492182500493397068e-01),
    float2(-4.97878650048238891035e-01,  2.57984038389083569776e-01),
    float2(-3.12055242602567339816e-01, -4.88013525550807125697e-01),
    float2( 5.87078632117718268724e-01, -6.97256834327608099322e-02),
    float2( 6.23692403999373534695e-01,  3.11519734097943645779e-01),
    float2( 6.64426445690903810792e-01, -2.27661844509491811950e-01),
    float2(-3.24662942872471160793e-01,  5.68939932480760024447e-01),
    float2(-5.31263995010459511015e-01, -4.66108719959298256619e-01),
    float2( 5.10323549430644951563e-01,  5.81027848262460677731e-01),
    float2( 2.82695533021593392586e-01, -7.03582425015577883620e-01),
    float2(-5.98419541732174709026e-01, -4.68015982003612274198e-01),
    float2(-3.95281650646674975746e-01,  6.10614720709622194050e-01),
    float2( 7.87454411900813555647e-01,  1.37726315874787758053e-01),
    float2(-7.36310249594224086600e-01,  4.25723821775386646049e-01),
    float2( 6.48232481978769037312e-01, -5.53108138515975955585e-01),
    float2(-1.88558544306507869237e-01, -7.79120748356531223067e-01),
    float2(-3.78614630625567993860e-01,  7.82366459873827913007e-01),
    float2(-8.48582606942172357201e-01, -3.78504015913022351381e-01),
    float2( 1.91472859899175090748e-02, -9.13050020447597532325e-01),
    float2( 8.08826910050883585157e-01,  4.17202663034078935489e-01),
    float2(-9.27062588380768493046e-01, -2.94160352051227980130e-01),
    float2( 6.67882607007592055126e-01, -6.88642020601400450808e-01),
    float2(-1.59349274307943010454e-02,  9.37629353656756814317e-01),
    float2( 9.86975590293644233775e-01,  1.44401793964158337014e-01)
};
