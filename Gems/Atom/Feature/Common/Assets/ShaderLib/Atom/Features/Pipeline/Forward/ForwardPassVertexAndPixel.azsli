/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once


#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>

// --- Vertex Shader ---

VsOutput VertexShader(VsInput IN)
{
    VsOutput OUT = EvaluateVertexGeometry(IN);
    return OUT;
}


// --- Pixel Shader ---

#if !OUTPUT_DEPTH
    [earlydepthstencil]
#endif

ForwardPassOutput PixelShader(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    // ------- Geometry -> Surface -> Lighting -------

    PixelGeometryData geoData = EvaluatePixelGeometry(IN, isFrontFace);

    Surface surface = EvaluateSurface(geoData);

    LightingData lightingData = EvaluateLighting(surface, IN.position);

    // ------- Output -------

    ForwardPassOutput OUT;

    // --- Diffuse Lighting ---

    OUT.m_diffuseColor.rgb = lightingData.diffuseLighting;
    OUT.m_diffuseColor.a = -1;  // Disable Subsurface Scattering

#ifndef FORCE_OPAQUE
    
    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        OUT.m_diffuseColor.a = surface.alpha;
    }

#endif

    // --- Specular Lighting ---

    OUT.m_specularColor.rgb = lightingData.specularLighting.rgb + lightingData.emissiveLighting.rgb;
    OUT.m_specularColor.a = 1.0;

    // --- Roughness and Specular ---

    OUT.m_specularF0.rgb = surface.specularF0;
    OUT.m_specularF0.a = surface.roughnessLinear;

    // --- Albedo ---

    OUT.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    OUT.m_albedo.a = lightingData.specularOcclusion;

    // --- Normal ---

    OUT.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    OUT.m_normal.a = EncodeUnorm2BitFlags(o_enableIBL, o_specularF0_enableMultiScatterCompensation);

    // --- Subsurface ---
#if OUTPUT_SUBSURFACE
    bool applySubsurfaceScattering = o_enableSubsurfaceScattering;

#ifndef FORCE_OPAQUE
    applySubsurfaceScattering = applySubsurfaceScattering && o_opacity_mode != OpacityMode::Blended && o_opacity_mode != OpacityMode::TintedTransparent;
#endif

    if(applySubsurfaceScattering)
    {
        OUT.m_diffuseColor.a = surface.GetSubsurfaceScatteringFactorAndQuality();
        OUT.m_scatterDistance = surface.scatterDistance;
    }
    else
    {
        OUT.m_scatterDistance = float3(0, 0, 0);
    }
#endif

    // --- Depth ---
#if OUTPUT_DEPTH
    // Can be modified in Parallax calculations in EvaluatePixelGeometry
    OUT.m_depth = IN.position.z;
#endif

    // --- Debug Output ---

    DebugModifyOutput(OUT.m_diffuseColor, OUT.m_specularColor, OUT.m_albedo, OUT.m_specularF0, surface.normal,
                    geoData.tangents[0], geoData.bitangents[0],
                    surface.baseColor, surface.albedo, surface.roughnessLinear, surface.metallic);

#if ENABLE_SHADER_DEBUGGING
    if(any(customDebugFloats))
    {
        OUT.m_diffuseColor.rgb *= customDebugFloats.rgb;
    }
#endif

    return OUT;
}
