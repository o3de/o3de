/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

/**
 * This file is focused on providing BRDF (bi-directional reflectance distribution function)
 * implementations. In other words, surface interactions that result light to reflect in some way
 * rather than transmit.
 **/

#include <Atom/RPI/Math.azsli>
#include "Ggx.azsli"
#include "Fresnel.azsli"


// ------- Diffuse Lighting -------

//! Simple Lambertian BRDF. 
real3 DiffuseLambertian(real3 albedo, real3 normal, real3 dirToLight, real3 diffuseResponse)
{
    real NdotL = saturate(dot(normal, dirToLight));
    return albedo * NdotL * INV_PI * diffuseResponse;
}

// Normalized Disney diffuse function taken from Frostbite's PBR course notes (page 10):
// https://media.contentapi.ea.com/content/dam/eacom/frostbite/files/course-notes-moving-frostbite-to-pbr-v32.pdf
real3 NormalizedDisneyDiffuse(real3 albedo, real3 normal, real3 dirToCamera, real3 dirToLight, real roughnessLinear)
{
    real3 halfVector = normalize(dirToLight + dirToCamera);
    real NdotV = saturate(dot(normal, dirToCamera));
    real NdotL = saturate(dot(normal, dirToLight));
    real HdotV = saturate(dot(halfVector, dirToCamera)); // Note that HdotL = HdotV, so we don't need to calculate both

    real energyBias = lerp(0.0, 0.5, roughnessLinear);
    real energyFactor = lerp(1.0, 1.0/1.51, roughnessLinear);
    real fd90 = energyBias + 2.0 * HdotV * HdotV * roughnessLinear;
    real3 f0 = real3(1.0, 1.0, 1.0);
    real lightScatter = FresnelSchlickF90(NdotL, f0, fd90).r;
    real viewScatter = FresnelSchlickF90(NdotV, f0, fd90).r;

    return albedo * lightScatter * viewScatter * energyFactor * NdotL * INV_PI;
}

//! Extended Lambertian + Fresnel diffuse model from Respawn's GDC2017 slides(page 113):
//! https://twvideo01.ubm-us.net/o1/vault/gdc2017/Presentations/Hammon_Earl_PBR_Diffuse_Lighting.pdf
real3 DiffuseTitanfall(real roughnessA, real3 albedo, real3 normal, real3 dirToLight, real3 dirToCamera)
{
    real NdotL = saturate(dot(normal, dirToLight));
    real NdotV = saturate(dot(normal, dirToCamera));
    real LdotV = saturate(dot(dirToLight, dirToCamera));

    // Squared length of L + V <=> | L + V |^2
    real LplusV_LenSq = 2.0 + 2.0 * LdotV;
    real NdotH = (NdotL + NdotV) * rsqrt(LplusV_LenSq);

    real facing = LplusV_LenSq * 0.25;

    // empirical formula for rough surfaces
    real rough = facing * (0.9 - 0.4 * facing) * ((0.5 + NdotH) / NdotH);

    // used double Fresnel as the smooth term, 
    // though it can be replaced with other diffuse function as well like pure lambertian
    real smooth = 1.05 * FresnelSchlickF90(NdotL, real3(1.0, 1.0, 1.0), 0.0).x * FresnelSchlickF90(NdotV, real3(1.0, 1.0, 1.0), 0.0).x;
    real single = INV_PI * lerp(smooth, rough, roughnessA);

    // coarse approximation of multiple scattering
    real multi = 0.1159 * roughnessA;

    return albedo * (single + albedo * multi) * NdotL;
}


// ------- Specular Lighting -------

//! Computes specular response from surfaces with microgeometry. The common form for microfacet
//! implementations is D * G * F / (4.0 * NdotL * NdotV), with D G F being swappable terms.
//! This is currently set up to use GGX terms.
//!
//! @param roughnessA2  alpha roughness ^ 2 (alpha roughness is the unpacked form of artist authored linear roughness and is what is used for lighting calculations)
//! @param specularF0   the fresnel f0 spectral value of the surface
real3 SpecularGGX( real3 dirToCamera, real3 dirToLight, real3 normal, real3 specularF0, real NdotV, real roughnessA2, real3 multiScatterCompensation )
{
    real3 halfVector = normalize(dirToLight + dirToCamera);
    real NdotH = saturate(dot(normal, halfVector));
    real NdotL = saturate(dot(normal, dirToLight));
    real HdotV = saturate(dot(halfVector, dirToCamera)); // Note that HdotL = HdotV, so we don't need to calculate both

    // D, G and F from the lighting equation
    // Note: the division by (4.0 * NdotL * NdotV) is already factored out in the G function as an optimization
    real D = NormalDistributionGGX(NdotH, roughnessA2);
    real G = GeometricShadowingMaskingGGXCorrelated(NdotV, NdotL, roughnessA2);
    real3 F = FresnelSchlick(HdotV, specularF0);

    D = max(0.0, D);
    G = max(0.0, G);

    // Multiply with multiscattering compensation in order to take account for several specular light bounces.
    return multiScatterCompensation * (D * G * F * NdotL);
}

real3 AnisotropicGGX( real3 dirToCamera, real3 dirToLight, real3 normal, real3 tangent, real3 bitangent, real2 anisotropyFactors,
                       real3 specularF0, real NdotV, real3 multiScatterCompensation )
{
    real3 halfVector = normalize(dirToLight + dirToCamera);
    real NdotH = saturate(dot(normal, halfVector));
    real NdotL = saturate(dot(normal, dirToLight));
    real HdotV = saturate(dot(halfVector, dirToCamera)); // Note that HdotL = HdotV, so we don't need to calculate both

    // D, G and F from the lighting equation
    // Note: the division by (4.0 * NdotL * NdotV) is already factored out in the G function as an optimization
    real D = NormalDistibution_AnisotropicGGX( NdotH, halfVector, tangent, bitangent, anisotropyFactors );
    real G = ShadowingMasking_AnisotropicSmithGGXCorrelated(tangent, bitangent, dirToCamera, dirToLight, NdotV, NdotL, anisotropyFactors);
    real3 F = FresnelSchlick(HdotV, specularF0);

    D = max(0.0, D);
    G = max(0.0, G);

    // Multiply with multiscattering compensation in order to take account for several specular light bounces.
    return multiScatterCompensation * (D * G * F * NdotL);
}

real3 ClearCoatGGX(real NdotH, real HdotL, real NdotL, real3 normal, real roughnessA, real3 F)
{
    // Specular Anti-Aliasing correction
    real roughnessA2 = roughnessA * roughnessA;
    //if(o_applySpecularAA)
    //{
    //    roughnessA2 = ApplySpecularAA(roughnessA2, normal);
    //}

    real D = NormalDistributionGGX(NdotH, roughnessA2);
    // Kelemen geometry term : Kelemen. C. and Szirmay-Kalos. L. 2001
    // "A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling"
    real G = 0.25 / max(HdotL * HdotL, 1e-4);
    
    D = max(0.0, D);
    G = max(0.0, G);

    // the common denominator 4 * NdotL * NdotV is included in the simplified G term
    return D * G * F * NdotL;
}

real3 ClearCoatSpecular(const real3 dirToLight, const real3 dirToCamera, const real3 surfaceClearCoatNormal, real surfaceClearCoatFactor, real surfaceClearCoatRoughness, const real3 specular)
{
    real3 halfVector = normalize(dirToLight + dirToCamera);
    real NdotH = saturate(dot(surfaceClearCoatNormal, halfVector));
    real NdotL = saturate(dot(surfaceClearCoatNormal, dirToLight));
    real HdotL = saturate(dot(halfVector, dirToLight));

    // HdotV = HdotL due to the definition of half vector
    real3 clearCoatF = FresnelSchlick(HdotL, 0.04) * surfaceClearCoatFactor;
    real clearCoatRoughness = max(surfaceClearCoatRoughness * surfaceClearCoatRoughness, 0.0005);
    real3 clearCoatSpecular = ClearCoatGGX(NdotH, HdotL, NdotL, surfaceClearCoatNormal, clearCoatRoughness, clearCoatF);

    return specular * (1.0 - clearCoatF) + clearCoatSpecular;
}
