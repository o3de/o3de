/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// ------------------------------------------------------------------------------
// NOTE: The following must be included or defined before including this file:
//       - VSInput          - ObjectSrg
//       - VSOutput         - PassSrg
// ---------------------------------------------------------------------------------

// Options
#include <Atom/Features/PBR/LightingOptions.azsli>

// Shader Resource Groups
#include <viewsrg.srgi>
#include <scenesrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

// Math
#include <Atom/RPI/Math.azsli>
#include <Atom/RPI/TangentSpace.azsli>

// Shadow Coords
#include <Atom/Features/Shadow/DirectionalLightShadow.azsli>

//! @param skipShadowCoords can be useful for example when PixelDepthOffset is enable, because the pixel shader will have to run before the final world position is known
void VertexHelper(in VSInput IN, inout VSOutput OUT, float3 worldPosition, bool skipShadowCoords = false)
{
    OUT.m_worldPosition = worldPosition;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    ConstructTBN(IN.m_normal, IN.m_tangent, IN.m_bitangent, objectToWorld, objectToWorldIT, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);
    
}
