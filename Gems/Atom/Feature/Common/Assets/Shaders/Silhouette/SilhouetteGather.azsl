/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg_all.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/Silhouette/SilhouetteGather_MaterialSrg.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/MaterialInputs/UvSetCount.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_VertexData.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassVertexData.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassPipelineCallbacks.azsli>
#include <Atom/Feature/Common/Assets/Shaders/Materials/BasePBR/BasePBR_VertexEval.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>

VsOutput MainVS(VsInput IN, uint instanceId : SV_InstanceID)
{
    VsSystemValues SV;
    SV.m_instanceId = instanceId;

    const MaterialParameters params = GetMaterialParameters();

    VsOutput OUT = EvaluateVertexGeometry(IN, SV, params);

    // this depth bias helps prevent silhouettes appearing where there are small intersections
    // like the player feet with the ground
    real distanceScale = 1.0 - OUT.position.z / OUT.position.w;
    OUT.position.z += params.m_depthBias * distanceScale;

    if(params.m_outlineSize > EPSILON)
    {
        real3 worldNormal = normalize(mul(GetObjectToWorldMatrixInverseTranspose(SV), IN.normal));
        float4x4 viewProjectionMatrix = GetViewProjectionMatrix(SV);
        real4 screenSpaceNormal = mul(viewProjectionMatrix, real4(worldNormal, 0.0));

        // use a size scale so input m_outlineSize can be in range 0..100
        const real sizeScale = 1.0 / 400.0;
        OUT.position.xy += screenSpaceNormal.xy * (params.m_outlineSize * OUT.position.w * sizeScale) * distanceScale;
    }

    return OUT;
}

struct PSOutput
{
    float4 m_color : SV_Target0;
};

PSOutput MainPS(VsOutput IN)
{
    PSOutput OUT;

    const MaterialParameters params = GetMaterialParameters();
    // write at least something in the alpha to distinguish between silhouette and background
    OUT.m_color = float4(TransformColor(params.m_color.rgb, ColorSpaceId::ACEScg,ColorSpaceId::SRGB), max(0.01, params.m_alpha));

    return OUT;
}
