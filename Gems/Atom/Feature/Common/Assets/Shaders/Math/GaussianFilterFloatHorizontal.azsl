/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

// [GFX TODO][ATOM-3365] optimization using intermediary results in groupshared memory.

#include <Atom/Features/Math/Filter.azsli>
#include <Atom/Features/Math/FilterPassSrg.azsli>
#include <Atom/Features/Shadow/ShadowmapAtlasLib.azsli>

[numthreads(16,16,1)]
void MainCS(uint3 dispatchId: SV_DispatchThreadID)
{
    const float3 inputSize = GetImageSize(FilterPassSrg::m_inputImage);
    const float3 outputSize = GetImageSize(FilterPassSrg::m_outputImage);

    const uint shadowmapIndex = GetShadowmapIndex(
        FilterPassSrg::m_shadowmapIndexTable,
        dispatchId,
        inputSize.x);
    // Early return if thread is outside of shadowmaps.
    if (shadowmapIndex == ~0)
    {
        return;
    }
    const FilterParameter filterParameter = FilterPassSrg::m_filterParameters[shadowmapIndex];
    const uint shadowmapSize = filterParameter.m_shadowmapSize;
    // Early return if filter is disabled.
    if (!filterParameter.m_isEnabled || shadowmapSize <= 1)
    {
        return; // early return if filter parameter is empty.
    }

    const uint sourceMin = filterParameter.m_shadowmapOriginInSlice.x;
    const uint sourceMax = sourceMin + shadowmapSize - 1;

    uint filterTableSize = 0;
    FilterPassSrg::m_filterTable.GetDimensions(filterTableSize);
    if (filterTableSize == 0 || filterParameter.m_parameterCount == 0)
    {
        return; // If filter parameter is empty, early return.
    }    

    // [GFX TODO][ATOM-5676] pass proper source min/max for each shadowmap
    const float result = FilteredFloat(
        dispatchId,
        FilterPassSrg::m_inputImage,
        uint2(1, 0),     // horizontal
        sourceMin,
        sourceMax,
        FilterPassSrg::m_filterTable,
        filterParameter.m_parameterOffset,
        filterParameter.m_parameterCount);

    FilterPassSrg::m_outputImage[dispatchId].r = result;
}
