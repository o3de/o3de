/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/Features/PostProcessing/FullscreenVertexUtil.azsli>
#include <Atom/Features/PostProcessing/PostProcessUtil.azsli>
#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Fresnel.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2DMS<float>  m_depth;
    Texture2D<float>    m_depthLinear;
    Texture2DMS<float4> m_normal;       // RGB10 = Normal (Encoded), A2 = Flags
    Texture2DMS<float4> m_specularF0;   // RGB8 = SpecularF0, A8 = Roughness
    Texture2DMS<float4> m_reflection;
    Texture2D<float4>   m_previousFrame;
    Texture2D<float4>   m_rayTracingCoords;
    Texture2D<float4>   m_fallbackColor;
   
    // output image scale and dimensions
    float m_invOutputScale;
    uint  m_outputWidth;
    uint  m_outputHeight;

    // SSR settings
    bool  m_rayTracingEnabled;
    bool  m_rayTraceFallbackData;
    float m_maxDepthThreshold;
    float m_maxRayDistance;
    float m_maxRoughness;
    float m_roughnessBias;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU  = Clamp;
        AddressV  = Clamp;
        AddressW  = Clamp;
    };
}

#include "ReflectionCommon.azsli"
#include "ReflectionScreenSpaceTrace.azsli"

struct VSInput
{
    uint m_vertexID : SV_VertexID;
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float2 m_texCoord : TEXCOORD0;
};

// Vertex Shader
VSOutput MainVS(VSInput input)
{
    VSOutput OUT;

    float4 posTex = GetVertexPositionAndTexCoords(input.m_vertexID);
    OUT.m_texCoord = float2(posTex.z, posTex.w);
    OUT.m_position = float4(posTex.x, posTex.y, 0.0, 1.0);
    return OUT;
}

// Pixel Shader
struct PSOutput
{    
    float4 m_color  : SV_Target0;
    float4 m_coords : SV_Target1;
};

PSOutput MainPS(VSOutput IN)
{
    float2 coords = IN.m_position.xy;
    float2 UV = IN.m_texCoord.xy;
    float2 fullScreenCoords = coords * PassSrg::m_invOutputScale;
    uint2  fullScreenDimensions = uint2(PassSrg::m_outputWidth, PassSrg::m_outputHeight) * PassSrg::m_invOutputScale;

    float depth = PassSrg::m_depth.Load(fullScreenCoords, 0).r;
    if (depth == 0.0f)
    {
        // skip tracing rays at max scene depth
        discard;
    }
       
    float4 specularF0 = PassSrg::m_specularF0.Load(fullScreenCoords, 0);
    float roughness = specularF0.a;
    if (roughness > PassSrg::m_maxRoughness)
    {
        // outside of roughness range for SSR
        discard;
    }

    roughness = saturate(roughness + PassSrg::m_roughnessBias);

    // compute view space surface position
    float2 ndcPos = float2(UV.x, 1.0f - UV.y) * 2.0f - 1.0f;
    float4 projectedPos = float4(ndcPos, depth, 1.0f);
    float4 positionVS = mul(ViewSrg::m_projectionMatrixInverse, projectedPos);
    positionVS /= positionVS.w;

    // normalize the viewspace position to get the camera-to-position vector
    float3 cameraToPositionVS = normalize(positionVS.xyz);

    // retrieve surface normal
    float4 encodedNormal = PassSrg::m_normal.Load(fullScreenCoords, 0);
    float3 normalWS = DecodeNormalSignedOctahedron(encodedNormal.rgb);
    float3 normalVS = normalize(mul(ViewSrg::m_viewMatrix, float4(normalWS, 0.0f)).xyz);

    // reflect view ray around surface normal
    float3 reflectDirVS = normalize(reflect(cameraToPositionVS, normalVS));
 
    // retrieve the hitCoords from RayTracing, if enabled, or traditional raymarch
    float2 hitCoords = float2(0.0f, 0.0f);
    bool foundHit = false; 

    if (PassSrg::m_rayTracingEnabled)
    {
        float4 rayTraceResult = PassSrg::m_rayTracingCoords.Load(int3(coords, 0));
        hitCoords = rayTraceResult.xy;   
        foundHit = (rayTraceResult.z == (float)ReflectionScreenSpaceRayTracingResult::Hit);
    }
    else
    {
        foundHit = TraceRayScreenSpace(positionVS.xyz, reflectDirVS, fullScreenDimensions, hitCoords);
    }
    
    float4 result = float4(0.0f, 0.0f, 0.0f, 0.0f);
    if (foundHit)
    {
        // check for RayTracing fallback
        float4 fallbackColor = PassSrg::m_fallbackColor.Load(int3(coords, 0));
        if (fallbackColor.a > 0.0f)
        {
            result.rgb = fallbackColor.rgb;
            result.a = 1.0f;
        }
        else
        {
            // reconstruct the world space position of the trace coordinates
            float2 traceUV = saturate(hitCoords / fullScreenDimensions);
            float traceDepth = PassSrg::m_depth.Load(hitCoords, 0).r;
            float2 traceNDC = float2(traceUV.x, 1.0f - traceUV.y) * 2.0f - 1.0f;
            float4 traceProjectedPos = float4(traceNDC, traceDepth, 1.0f);
            float4 tracePositionVS = mul(ViewSrg::m_projectionMatrixInverse, traceProjectedPos);
            tracePositionVS /= tracePositionVS.w;
            float4 tracePositionWS = mul(ViewSrg::m_viewMatrixInverse, tracePositionVS);
        
            // reproject to the previous frame image coordinates
            float4 tracePrevNDC = mul(ViewSrg::m_viewProjectionPrevMatrix, tracePositionWS);
            tracePrevNDC /= tracePrevNDC.w;
            float2 tracePrevUV = float2(tracePrevNDC.x, -1.0f * tracePrevNDC.y) * 0.5f + 0.5f;

            // sample the previous frame image
            result.rgb = PassSrg::m_previousFrame.SampleLevel(PassSrg::LinearSampler, tracePrevUV, 0).rgb;

            if (!PassSrg::m_rayTracingEnabled || !PassSrg::m_rayTraceFallbackData)
            {
                // fade rays close to screen edge
                const float ScreenFadeDistance = 0.95f;
                float2 fadeAmount = max(max(0.0f, traceUV - ScreenFadeDistance), max(0.0f, 1.0f - traceUV - ScreenFadeDistance));
                fadeAmount /= (1.0f - ScreenFadeDistance);
                result.a = 1.0f - max(fadeAmount.x, fadeAmount.y);
            }
            else
            {
                result.a = 1.0f;            
            }
        }

        // apply surface specular
        result.rgb *= specularF0.rgb;
    }

    PSOutput OUT;
    OUT.m_color = result;
    OUT.m_coords = float4(hitCoords.xy, 0.0f, (float)foundHit);
    return OUT;
}
