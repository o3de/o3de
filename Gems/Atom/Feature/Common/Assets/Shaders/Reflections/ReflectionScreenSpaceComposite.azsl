/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/RPI/Math.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/PostProcessUtil.azsli>
#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Fresnel.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4>   m_reflection;
    Texture2D<float>    m_depthLinear;
    Texture2D<float2>   m_downsampledDepthLinear;
    Texture2DMS<float4> m_normal;       // RGB10 = Normal (Encoded), A2 = Flags
    Texture2DMS<float4> m_specularF0;   // RGB8 = SpecularF0, A8 = Roughness

    // output image scale and dimensions    
    float m_outputScale;
    uint  m_outputWidth;
    uint  m_outputHeight;

    // SSR settings
    float m_maxRoughness;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

float3 SampleReflection(float2 reflectionUV, float depth, float3 normal, uint2 invDimensions)
{
    const float DepthTolerance = 0.001f;

    // attempt to trivially accept the downsampled reflection texel
    float downsampledDepth = PassSrg::m_downsampledDepthLinear.SampleLevel(PassSrg::LinearSampler, reflectionUV, 0).r;
    if (abs(depth - downsampledDepth) <= DepthTolerance)
    {
        // use this reflection sample
        float3 reflection = PassSrg::m_reflection.SampleLevel(PassSrg::LinearSampler, reflectionUV, 0).rgb;
        return reflection;
    }
    
    // neighborhood search surrounding the downsampled texel, searching for the closest matching depth
    float closestDepthDelta = 1.0f;
    int2 closestOffsetUV = float2(0.0f, 0.0f);
    for (int y = -4; y <= 4; ++y)
    {
        for (int x = -4; x <= 4; ++x)
        {
            float2 offsetUV = float2(x * invDimensions.x, y * invDimensions.y);
            float downsampledDepth = PassSrg::m_downsampledDepthLinear.SampleLevel(PassSrg::LinearSampler, reflectionUV + offsetUV, 0).r;
            float depthDelta = abs(depth - downsampledDepth);

            if (depthDelta <= DepthTolerance)
            {
                // depth is within tolerance, use this texel
                float3 reflection = PassSrg::m_reflection.SampleLevel(PassSrg::LinearSampler, reflectionUV + offsetUV, 0).rgb;
                return reflection;
            }

            if (closestDepthDelta > depthDelta)
            {
                closestDepthDelta = depthDelta;
                closestOffsetUV = offsetUV;
            }
        }
    }
    
    float3 reflection = PassSrg::m_reflection.SampleLevel(PassSrg::LinearSampler, reflectionUV + closestOffsetUV, 0).rgb;
    return reflection;
}

// Pixel Shader
PSOutput MainPS(VSOutput IN, in uint sampleIndex : SV_SampleIndex)
{
    float2 fullScreenCoords = IN.m_position.xy;
    float2 coords = fullScreenCoords * PassSrg::m_outputScale;
    uint2 invDimensions = 1.0f / (uint2(PassSrg::m_outputWidth, PassSrg::m_outputHeight) * PassSrg::m_outputScale);

    // check reflection data mip0 to see if there was a hit
    float4 reflectionData = PassSrg::m_reflection.Load(uint3(coords, 0));
    if (reflectionData.a <= 0.0f)
    {
        // fallback to the cubemap reflections currently in the reflection buffer
        discard;
    }

    // load roughness
    float4 specularF0 = PassSrg::m_specularF0.Load(fullScreenCoords, sampleIndex);
    float roughness = specularF0.a;
    if (roughness > PassSrg::m_maxRoughness)
    {
        // fallback to the cubemap reflections currently in the reflection buffer
        discard;
    }

    // retrieve surface normal
    float4 encodedNormal = PassSrg::m_normal.Load(fullScreenCoords, sampleIndex);
    float3 normalWS = DecodeNormalSignedOctahedron(encodedNormal.rgb);
    
    // upsample reflection color
    float depth = PassSrg::m_depthLinear.Load(uint3(fullScreenCoords, 0)).r;
    float3 reflectionColor = SampleReflection(IN.m_texCoord, depth, normalWS, invDimensions);

    PSOutput OUT;
    OUT.m_color = float4(reflectionColor, reflectionData.w);
    return OUT;
}
