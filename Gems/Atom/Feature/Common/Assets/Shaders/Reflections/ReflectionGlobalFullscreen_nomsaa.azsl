/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

// This shader file will be removed when AZSLc can automatically generate nomsaa shader variants
// [GFX TODO][ATOM-13646] AZSLc support for generating non-MSAA shader variants

// Specular IBL reflection pipeline:
// Stencil -> BlendWeight -> GlobalFullscreen -> RenderOuter -> RenderInner -> Composite
//                           ----------------
//
// This shader performs a fullscreen pass on stenciled pixels that require specular IBL.
// It outputs some amount of the Global IBL cubemap as determined by the blend weight texture
// from the previous pass.  If the probes are going to write a total of >= 100% of local IBL 
// to this pixel then no Global IBL will be written since it is fully covered by probe IBL. 
// Note that this shader only considers pixels stenciled to non-probe space or probe outer 
// volumes (stencil value == UseSpecularIBLPass).  Inner probe volumes never receive Global IBL.
//
// Additional notes:
// - MSAA Input: The shader calculates the specular from the sub-pixels of the incoming textures 
//   and box-filters the result.
// - MSAA Output: Since this is a fullscreen pass the shader will write identical values to all
//   sub-pixel samples that pass the sub-pixel stencil test. 
// - An output of (0.0f, 0.0f, 0.0f) will be written if no global IBL will blend at this location.  
//   This is necessary to clear the pixel since the probes additively write their specular values
//   in the following passes.

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/Features/PostProcessing/FullscreenVertexUtil.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertexInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/MatrixUtility.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Fresnel.azsli>
#include <Atom/RPI/Math.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float>  m_depth;
    Texture2D<float4> m_normal;       // RGB10 = Normal (Encoded), A2 = Flags
    Texture2D<float4> m_specularF0;   // RGB8 = SpecularF0, A8 = Roughness
    Texture2D<float>  m_blendWeight;
    Texture2D<float2>   m_brdfMap;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

float4 ReconstructWorldPositionFromDepth(float2 screenCoords)
{
    float depth = PassSrg::m_depth.Load(int3(screenCoords,0)).r;

    uint2 dimensions;
    uint samples;
    PassSrg::m_depth.GetDimensions(dimensions.x, dimensions.y);
    float2 UV = saturate(screenCoords / dimensions.xy);

    float x = UV.x * 2.0f - 1.0f;
    float y = (1.0f - UV.y) * 2.0f - 1.0f;
    float4 projectedPos = float4(x, y, depth, 1.0f);
    float4 positionVS = mul(ViewSrg::m_projectionMatrixInverse, projectedPos);
    positionVS /= positionVS.w;
    float4 positionWS = mul(ViewSrg::m_viewMatrixInverse, positionVS);
    return positionWS;
}

// Vertex Shader
VSOutput MainVS(VSInput input)
{
    VSOutput OUT;

    float4 posTex = GetVertexPositionAndTexCoords(input.m_vertexID);
    OUT.m_texCoord = float2(posTex.z, posTex.w);
    OUT.m_position = float4(posTex.x, posTex.y, 0.0, 1.0);
    return OUT;
}

// Pixel Shader
PSOutput MainPS(VSOutput IN)
{
    float4 encodedNormal = PassSrg::m_normal.Load(int3(IN.m_position.xy, 0));
    float3 normal = DecodeNormalSignedOctahedron(encodedNormal.rgb);
    bool multiScatterCompensationEnabled = (encodedNormal.a > 0.0f);

    // reconstruct world space position from the depth at this location in screenspace
    float3 positionWS = ReconstructWorldPositionFromDepth(IN.m_position.xy).xyz;

    // sample blend weight at this location
    float blendWeight = PassSrg::m_blendWeight.Load(int3(IN.m_position.xy, 0)).r;

    // blend weight for this pixel is the remainder of total blends for local probes
    // E.g., 0.2f probes = 0.8f global, 0.0f probes = 1.0f global, >1.0f probes = 0.0f global
    blendWeight = 1.0f - min(blendWeight, 1.0f);

    float3 specularF0 = PassSrg::m_specularF0.Load(int3(IN.m_position.xy, 0)).rgb;
    float roughness = PassSrg::m_specularF0.Load(int3(IN.m_position.xy, 0)).a;

    float3 dirToCamera = normalize(ViewSrg::m_worldPosition.xyz - positionWS);
    float3 reflectDir = reflect(-dirToCamera, normal);
    reflectDir = MultiplyVectorQuaternion(reflectDir, SceneSrg::m_iblOrientation);
    float3 globalSpecular = SceneSrg::m_specularEnvMap.SampleLevel(SceneSrg::m_samplerEnv, GetCubemapCoords(reflectDir), GetRoughnessMip(roughness)).rgb;

    float NdotV = saturate(dot(normal, dirToCamera));
    NdotV = max(NdotV, 0.01f);    // [GFX TODO][ATOM-4466] This is a current band-aid for specular noise at grazing angles.
    float2 brdf = PassSrg::m_brdfMap.Sample(PassSrg::LinearSampler, GetBRDFTexCoords(roughness, NdotV)).rg;
    float3 multiScatterCompensation = GetMultiScatterCompensation(specularF0, brdf, multiScatterCompensationEnabled);
    float3 specular = blendWeight * globalSpecular * multiScatterCompensation * (specularF0 * brdf.x + brdf.y);

    // apply exposure setting
    specular *= pow(2.0, SceneSrg::m_iblExposure);

    PSOutput OUT;
    OUT.m_color = float4(specular, 1.0f);
    return OUT;
}
