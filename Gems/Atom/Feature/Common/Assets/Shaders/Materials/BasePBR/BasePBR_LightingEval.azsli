/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#ifndef InitializeLightingData
#define InitializeLightingData InitializeLightingData_BasePBR
#endif

#ifndef FinalizeLightingData
#define FinalizeLightingData FinalizeLightingData_BasePBR
#endif

void InitializeLightingData_BasePBR(Surface surface, float3 viewPositions[MAX_SHADING_VIEWS], inout LightingData lightingData)
{
    lightingData.Init(surface.position, surface.GetSpecularNormal(), surface.roughnessLinear, viewPositions);

    // Diffuse and Specular response (used in IBL calculations)
    real3 specularResponse = FresnelSchlickWithRoughness(lightingData.GetSpecularNdotV(), surface.GetSpecularF0(), surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - specularResponse;

    // Multiscatter
    lightingData.CalculateMultiscatterCompensation(surface.GetSpecularF0(), o_specularF0_enableMultiScatterCompensation);
}

void FinalizeLightingData_BasePBR(Surface surface, inout LightingData lightingData)
{
    lightingData.FinalizeLighting(surface);
}

// use the default PBR lights for all supported light types
#include <Atom/Features/PBR/Lights/Lights.azsli>

