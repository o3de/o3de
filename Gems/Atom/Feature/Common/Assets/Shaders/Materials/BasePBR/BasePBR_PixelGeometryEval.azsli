/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluatePixelGeometry function in this file without making it the final EvaluatePixelGeometry
// used in your shader. Simply #define EvaluatePixelGeometry to your custom definition before including this file
//
#ifndef EvaluatePixelGeometry
#define EvaluatePixelGeometry EvaluatePixelGeometry_BasePBR
#endif

#include "../MaterialFunctions/EvaluateTangentFrame.azsli"
#include <Atom/Features/InstancedTransforms.azsli>

PixelGeometryData EvaluatePixelGeometry_BasePBR(
    float3 positionWS,
    real3 normalWS,
    real3 tangentWS,
    real3 bitangentWS,
    float2 uvs[UvSetCount],
    bool isFrontFace)
{
    PixelGeometryData geoData;

    geoData.positionWS = positionWS;
    geoData.vertexNormal = normalize(normalWS);

    geoData.uvs = uvs;
    geoData.isFrontFace = isFrontFace;

    if (NeedsTangentFrame())
    {
        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(geoData.vertexNormal, positionWS, isFrontFace, uvs[i], i,
                tangentWS, bitangentWS, geoData.tangents[i], geoData.bitangents[i]);
        }
    }

    return geoData;
}

PixelGeometryData EvaluatePixelGeometry_BasePBR(VsOutput IN, bool isFrontFace)
{
    real4x4 objectToWorld = real4x4(GetObjectToWorldMatrix(IN.m_instanceId));
    real3x3 objectToWorldIT = real3x3(GetObjectToWorldMatrixInverseTranspose(IN.m_instanceId));

    real3 normalWS, tangentWS, bitangentWS;
    ConstructTBN(real3(IN.normal), real4(IN.tangent), objectToWorld, objectToWorldIT, normalWS, tangentWS, bitangentWS);

    return EvaluatePixelGeometry_BasePBR(
        IN.worldPosition,
        normalWS,
        tangentWS,
        bitangentWS,
        IN.uvs,
        isFrontFace);
}
