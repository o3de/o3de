/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the LightingData class in this file without making it the final LightingData
// used in your shader. Simply #define LightingData to your custom definition before including this file
//
#ifndef LightingData
#define LightingData        LightingData_BasePBR
#endif

#include <viewsrg_all.srgi>
#include <Atom/Features/Debug.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>

#ifndef MAX_SHADING_VIEWS
#define MAX_SHADING_VIEWS 1
#endif

#ifndef GET_SHADING_VIEW_COUNT
#define GET_SHADING_VIEW_COUNT 1
#endif

class LightingData_BasePBR
{
    // Lighting outputs
    real3 diffuseLighting;
    real3 specularLighting[MAX_SHADING_VIEWS];

    // Factors for the amount of diffuse and specular lighting applied
    real3 diffuseResponse;

    // Shrink (absolute) offset towards the normal opposite direction to ensure correct shadow map projection
    real shrinkFactor;

    // Normalized direction from surface to camera
    float3 dirToCamera[MAX_SHADING_VIEWS];

    // Scaling term to approximate multiscattering contribution in specular BRDF
    real3 multiScatterCompensation;

    // Lighting emitted from the surface
    real3 emissiveLighting;

    // BRDF texture values
    real2 brdf[MAX_SHADING_VIEWS];

    // Normal . View
    float NdotV[MAX_SHADING_VIEWS];

#if ENABLE_TRANSMISSION
    real3 translucentBackLighting;
#endif

    // Occlusion factors (0 = dark, 1 = light)
    real diffuseAmbientOcclusion;
    real specularOcclusion;

    // Note: The intent is that the LightingData_BasePBR definition is included in BasePBR_Defines.azsli, then the render pipeline 
    // declares the SampleBrdfMap - function in the PipelineCallbacks.azsli, and then we use it in LightingData_BasePBR::Init(), which *should* be placed
    // in BasePBR_LightingEval.azsli (which is included via BasePBR.azsli).
    // Unfortunately AZSLC messes up with class member functions and either drops the SampleBRDFMap - function, or crashes, which forces
    // us to move the BRDF-Initialisation to the non-class function BasePBR_InitLightingData().
    // void Init(float3 positionWS, real3 specularNormal, float3 viewPosition[MAX_SHADING_VIEWS]);
    void CalculateMultiscatterCompensation(real3 specularF0, bool enabled);
    void FinalizeLighting(Surface surface);
    float GetSpecularNdotV() { return NdotV[0]; }
    float GetSpecularNdotV(uint i) { return NdotV[i]; }
};


void LightingData_BasePBR::CalculateMultiscatterCompensation(real3 specularF0, bool enabled)
{
    // Default to using 0 for brdf viewIndex as we don't want to pay the VGPR cost of
    // a real3 per view for multiScatterCompensation as it's a minor effect
    multiScatterCompensation = GetMultiScatterCompensation(specularF0, brdf[0], enabled);
}

void LightingData_BasePBR::FinalizeLighting(Surface surface)
{
    [unroll]
    for(uint i = 0; i < GET_SHADING_VIEW_COUNT; ++i)
    {
        specularLighting[i] *= specularOcclusion;
        if(!IsSpecularLightingEnabled())
        {
            specularLighting[i] = real3(0, 0, 0);
        }
    }

    diffuseLighting *= diffuseAmbientOcclusion;
    if(!IsDiffuseLightingEnabled())
    {
        diffuseLighting = real3(0, 0, 0);
    }

    // Transmitted light
#if ENABLE_TRANSMISSION
    if(o_transmission_mode != TransmissionMode::None)
    {
        diffuseLighting += translucentBackLighting * surface.transmission.tint;
    }
#endif
}
