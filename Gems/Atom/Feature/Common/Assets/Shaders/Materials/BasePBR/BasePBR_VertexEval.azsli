/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic allows you to use the EvaluateVertexGeometry function in this file without making it the final
// EvaluateVertexGeometry used in your shader. Simply #define EvaluateVertexGeometry before including this file
//
#ifndef EvaluateVertexGeometry
#define EvaluateVertexGeometry EvaluateVertexGeometry_BasePBR
#endif

#include <viewsrg_all.srgi>
#include <Atom/RPI/TangentSpace.azsli>

VsOutput EvaluateVertexGeometry_BasePBR(
    const MaterialParameters params,
    float3 position,
    float3 normal,
    float4 tangent,
    float2 uv0,
    float2 uv1,
    VsSystemValues SV,
    bool useVertexColor0,
    float4 color0)
{
    VsOutput output;


#if PIPELINE_VERTEX_POSITION
    float4x4 objectToWorld = GetObjectToWorldMatrix(SV);
    float4 worldPosition = mul(objectToWorld, float4(position, 1.0));
    float4x4 viewProjectionMatrix = GetViewProjectionMatrix(SV);
    output.position = mul(viewProjectionMatrix, worldPosition);
#if PIPELINE_VERTEX_POSITIONWS
    output.worldPosition = worldPosition.xyz;
#endif // PIPELINE_VERTEX_POSITIONWS
#endif // PIPELINE_VERTEX_POSITION

#if PIPELINE_VERTEX_UV
    // By design, only UV0 is allowed to apply transforms.
    output.uvs[0] = mul(params.m_uvMatrix, float3(uv0, 1.0)).xy;
    output.uvs[1] = uv1;
#endif // PIPELINE_VERTEX_UV

#if PIPELINE_VERTEX_NORMAL
    output.normal = normal;
#endif // PIPELINE_VERTEX_NORMAL

#if PIPELINE_VERTEX_TANGENT
    output.tangent = tangent;
#endif // PIPELINE_VERTEX_TANGENT

#if PIPELINE_VERTEX_COLOR
    if(useVertexColor0)
    {
        output.color0 =  color0;
    }
    else
    {
        output.color0 = float4(1,1,1,1);
    }
#endif // PIPELINE_VERTEX_COLOR
    return output;
}

void GetVertexColor(VsInput IN, out float4 color, out bool useVertexColor)
{
#if PIPELINE_VERTEX_COLOR
    color = IN.m_optional_color0;
    useVertexColor = o_color0_isBound;
#else
    color = float4(1.0f, 1.0f, 1.0f, 1.0f);
    useVertexColor = false;
#endif
}

VsOutput EvaluateVertexGeometry_BasePBR(VsInput IN, VsSystemValues SV, const MaterialParameters params)
{
    float4 color0;
    bool useVertexColor0;
    GetVertexColor(IN, color0, useVertexColor0);

    return EvaluateVertexGeometry_BasePBR(
        params,
        IN.position,
        IN.normal,
        IN.tangent,
        IN.uv0,
        IN.uv1,
        SV,
        useVertexColor0,
        color0);
}

VsOutput EvaluateVertexGeometry_BasePBR(
    const MaterialParameters params,
    float3 position,
    float3 normal,
    float4 tangent,
    float2 uv0,
    float2 uv1,
    uint instanceId)
{
    VsSystemValues SV;
    SV.m_instanceId = instanceId;

    return EvaluateVertexGeometry_BasePBR(
        params,
        position,
        normal,
        tangent,
        uv0,
        uv1,
        SV,
        false,
        float4(1.0f, 1.0f, 1.0f, 1.0f));
}
