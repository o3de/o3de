/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#ifndef ENABLE_VERTEX_COLOR
#define ENABLE_VERTEX_COLOR 0
#endif

// This #define magic lets you use the EvaluateSurface function in this file without making it the final EvaluateSurface
// used in your shader. Simply #define EvaluateSurface to your custom definition before including this file
//
#ifndef EvaluateSurface
#define EvaluateSurface EvaluateSurface_BasePBR
#endif

#include <Atom/Features/MatrixUtility.azsli>

real3 BlendVertexColor(real3 baseColor, real3 vertexColor, real factor)
{
#if ENABLE_VERTEX_COLOR
    // Check to ensure the material is using vertex colors (i.e o_useVertexColor) and that the mesh supports color vertex stream (i.e o_color0_isBound)
    if(o_useVertexColor && o_color0_isBound)
    {
        baseColor = BlendBaseColor(vertexColor, baseColor, factor, o_vertexColorBlendMode, true);
    }
#endif
    return baseColor;
}

Surface EvaluateSurface_BasePBR(
    const MaterialParameters params,
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    float4 uvDxDy,
    bool customDerivatives,
    float4 vertexColor)
{
    Surface surface;
    surface.position = positionWS;

    // ------- Normal -------

    surface.vertexNormal = vertexNormal;
    float2 normalUv = uvs[params.m_normalMapUvIndex];

    real3x3 uvMatrix = params.m_normalMapUvIndex == 0 ? real3x3(params.m_uvMatrix) : CreateIdentity3x3_real(); // By design, only UV0 is allowed to apply transforms.
    if (customDerivatives)
    {
        surface.normal = GetNormalInputWS(GetMaterialTexture(params.m_normalMap), GetMaterialTextureSampler(), normalUv, params.m_flipNormalX, params.m_flipNormalY, isFrontFace, vertexNormal,
                                           tangents[params.m_normalMapUvIndex], bitangents[params.m_normalMapUvIndex], uvMatrix, o_normal_useTexture, real(params.m_normalFactor), uvDxDy, customDerivatives);
    }
    else
    {
        surface.normal = GetNormalInputWS(GetMaterialTexture(params.m_normalMap), GetMaterialTextureSampler(), normalUv, params.m_flipNormalX, params.m_flipNormalY, isFrontFace, vertexNormal,
                                           tangents[params.m_normalMapUvIndex], bitangents[params.m_normalMapUvIndex], uvMatrix, o_normal_useTexture, real(params.m_normalFactor), float4(0.0f, 0.0f, 0.0f, 0.0f), false);
    }

    // ------- Base Color -------

    float2 baseColorUv = uvs[params.m_baseColorMapUvIndex];
    real3 sampledColor = GetBaseColorInput(GetMaterialTexture(params.m_baseColorMap), GetMaterialTextureSampler(), baseColorUv, real3(params.m_baseColor.rgb), o_baseColor_useTexture, uvDxDy, customDerivatives);
    real3 baseColor = BlendBaseColor(sampledColor, real3(params.m_baseColor.rgb), real(params.m_baseColorFactor), o_baseColorTextureBlendMode, o_baseColor_useTexture);
    baseColor = BlendVertexColor(baseColor, real3(vertexColor.rgb), real(params.m_vertexColorFactor));
    
    // ------- Metallic -------

    float2 metallicUv = uvs[params.m_metallicMapUvIndex];
    real metallic = GetMetallicInput(GetMaterialTexture(params.m_metallicMap), GetMaterialTextureSampler(), metallicUv, real(params.m_metallicFactor), o_metallic_useTexture, uvDxDy, customDerivatives);

    // ------- Specular -------

    float2 specularUv = uvs[params.m_specularF0MapUvIndex];
    real specularF0Factor = GetSpecularInput(GetMaterialTexture(params.m_specularF0Map), GetMaterialTextureSampler(), specularUv, real(params.m_specularF0Factor), o_specularF0_useTexture, uvDxDy, customDerivatives);

    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // ------- Roughness -------

    float2 roughnessUv = uvs[params.m_roughnessMapUvIndex];
    surface.roughnessLinear = GetRoughnessInput(GetMaterialTexture(params.m_roughnessMap), GetMaterialTextureSampler(), roughnessUv, real(params.m_roughnessFactor),
                                        real(params.m_roughnessLowerBound), real(params.m_roughnessUpperBound), o_roughness_useTexture, uvDxDy, customDerivatives);
    surface.CalculateRoughnessA();

    return surface;
}

float4 GetVertexColor(VsOutput IN)
{
#if ENABLE_VERTEX_COLOR
    return IN.color0;
#else
    return float4(1.0f, 1.0f, 1.0f, 1.0f);
#endif
}

// helper function to keep compatible with the previous version
// because dxc compiler doesn't allow default parameters on functions with overloads
Surface EvaluateSurface_BasePBR(
    const MaterialParameters params,
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    float4 uvDxDy,
    bool customDerivatives)
{
    return EvaluateSurface_BasePBR(
        params,
        positionWS,
        vertexNormal,
        tangents,
        bitangents,
        uvs,
        isFrontFace,
        uvDxDy,
        customDerivatives,
        float4(1.0f, 1.0f, 1.0f, 1.0f));
}

Surface EvaluateSurface_BasePBR(
    const MaterialParameters params,
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace)
{
    return EvaluateSurface_BasePBR(
        params,
        positionWS,
        vertexNormal,
        tangents,
        bitangents,
        uvs,
        isFrontFace,
        float4(0.0f, 0.0f, 0.0f, 0.0f),
        false);
}

Surface EvaluateSurface_BasePBR(VsOutput IN, PixelGeometryData geoData, const MaterialParameters params, float4 uvDxDy, bool customDerivatives)
{
    return EvaluateSurface_BasePBR(
        params,
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace,
        uvDxDy,
        customDerivatives,
        GetVertexColor(IN));
}

Surface EvaluateSurface_BasePBR(VsOutput IN, PixelGeometryData geoData, const MaterialParameters params)
{
    return EvaluateSurface_BasePBR(
        params,
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace,
        float4(0.0f, 0.0f, 0.0f, 0.0f),
        false,
        GetVertexColor(IN));
}
