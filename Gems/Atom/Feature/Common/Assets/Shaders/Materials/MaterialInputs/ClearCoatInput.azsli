/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/RPI/TangentSpace.azsli>

// This file provides utilities for common handling of inputs for clear coat features of PBR materials.

// These macros can be used to declare common shader inputs for this feature. 
// Use the COMMON_SRG_INPUTS_* macro in your material SRG definition, and use the COMMON_OPTIONS_* macro at the global scope in your shader. Then you can pass these variables to the Get*Input() function below.
// You can optionally provide a prefix for the set of inputs which corresponds to a prefix string supplied by the .materialtype file. This is common for multi-layered material types.

#define COMMON_SRG_INPUTS_CLEAR_COAT(prefix)        \
float       prefix##m_clearCoatFactor;              \
float       prefix##m_clearCoatRoughness;           \
Texture2D   prefix##m_clearCoatInfluenceMap;        \
uint        prefix##m_clearCoatInfluenceMapUvIndex; \
Texture2D   prefix##m_clearCoatRoughnessMap;        \
uint        prefix##m_clearCoatRoughnessMapUvIndex; \
float       prefix##m_clearCoatNormalStrength;      \
Texture2D   prefix##m_clearCoatNormalMap;           \
uint        prefix##m_clearCoatNormalMapUvIndex;

#define COMMON_OPTIONS_CLEAR_COAT(prefix)             \
option bool prefix##o_clearCoat_enabled;              \
option bool prefix##o_clearCoat_factor_useTexture;    \
option bool prefix##o_clearCoat_roughness_useTexture; \
option bool prefix##o_clearCoat_normal_useTexture;

void GetClearCoatInputs(Texture2D influenceMap, float2 influenceUV, real clearCoatFactor, bool useInfluenceMap,
                        Texture2D roughnessMap, float2 roughnessUV, real roughness, bool useRoughnessMap,
                        Texture2D normalMap, float2 normalUV, real3 normal, bool useNormalMap, real normalStrength,
                        real3x3 uvMatrix, real3 tangent, real3 bitangent,
                        sampler mapSampler, bool isFrontFace,
                        inout real finalClearCoatFactor, inout real clearCoatRoughness, inout real3 clearCoatNormal,
                        float4 uvDxDy = float4(0.0f, 0.0f, 0.0f, 0.0f), bool customDerivatives = false)
{
    if(useInfluenceMap)
    {
        if (customDerivatives)
        {
            clearCoatFactor *= real(influenceMap.SampleGrad(mapSampler, influenceUV, uvDxDy.xy, uvDxDy.zw).r);
        }
        else
        {
            clearCoatFactor *= real(influenceMap.Sample(mapSampler, influenceUV).r);
        }
    }
    
    if(useRoughnessMap)
    {
        if (customDerivatives)
        {
            roughness *= real(roughnessMap.SampleGrad(mapSampler, roughnessUV, uvDxDy.xy, uvDxDy.zw).r);
        }
        else
        {
            roughness *= real(roughnessMap.Sample(mapSampler, roughnessUV).r);
        }
    }
    
    if (useNormalMap)
    {  
        real2 sampledValue;
        if (customDerivatives)
        {
            sampledValue = real2(normalMap.SampleGrad(mapSampler, normalUV, uvDxDy.xy, uvDxDy.zw).xy);
        }
        else
        {
            sampledValue = real2(normalMap.Sample(mapSampler, normalUV).xy);
        }
        clearCoatNormal = GetWorldSpaceNormal(sampledValue.xy, normal, tangent, bitangent, uvMatrix, normalStrength);
    }
    else
    {
        clearCoatNormal = normalize(normal);
    }
    
    // Flip normal if back face is rendered   
    clearCoatNormal *= real(mad(isFrontFace, 2.0, -1.0));
    finalClearCoatFactor = clearCoatFactor;
    clearCoatRoughness = max(roughness, 1e-3);
}
