/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/Debug.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/BlendUtility.azsli>

// This file provides utilities for common handling of inputs for the base color of PBR materials.

// These macros can be used to declare common shader inputs for this feature. 
// Use the COMMON_SRG_INPUTS_* macro in your material SRG definition, and use the COMMON_OPTIONS_* macro at the global scope in your shader. Then you can pass these variables to the Get*Input() function below.
// You can optionally provide a prefix for the set of inputs which corresponds to a prefix string supplied by the .materialtype file. This is common for multi-layered material types.

#define COMMON_SRG_INPUTS_BASE_COLOR(prefix) \
float3    prefix##m_baseColor;   \
float     prefix##m_baseColorFactor; \
uint      prefix##m_baseColorMapUvIndex; \
Texture2D prefix##m_baseColorMap;

#define COMMON_OPTIONS_BASE_COLOR(prefix) \
option bool prefix##o_baseColor_useTexture; \
option TextureBlendMode prefix##o_baseColorTextureBlendMode = TextureBlendMode::Multiply;

real3 GetBaseColorInput(Texture2D map, sampler mapSampler, float2 uv, real3 baseColor, bool useTexture)
{
    if(OverrideBaseColorEnabled())
    {
        return GetBaseColorOverride();
    }

    if(useTexture)
    {
        real3 sampledAbledo = real3(map.Sample(mapSampler, uv).rgb);
        //Convert to ACEScg as that is our intermediate working space. 
        //Todo - We should data drive this color space
        return LinearSrgb_To_AcesCg(sampledAbledo);
    }
    return baseColor;
}

real3 BlendBaseColor(real3 sampledBaseColor, real3 baseColor, real factor, TextureBlendMode blendMode, bool useTexture)
{
    if(OverrideBaseColorEnabled())
    {
        return GetBaseColorOverride();
    }

    // [GFX TODO][ATOM-1761] Figure out how we want our base material to expect channels to be encoded, and apply that to the way we pack alpha. 
    if (useTexture)
    {
        // Depending on the blend mode, we need to flip the order of the colors in order to get a useful result.
        if(blendMode == TextureBlendMode::Overlay)
        {
            baseColor = ApplyTextureBlend(sampledBaseColor, baseColor, factor, blendMode);
        }
        else
        {
            baseColor = ApplyTextureBlend(baseColor, sampledBaseColor, factor, blendMode);
        }
    }
    else
    {
        baseColor *= factor;
    }
    return baseColor;
}
