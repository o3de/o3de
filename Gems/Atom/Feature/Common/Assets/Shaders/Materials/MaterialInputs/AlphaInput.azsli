/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/PBR/AlphaUtils.azsli>

enum class OpacitySource {Packed, Split, None};
option OpacitySource o_opacity_source;

real SampleAlpha(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, OpacitySource opacitySource, float4 uvDxDy = float4(0.0, 0.0, 0.0, 0.0), bool customDerivatives = false)
{
    real alpha = 1.0;
    switch(opacitySource)
    {
        case OpacitySource::Packed:
        {
            if (customDerivatives)
            {
                alpha = real(baseColorMap.SampleGrad(mapSampler, baseColorUv, uvDxDy.xy, uvDxDy.zw).a);
            }
            else
            {
                alpha = real(baseColorMap.Sample(mapSampler, baseColorUv).a);
            }
            break;
        }
        case OpacitySource::Split:  
        {
            if (customDerivatives)
            {
                alpha = real(opacityMap.SampleGrad(mapSampler, opacityUv, uvDxDy.xy, uvDxDy.zw).r);
            }
            else
            {
                alpha = real(opacityMap.Sample(mapSampler, opacityUv).r);
            }
            break;
        }
        case OpacitySource::None:
        break;
    }
    return alpha;
}

real GetAlphaInputAndClip(Texture2D baseColorMap, Texture2D opacityMap, float2 baseColorUv, float2 opacityUv, sampler mapSampler, real opacityFactor, OpacitySource opacitySource, float4 uvDxDy = float4(0.0, 0.0, 0.0, 0.0), bool customDerivatives = false)
{
    real alpha = SampleAlpha(baseColorMap, opacityMap, baseColorUv, opacityUv, mapSampler, opacitySource, uvDxDy, customDerivatives);
    CheckClipping(alpha, opacityFactor);
    return (alpha * opacityFactor);
}
