/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/Debug.azsli>

// This file provides utilities for common handling of inputs for roughness of PBR materials.

// These macros can be used to declare common shader inputs for this feature. 
// Use the COMMON_SRG_INPUTS_* macro in your material SRG definition, and use the COMMON_OPTIONS_* macro at the global scope in your shader. Then you can pass these variables to the Get*Input() function below.
// You can optionally provide a prefix for the set of inputs which corresponds to a prefix string supplied by the .materialtype file. This is common for multi-layered material types.

#define COMMON_SRG_INPUTS_ROUGHNESS(prefix) \
float       prefix##m_roughnessFactor;      \
float       prefix##m_roughnessLowerBound;  \
float       prefix##m_roughnessUpperBound;  \
Texture2D   prefix##m_roughnessMap;         \
uint        prefix##m_roughnessMapUvIndex;

#define COMMON_OPTIONS_ROUGHNESS(prefix) \
option bool prefix##o_roughness_useTexture; 

float GetRoughnessInput(Texture2D map, sampler mapSampler, float2 uv, float factor, float roughnessLowerBound, float roughnessUpperBound, bool useTexture)
{
    if(OverrideRoughnessEnabled())
    {
        return GetRoughnessOverride();
    }

    // [GFX TODO][ATOM-1793]: Figure out how we want our base material to expect channels to be encoded, and apply that to the way we pack roughness.
    if (useTexture)
    {
        float sampledValue = map.Sample(mapSampler, uv).r;
        return lerp(roughnessLowerBound, roughnessUpperBound, sampledValue);
    }
    else
    {
        return factor;
    }
}
