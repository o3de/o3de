/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/Debug.azsli>

// This file provides utilities for common handling of inputs for a detail layer of PBR materials.
// This layer includes alternate base color, roughness, normal, etc maps that are tiled on top of the materialtype's main maps.

#include "BaseColorInput.azsli"
#include "NormalInput.azsli"

// These macros can be used to declare common shader inputs for this feature. 
// Use the COMMON_SRG_INPUTS_* macro in your material SRG definition, and use the COMMON_OPTIONS_* macro at the global scope in your shader. Then you can pass these variables to the Get*Input() function below.
// You can optionally provide a prefix for the set of inputs which corresponds to a prefix string supplied by the .materialtype file. This is common for multi-layered material types.

#define COMMON_SRG_INPUTS_DETAIL_MAPS(prefix) \
float m_detail_blendFactor;                   \
Texture2D m_detail_blendMask_texture;         \
uint m_detail_blendMask_uvIndex;              \
                                              \
uint m_detail_allMapsUvIndex;                 \
                                              \
Texture2D m_detail_baseColor_texture;         \
float m_detail_baseColor_factor;              \
                                              \
float m_detail_normal_factor;                 \
Texture2D m_detail_normal_texture;            \
bool m_detail_normal_flipX;                   \
bool m_detail_normal_flipY;                   \
                                              \
float3x3 m_detailUvMatrix;                    \
float4   m_detailUvMatrixPad;                 \
float3x3 m_detailUvMatrixInverse;             \
float4   m_detailUvMatrixInversePad;

// [GFX TODO][ATOM-14595] m_detailUvMatrixPad and m_detailUvMatrixInversePad are a workaround for a data stomping bug.
// Remove them once the bug is fixed.


#define COMMON_OPTIONS_DETAIL_MAPS(prefix)   \
option bool o_detail_blendMask_useTexture;   \
option bool o_detail_baseColor_useTexture;   \
option bool o_detail_normal_useTexture;


float GetDetailLayerBlendFactor(Texture2D detailLayerBlendMask, sampler detailLayerBlendMaskSampler, float2 detailLayerBlendMaskUv, bool useDetailLayerBlendMask, float detailLayerBlendFactor)
{
    if (useDetailLayerBlendMask)
    {
        detailLayerBlendFactor *= detailLayerBlendMask.Sample(detailLayerBlendMaskSampler, detailLayerBlendMaskUv).r;
    }

    return detailLayerBlendFactor;
}

//! Sample a normal map and apply it as an overlay on top of another normal map.
//! @return a new normal vector in the same tangent space as mainNormalTS.
float3 ApplyNormalMapOverlayTS(bool applyOverlay, float3 vertexNormalWS, float3 mainNormalTS, float3 mainTangent, float3 mainBitangent, 
    Texture2D overlayNormalMap, sampler overlayMapSampler, float2 overlayUv, bool flipOverlayNormalX, bool flipOverlayNormalY, float overlayFactor, 
    float3 overlayTangent, float3 overlayBitangen, float3x3 overlayNormalUvMatrix)
{
    if(applyOverlay && AreDetailNormalMapsEnabled())
    {
        // Get overlay normal in its local tangent space
        float3 overlayNormalTS = GetNormalInputTS(overlayNormalMap, overlayMapSampler, overlayUv, flipOverlayNormalX, flipOverlayNormalY, overlayNormalUvMatrix, true, overlayFactor);
        
        // [GFX TODO][ATOM-15111]: Find a more efficient way to do this.

        // Convert the overlay normal from its local tangent space into the main normal's tangent space.
        float3 overlayNormalWS = TangentSpaceToWorld(overlayNormalTS, vertexNormalWS, overlayTangent, overlayBitangen);
        float3 overlayNormalInMainTS = WorldSpaceToTangent(overlayNormalWS, vertexNormalWS, mainTangent, mainBitangent);

        // Combine normals in tangent space
        float3 normalInMainTS = ReorientTangentSpaceNormal(mainNormalTS, overlayNormalInMainTS);

        return normalInMainTS;
    }
    else
    {
        return mainNormalTS;
    }
}

//! Sample a normal map and apply it as an overlay on top of another normal map.
//! @return a new normal vector in world space.
float3 ApplyNormalMapOverlayWS(bool applyOverlay, float3 vertexNormalWS, float3 mainNormalTS, float3 mainTangent, float3 mainBitangent, 
    Texture2D overlayNormalMap, sampler overlayMapSampler, float2 overlayUv, bool flipOverlayNormalX, bool flipOverlayNormalY, float overlayFactor, 
    float3 overlayTangent, float3 overlayBitangen, float3x3 overlayNormalUvMatrix)
{
    if(applyOverlay && AreDetailNormalMapsEnabled())
    {
        float3 normalTS = ApplyNormalMapOverlayTS(applyOverlay, vertexNormalWS, mainNormalTS, mainTangent, mainBitangent, overlayNormalMap, overlayMapSampler, overlayUv, flipOverlayNormalX, flipOverlayNormalY, overlayFactor, overlayTangent, overlayBitangen, overlayNormalUvMatrix);
        float3 normalWS = normalize( TangentSpaceToWorld(normalTS, vertexNormalWS, mainTangent, mainBitangent) );
        return normalWS;
    }
    else
    {
        return normalize( TangentSpaceToWorld(mainNormalTS, vertexNormalWS, mainTangent, mainBitangent) );
    }
}

float3 GetDetailedNormalInputWS(bool isFrontFace, float3 vertexNormalWS,
                                float3 mainTangent,   float3 mainBitangent,   Texture2D mainNormalMap,   sampler mainSampler,   float2 mainUv,   float mainNormalFactor,   bool flipMainNormalX,   bool flipMainNormalY,   float3x3 mainNormalUvMatrix,   bool useMainNormalMap,
                                float3 detailTangent, float3 detailBitangent, Texture2D detailNormalMap, sampler detailSampler, float2 detailUv, float detailNormalFactor, bool flipDetailNormalX, bool flipDetailNormalY, float3x3 detailNormalUvMatrix, bool useDetailNormalMap)
{
    float3 normal;
    
    useDetailNormalMap = useDetailNormalMap && AreDetailNormalMapsEnabled();
    useMainNormalMap = useMainNormalMap && AreNormalMapsEnabled();

    if(useDetailNormalMap)
    {
        // Get normal in tangent space
        float3 mainNormalTS = GetNormalInputTS(mainNormalMap, mainSampler, mainUv, flipMainNormalX, flipMainNormalY, 
                                            mainNormalUvMatrix, useMainNormalMap, mainNormalFactor);
        
        bool applyOverlay = true;
        normal = ApplyNormalMapOverlayWS(applyOverlay, vertexNormalWS, mainNormalTS, mainTangent, mainBitangent,
            detailNormalMap, detailSampler, detailUv, flipDetailNormalX, flipDetailNormalY, detailNormalFactor, detailTangent, detailBitangent, detailNormalUvMatrix);

        AdjustBackFaceNormal(normal, isFrontFace);
    }
    else
    {
        // TODO: Re-order these parameters to match GetDetailedNormalInputWS 
        normal = GetNormalInputWS(mainNormalMap, mainSampler, mainUv, flipMainNormalX, flipMainNormalY, isFrontFace, vertexNormalWS,
                                  mainTangent, mainBitangent, mainNormalUvMatrix, useMainNormalMap, mainNormalFactor);
    }

    return normal;
}

float3 ApplyTextureOverlay(bool applyOverlay, float3 baseColor, Texture2D map, sampler mapSampler, float2 uv, float factor)
{
    if (applyOverlay)
    {
        float3 sampledColor = map.Sample(mapSampler, uv).rgb;
        sampledColor = TransformColor(sampledColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
        return ApplyTextureBlend(baseColor, sampledColor, factor, TextureBlendMode::Overlay);
    }
    else
    {
        return baseColor;
    }
}

float3 GetDetailedBaseColorInput(Texture2D mainBaseColorMap,     sampler mainBaseColorMapSampler,     float2 mainBaseColorUv,        bool useMainBaseColorMap,     float3 mainBaseColor, float mainBaseColorFactor, TextureBlendMode mainBaseColorBlendMode,
                                 Texture2D detailBaseColorMap,   sampler detailBaseColorMapSampler,   float2 detailBaseColorUv,      bool useDetailBaseColorMap,   float detailBaseColorBlendFactor)
{
    float3 color = GetBaseColorInput(mainBaseColorMap, mainBaseColorMapSampler, mainBaseColorUv, mainBaseColor, useMainBaseColorMap);
    color = BlendBaseColor(color, mainBaseColor, mainBaseColorFactor, mainBaseColorBlendMode, useMainBaseColorMap);
    color = ApplyTextureOverlay(useDetailBaseColorMap, color, detailBaseColorMap, detailBaseColorMapSampler, detailBaseColorUv, detailBaseColorBlendFactor);
    return color;
}
