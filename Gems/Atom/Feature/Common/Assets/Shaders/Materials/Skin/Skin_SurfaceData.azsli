/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the Surface class in this file without making it the final Surface
// used in your shader. Simply #define Surface to your custom definition before including this file
//
#ifndef Surface
#define Surface     SurfaceData_Skin
#endif

#include "../BasePBR/BasePBR_SurfaceData.azsli"
#include <Atom/Features/PBR/Surfaces/TransmissionSurfaceData.azsli>

class SurfaceData_Skin
{
#if ENABLE_TRANSMISSION
    TransmissionSurfaceData transmission;
#endif

    // ------- BasePbrSurfaceData -------
    
    float3 position;            //!< Position in world-space
    real3 normal;              //!< Normal in world-space
    real3 vertexNormal;        //!< Vertex normal in world-space
    real3 albedo;              //!< Albedo color of the non-metallic material, will be multiplied against the diffuse lighting value
    real3 specularF0;          //!< Fresnel f0 spectral value of the surface
    real roughnessLinear;      //!< Perceptually linear roughness value authored by artists. Must be remapped to roughnessA before use
    real roughnessA;           //!< Actual roughness value ( a.k.a. "alpha roughness") to be used in microfacet calculations
    real roughnessA2;          //!< Alpha roughness ^ 2 (i.e. roughnessA * roughnessA), used in GGX, cached here for perfromance

    real3 baseColor;
    real metallic;

    //! Subsurface scattering parameters
    real subsurfaceScatteringFactor;
    real subsurfaceScatteringQuality;
    real3 scatterDistance;

    //! Calculates roughnessA and roughnessA2 after roughness has been set
    void CalculateRoughnessA();

    //! Sets albedo and specularF0 (no metallic for skin)
    void SetAlbedoAndSpecularF0(real3 newBaseColor, real specularF0Factor);
};

void SurfaceData_Skin::CalculateRoughnessA()
{
    CalculateRoughnessValues(normal, roughnessLinear, roughnessA, roughnessA2);
}

void SurfaceData_Skin::SetAlbedoAndSpecularF0(real3 newBaseColor, real specularF0Factor)
{
    baseColor = newBaseColor;
    albedo = newBaseColor;
    specularF0 = MaxDielectricSpecularF0 * specularF0Factor;
    metallic = 0;
}
