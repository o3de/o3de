/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the VsInput & VsOutput classes in this file without making it the final VsInput & VsOutput
// used in your shader. Simply #define VsInput & VsOutput to your custom definitions before including this file
//
#ifndef VsInput
#define VsInput         VsInput_Skin
#endif

#ifndef VsSystemValues
#define VsSystemValues  VsSystemValues_Skin
#endif

#ifndef VsOutput
#define VsOutput        VsOutput_Skin
#endif

#include "../BasePBR/BasePBR_VertexData.azsli"

struct VsInput_Skin
{
    // Base fields (required by the template azsli file)...
    float3 position : POSITION;
    float3 normal : NORMAL;
    float4 tangent : TANGENT;
 
    // Extended fields (only referenced in this azsl file)...
    float2 uv0_tiled : UV0;
    float2 uv1_unwrapped : UV1;
    
    // This gets set automatically by the system at runtime only if it's available.
    // There is a soft naming convention that associates this with o_blendMask_isBound, which will be set to true whenever m_optional_blendMask is available.
    // (search "m_optional_" in ShaderVariantAssetBuilder for details on the naming convention).
    // [GFX TODO][ATOM-14475]: Come up with a more elegant way to associate the isBound flag with the input stream.
    float4 m_optional_blendMask : COLOR0;
};

struct VsSystemValues_Skin
{
    uint m_instanceId;
};

struct VsOutput_Skin
{
    // Base fields (required by the template azsli file)...
    precise linear centroid
    float4 position : SV_Position;
    float3 normal: NORMAL;
    float4 tangent : TANGENT;
    float3 worldPosition : UV0;
    uint m_instanceId : SV_InstanceID;

    // Extended fields (only referenced in this azsl file)...
    float2 uvs[UvSetCount] : UV1;
    float2 detailUv : UV3;
    
    float4 wrinkleBlendFactors : UV8;
};
