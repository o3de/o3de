/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *

 */
#pragma once

// This #define magic lets you use the GetDiffuseLighting & GetSpecularLighting functions in this file without making them the final functions
// used in your shader. Simply #define GetDiffuseLighting & GetSpecularLighting to your custom definition before including this file
//
#ifndef GetDiffuseLighting
#define GetDiffuseLighting(surface, lightingData, lightIntensity, dirToLight)                  GetDiffuseLighting_Skin(surface, lightingData, lightIntensity, dirToLight)
#endif

#ifndef GetSpecularLighting
#define GetSpecularLighting(surface, lightingData, lightIntensity, dirToLight, viewIndex)      GetSpecularLighting_Skin(surface, lightingData, lightIntensity, dirToLight, viewIndex)
#endif

#include "../BasePBR/BasePBR_LightingBrdf.azsli"

#ifndef LightingData
#error LightingData must be defined before including this file.
#endif

#ifndef Surface
#error Surface must be defined before including this file.
#endif

// Then define the Diffuse and Specular lighting functions
real3 GetDiffuseLighting_Skin(Surface surface, LightingData lightingData, real3 lightIntensity, real3 dirToLight)
{
    real3 diffuse = NormalizedDisneyDiffuse(surface.albedo, surface.GetDiffuseNormal(), lightingData.dirToCamera[0], dirToLight, surface.roughnessLinear);
    diffuse *= lightIntensity;
    return diffuse;
}


real3 GetSpecularLighting_Skin(Surface surface, LightingData lightingData, const real3 lightIntensity, const real3 dirToLight, uint viewIndex)
{
    real3 specular = SpecularGGX(lightingData.dirToCamera[viewIndex], dirToLight, surface.GetSpecularNormal(), surface.GetSpecularF0(), lightingData.GetSpecularNdotV(viewIndex), surface.roughnessA2, lightingData.multiScatterCompensation);

    if(o_enableDualSpecular)
    {
        real3 dualSpecular = SpecularGGX(lightingData.dirToCamera[viewIndex], dirToLight, surface.GetSpecularNormal(), surface.dualSpecF0.xxx, lightingData.GetSpecularNdotV(viewIndex), surface.dualSpecRoughnessA2, lightingData.multiScatterCompensation);
        specular = lerp(specular, dualSpecular, surface.dualSpecFactor);
    }

    specular *= lightIntensity;

    return specular;
}
