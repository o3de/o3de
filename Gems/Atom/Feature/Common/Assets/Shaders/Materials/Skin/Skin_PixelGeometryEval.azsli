/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluatePixelGeometry function in this file without making it the final EvaluatePixelGeometry
// used in your shader. Simply #define EvaluatePixelGeometry to your custom definition before including this file
//
#ifndef EvaluatePixelGeometry
#define EvaluatePixelGeometry(IN, isFrontFace)      EvaluatePixelGeometry_Skin(IN, isFrontFace)
#endif

#include "../BasePBR/BasePBR_PixelGeometryEval.azsli"

PixelGeometryData EvaluatePixelGeometry_Skin(
    float3 positionWS,
    float3 normal,
    float3 tangent,
    float3 bitangent,
    float2 uvs[UvSetCount],
    float2 detailUv,
    float4 wrinkleBlendFactors,
    bool isFrontFace)
{
    // Base PBR Geo Data
    bool evaluateTangentFrame = o_normal_useTexture || o_detail_normal_useTexture;
    PixelGeometryData geoData = EvaluatePixelGeometry_BasePBR(positionWS, normal, tangent, bitangent, uvs, isFrontFace, evaluateTangentFrame);

    // Skin specifics
    geoData.detailUv = detailUv;
    geoData.wrinkleBlendFactors = wrinkleBlendFactors;

    return geoData;
}

PixelGeometryData EvaluatePixelGeometry_Skin(VsOutput IN, bool isFrontFace)
{
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(IN.normal, IN.tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

    return EvaluatePixelGeometry_Skin(
        IN.worldPosition,
        vertexNormal,
        vertexTangent,
        vertexBitangent,
        IN.uvs,
        IN.detailUv,
        IN.wrinkleBlendFactors,
        isFrontFace);
}
