/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#ifndef Surface
#define Surface     SurfaceData_EnhancedPBR
#endif

#include "../StandardPBR/StandardPBR_SurfaceData.azsli"
#include <Atom/Features/PBR/Surfaces/AnisotropicSurfaceData.azsli>
#include <Atom/Features/PBR/Surfaces/TransmissionSurfaceData.azsli>

// Class inheritance doesn't seem to be working
#define DOES_CLASS_INHERITANCE_WORK_IN_ASZL 0
#if DOES_CLASS_INHERITANCE_WORK_IN_ASZL

    class SurfaceData_EnhancedPBR : SurfaceData_StandardPBR
    {
        AnisotropicSurfaceData anisotropy;
        TransmissionSurfaceData transmission;

        //! Subsurface scattering parameters
        float subsurfaceScatteringFactor;
        float subsurfaceScatteringQuality;
        float3 scatterDistance;
    }

#else

    class SurfaceData_EnhancedPBR
    {
        ClearCoatSurfaceData clearCoat;
        AnisotropicSurfaceData anisotropy;
        TransmissionSurfaceData transmission;

        // ------- BasePbrSurfaceData -------
    
        float3 position;            //!< Position in world-space
        float3 normal;              //!< Normal in world-space
        float3 vertexNormal;        //!< Vertex normal in world-space
        float3 baseColor;           //!< Surface base color
        float metallic;             //!< Surface metallic property
        float roughnessLinear;      //!< Perceptually linear roughness value authored by artists. Must be remapped to roughnessA before use
        float roughnessA;           //!< Actual roughness value ( a.k.a. "alpha roughness") to be used in microfacet calculations
        float roughnessA2;          //!< Alpha roughness ^ 2 (i.e. roughnessA * roughnessA), used in GGX, cached here for perfromance
        float alpha;

        // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
        // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
        // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
        // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
        // not apply.
        float opacityAffectsSpecularFactor;

        //! Subsurface scattering parameters
        float subsurfaceScatteringFactor;
        float subsurfaceScatteringQuality;
        float3 scatterDistance;

        //! Surface lighting inputs
        float3 albedo;                  //!< Albedo color of the non-metallic material, will be multiplied against the diffuse lighting value
        float3 specularF0;              //!< Fresnel f0 spectral value of the surface
        float3 emissiveLighting;        //!< Emissive lighting
        float diffuseAmbientOcclusion;  //!< Diffuse ambient occlusion factor - [0, 1] :: [Dark, Bright]
        float specularOcclusion;        //!< Specular occlusion factor - [0, 1] :: [Dark, Bright]

        //! Calculates roughnessA and roughnessA2 after roughness has been set
        void CalculateRoughnessA();

        //! Sets albedo and specularF0 using metallic workflow
        void SetAlbedoAndSpecularF0(float3 baseColor, float specularF0Factor, float metallic);

        //! Get the packed subsurface scattering factor and quality
        float GetSubsurfaceScatteringFactorAndQuality();
    };

    void SurfaceData_EnhancedPBR::CalculateRoughnessA()
    {
        CalculateRoughnessValues(normal, roughnessLinear, roughnessA, roughnessA2);
    }

    void SurfaceData_EnhancedPBR::SetAlbedoAndSpecularF0(float3 newBaseColor, float specularF0Factor, float newMetallic)
    {
        baseColor = newBaseColor;
        metallic = newMetallic;

        albedo = GetAlbedo(baseColor, metallic);
        specularF0 = GetSpecularF0(baseColor, metallic, specularF0Factor);
    }

    float SurfaceData_EnhancedPBR::GetSubsurfaceScatteringFactorAndQuality()
    {
        // Pack factor and quality, drawback: because of precision limit of float16 cannot represent exact 1, maximum representable value is 0.9961
        uint factorAndQuality = dot(round(float2(saturate(subsurfaceScatteringFactor), subsurfaceScatteringQuality) * 255), float2(256, 1));
        return factorAndQuality * (o_enableSubsurfaceScattering ? 1.0 : -1.0);
    }

#endif
