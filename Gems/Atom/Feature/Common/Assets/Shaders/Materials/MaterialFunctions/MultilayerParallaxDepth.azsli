/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/ParallaxMapping.azsli>
#include "../MaterialInputs/ParallaxInput.azsli"
#include <Atom/Features/MatrixUtility.azsli>
#include "ParallaxShadowUtil.azsli"

 void MultilayerSetPixelDepth(
     float3 vertexBlendMask,
     inout float3 worldPosition,
     real3 normal,
     real3 tangents[UvSetCount],
     real3 bitangents[UvSetCount],
     inout float2 uvs[UvSetCount],
     bool isFrontFace,
     real4x4 objectToWorld,
     inout float depthNDC,
     inout float depthCS,
     out bool isClipped)
{
    real3x3 uvMatrix = MaterialSrg::m_parallaxUvIndex == 0 ? real3x3(MaterialSrg::m_uvMatrix) : real3x3(CreateIdentity3x3());
    real3x3 uvMatrixInverse = MaterialSrg::m_parallaxUvIndex == 0 ? real3x3(MaterialSrg::m_uvMatrixInverse) : real3x3(CreateIdentity3x3());

    real parallaxOverallOffset = real(MaterialSrg::m_displacementMax);
    real parallaxOverallFactor = real(MaterialSrg::m_displacementMax) - real(MaterialSrg::m_displacementMin);
    
    AdjustParallaxShadowCaster(parallaxOverallFactor, parallaxOverallOffset, real(MaterialSrg::m_parallax_pdo_shadowFactor));
    
    s_blendMaskFromVertexStream = vertexBlendMask;
    
    GetParallaxInput(
        normal, tangents[MaterialSrg::m_parallaxUvIndex], bitangents[MaterialSrg::m_parallaxUvIndex],
        parallaxOverallFactor, parallaxOverallOffset, 
        objectToWorld, uvMatrix, uvMatrixInverse,
        uvs[MaterialSrg::m_parallaxUvIndex], worldPosition, depthNDC, depthCS, isClipped);
}

 void MultilayerSetPixelDepth(
     float3 vertexBlendMask,
     inout float3 positionWS,
     real3 normal,
     real3 tangents[UvSetCount],
     real3 bitangents[UvSetCount],
     inout float2 uvs[UvSetCount],
     bool isFrontFace,
     real4x4 objectToWorld,
     inout float depthNDC)
{
    // Dummy variables to call the above function
    float depthCS = 1.0;
    bool isClipped;
    
    MultilayerSetPixelDepth(vertexBlendMask, positionWS, normal, tangents, bitangents, uvs, isFrontFace, objectToWorld, depthNDC, depthCS, isClipped);
}
