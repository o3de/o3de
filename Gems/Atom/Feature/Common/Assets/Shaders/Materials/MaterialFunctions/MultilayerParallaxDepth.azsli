/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/ParallaxMapping.azsli>
#include "../MaterialInputs/ParallaxInput.azsli"
#include <Atom/Features/MatrixUtility.azsli>
#include "ParallaxShadowUtil.azsli"

 void MultilayerSetPixelDepth(
     float3 blendMask,
     float3 worldPosition,
     float3 normal,
     float3 tangents[UvSetCount],
     float3 bitangents[UvSetCount],
     float2 uvs[UvSetCount],
     bool isFrontFace,
     out float depth)
{
    s_blendMaskFromVertexStream = blendMask;

    float3x3 uvMatrix = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3();
    float3x3 uvMatrixInverse = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrixInverse : CreateIdentity3x3();

    float parallaxOverallOffset = MaterialSrg::m_displacementMax;
    float parallaxOverallFactor = MaterialSrg::m_displacementMax - MaterialSrg::m_displacementMin;
    
    AdjustParallaxShadowCaster(parallaxOverallFactor, parallaxOverallOffset, MaterialSrg::m_parallax_pdo_shadowFactor);

    GetParallaxInput(
        normal, tangents[MaterialSrg::m_parallaxUvIndex], bitangents[MaterialSrg::m_parallaxUvIndex],
        parallaxOverallFactor, parallaxOverallOffset, 
        ObjectSrg::GetWorldMatrix(), uvMatrix, uvMatrixInverse,
        uvs[MaterialSrg::m_parallaxUvIndex], worldPosition, depth);
}
