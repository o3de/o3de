/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/ParallaxMapping.azsli>
#include "../MaterialInputs/ParallaxInput.azsli"
#include <Atom/Features/MatrixUtility.azsli>
#include "ParallaxShadowUtil.azsli"

 void SetPixelDepth(
     inout float3 positionWS,
     float3 normal,
     float3 tangents[UvSetCount],
     float3 bitangents[UvSetCount],
     inout float2 uvs[UvSetCount],
     bool isFrontFace,
     inout float depthNDC,
     inout float depthCS,
     out bool isClipped)
{
    float3x3 uvMatrix = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrix : CreateIdentity3x3();
    float3x3 uvMatrixInverse = MaterialSrg::m_parallaxUvIndex == 0 ? MaterialSrg::m_uvMatrixInverse : CreateIdentity3x3();
    
    float heightmapScale = MaterialSrg::m_heightmapScale;
    float heightmapOffset = MaterialSrg::m_heightmapOffset;
    
    AdjustParallaxShadowCaster(heightmapScale, heightmapOffset, MaterialSrg::m_parallax_pdo_shadowFactor);

    GetParallaxInput(
        normal, tangents[MaterialSrg::m_parallaxUvIndex], bitangents[MaterialSrg::m_parallaxUvIndex],
        heightmapScale, heightmapOffset,
        ObjectSrg::GetWorldMatrix(), uvMatrix, uvMatrixInverse,
        uvs[MaterialSrg::m_parallaxUvIndex], positionWS, depthNDC, depthCS, isClipped);
}

 void SetPixelDepth(
     inout float3 positionWS,
     float3 normal,
     float3 tangents[UvSetCount],
     float3 bitangents[UvSetCount],
     inout float2 uvs[UvSetCount],
     bool isFrontFace,
     inout float depthNDC)
{
    // Dummy variables to call the above function
    float depthCS = 1.0;
    bool isClipped;
    
    SetPixelDepth(positionWS, normal, tangents, bitangents, uvs, isFrontFace, depthNDC, depthCS, isClipped);
}

 void SetPixelDepth(
     inout float3 positionWS,
     float3 normal,
     float3 tangents[UvSetCount],
     float3 bitangents[UvSetCount],
     inout float2 uvs[UvSetCount],
     inout float2 detailUv[UvSetCount],
     bool isFrontFace,
     inout float depthNDC,
     inout float depthCS,
     out bool isClipped)
{
    // GetParallaxInput applies an tangent offset to the UV. We want to apply the same offset to the detailUv (note: this needs to be tested with content)
    // The math is:   offset = newUv - oldUv;   detailUv += offset;
    // This is the same as:   detailUv -= oldUv;   detailUv += newUv;
    detailUv[MaterialSrg::m_parallaxUvIndex] -= uvs[MaterialSrg::m_parallaxUvIndex];
    
    SetPixelDepth(positionWS, normal, tangents, bitangents, uvs, isFrontFace, depthNDC, depthCS, isClipped);

    // Apply second part of the offset to the detail UV (see comment above)
    detailUv[MaterialSrg::m_parallaxUvIndex] += uvs[MaterialSrg::m_parallaxUvIndex];
}
