/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic allows you to use the EvaluateVertexGeometry function in this file without making it the final
// EvaluateVertexGeometry used in your shader. Simply #define EvaluateVertexGeometry before including this file
//
#ifndef EvaluateVertexGeometry
#define EvaluateVertexGeometry EvaluateVertexGeometry_Eye
#endif

VsOutput EvaluateVertexGeometry_Eye(
    const MaterialParameters params,
    float3 position,
    float3 normal,
    float4 tangent,
    float3 bitangent,
    float2 uv0,
    float2 uv1,
    VsSystemValues SV)
{
    VsOutput output;

#if MATERIAL_USES_VERTEX_POSITION
    float4x4 objectToWorld = GetObjectToWorldMatrix(SV);
    float4 worldPosition = mul(objectToWorld, float4(position, 1.0));
    output.worldPosition = worldPosition.xyz;

#if MATERIAL_USES_VERTEX_POSITIONWS
    float4x4 viewProjectionMatrix = GetViewProjectionMatrix(SV);
    output.position = mul(viewProjectionMatrix, worldPosition);
#endif // MATERIAL_USES_VERTEX_POSITIONWS
#endif // MATERIAL_USES_VERTEX_POSITION

#if MATERIAL_USES_VERTEX_UV
    output.uvs[0] = uv0;
    output.uvs[1] = uv1;
#endif // MATERIAL_USES_VERTEX_UV

#if MATERIAL_USES_VERTEX_NORMAL
    output.normal = normal;
#endif // MATERIAL_USES_VERTEX_NORMAL

#if MATERIAL_USES_VERTEX_TANGENT
    output.tangent = tangent;
#endif // MATERIAL_USES_VERTEX_TANGENT
    
#if MATERIAL_USES_VERTEX_BITANGENT
    // Bitangent is temporarily added back to fix the eye material screenshot test.
    output.bitangent = bitangent;
#endif // MATERIAL_USES_VERTEX_BITANGENT

#if MATERIAL_USES_VERTEX_LOCALPOSITION
    output.localPosition = position.xyz;
#endif // MATERIAL_USES_VERTEX_LOCALPOSITION

    return output;
}

// Added this version to make it compatible with the number of arguments in BasePBR.
// Avoids compilation errors for compute shaders, listed in a materialpipeline,
// that call EvaluateVertexGeometry().
VsOutput EvaluateVertexGeometry_Eye(
    const MaterialParameters params,
    float3 position,
    float3 normal,
    float4 tangent,
    float2 uv0,
    float2 uv1,
    uint instanceId)
{
    VsSystemValues SV;
    SV.m_instanceId = instanceId;
    const float3 bitangent = float3(0, 0, 0);
    return EvaluateVertexGeometry_Eye(params, position, normal, tangent, bitangent, uv0, uv1, SV);
}

VsOutput EvaluateVertexGeometry_Eye(VsInput IN, VsSystemValues SV, const MaterialParameters params)
{
    return EvaluateVertexGeometry_Eye(
        params,
        IN.position,
        IN.normal,
        IN.tangent,
        IN.bitangent,
        IN.uv0,
        IN.uv1,
        SV);
}
