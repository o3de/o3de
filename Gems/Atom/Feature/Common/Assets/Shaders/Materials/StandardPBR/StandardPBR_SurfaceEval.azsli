/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateSurface function in this file without making it the final EvaluateSurface
// used in your shader. Simply #define EvaluateSurface to your custom definition before including this file
//
#ifndef EvaluateSurface
#define EvaluateSurface EvaluateSurface_StandardPBR
#endif

#include "../BasePBR/BasePBR_SurfaceEval.azsli"
#include "../MaterialFunctions/StandardGetAlphaAndClip.azsli"
#include <Atom/Features/PBR/LightingOptions.azsli>

Surface EvaluateSurface_StandardPBR(
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    bool isDisplacementClipped,
    float4 uvDxDy,
    bool customDerivatives,
    float4 vertexColor)
{
    Surface surface = EvaluateSurface_BasePBR(positionWS, vertexNormal, tangents, bitangents, uvs, isFrontFace, uvDxDy, customDerivatives, vertexColor);

    // ------- Parallax Clipping -------

    if(o_parallax_highlightClipping && isDisplacementClipped)
    {
        ApplyParallaxClippingHighlight(surface.albedo);
    }

    // ------- Alpha & Clip -------

    // TODO: this often invokes a separate sample of the base color texture which is wasteful
    surface.alpha = GetAlphaAndClip(uvs, uvDxDy, customDerivatives);

    // ------- Emissive -------

    float2 emissiveUv = uvs[MaterialSrg::m_emissiveMapUvIndex];
    surface.emissiveLighting = GetEmissiveInput(MaterialSrg::m_emissiveMap, MaterialSrg::m_sampler, emissiveUv, real(MaterialSrg::m_emissiveIntensity), real3(MaterialSrg::m_emissiveColor.rgb), real(MaterialSrg::m_emissiveAffectedByAlpha), real(surface.alpha), o_emissiveEnabled, o_emissive_useTexture, uvDxDy, customDerivatives);

    // ------- Occlusion -------
    
    surface.diffuseAmbientOcclusion = GetOcclusionInput(MaterialSrg::m_diffuseOcclusionMap, MaterialSrg::m_sampler, uvs[MaterialSrg::m_diffuseOcclusionMapUvIndex], real(MaterialSrg::m_diffuseOcclusionFactor), o_diffuseOcclusion_useTexture, uvDxDy, customDerivatives);
    surface.specularOcclusion = GetOcclusionInput(MaterialSrg::m_specularOcclusionMap, MaterialSrg::m_sampler, uvs[MaterialSrg::m_specularOcclusionMapUvIndex], real(MaterialSrg::m_specularOcclusionFactor), o_specularOcclusion_useTexture, uvDxDy, customDerivatives);

    // ------- Clearcoat -------

#if ENABLE_CLEAR_COAT
    // Todo: Clean up the double uses of these clear coat flags
    if(o_clearCoat_feature_enabled)
    {
        if(o_clearCoat_enabled)
        {
            real3x3 uvMatrix = MaterialSrg::m_clearCoatNormalMapUvIndex == 0 ? real3x3(MaterialSrg::m_uvMatrix) : CreateIdentity3x3_real();
            GetClearCoatInputs(MaterialSrg::m_clearCoatInfluenceMap, uvs[MaterialSrg::m_clearCoatInfluenceMapUvIndex], real(MaterialSrg::m_clearCoatFactor), o_clearCoat_factor_useTexture,
                               MaterialSrg::m_clearCoatRoughnessMap, uvs[MaterialSrg::m_clearCoatRoughnessMapUvIndex], real(MaterialSrg::m_clearCoatRoughness), o_clearCoat_roughness_useTexture,
                               MaterialSrg::m_clearCoatNormalMap,    uvs[MaterialSrg::m_clearCoatNormalMapUvIndex], vertexNormal, o_clearCoat_normal_useTexture, real(MaterialSrg::m_clearCoatNormalStrength),
                               uvMatrix, tangents[MaterialSrg::m_clearCoatNormalMapUvIndex], bitangents[MaterialSrg::m_clearCoatNormalMapUvIndex],
                               MaterialSrg::m_sampler, isFrontFace,
                               surface.clearCoat.factor, surface.clearCoat.roughness, surface.clearCoat.normal, uvDxDy, customDerivatives);
        }

        ApplyClearCoatToSpecularF0(surface.specularF0, surface.clearCoat.factor);
    }
#endif
    
    // ------- Opacity -------
    surface.opacityAffectsSpecularFactor = real(MaterialSrg::m_opacityAffectsSpecularFactor);

    return surface;
}

// helper function to keep compatible with the previous version
// because dxc compiler doesn't allow default parameters on functions with overloads
Surface EvaluateSurface_StandardPBR(
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    bool isDisplacementClipped,
    float4 uvDxDy,
    bool customDerivatives)
{
    return EvaluateSurface_StandardPBR(
        positionWS,
        vertexNormal,
        tangents,
        bitangents,
        uvs,
        isFrontFace,
        isDisplacementClipped,
        uvDxDy,
        customDerivatives,
        float4(1.0f, 1.0f, 1.0f, 1.0f));
}

Surface EvaluateSurface_StandardPBR(
    float3 positionWS,
    real3 vertexNormal,
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    float2 uvs[UvSetCount],
    bool isFrontFace,
    bool isDisplacementClipped)
{
    return EvaluateSurface_StandardPBR(
        positionWS,
        vertexNormal,
        tangents,
        bitangents,
        uvs,
        isFrontFace,
        isDisplacementClipped,
        float4(0.0f, 0.0f, 0.0f, 0.0f),
        false);
}

Surface EvaluateSurface_StandardPBR(VsOutput IN, PixelGeometryData geoData, float4 uvDxDy, bool customDerivatives)
{
    return EvaluateSurface_StandardPBR(
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace,
        geoData.isDisplacementClipped,
        uvDxDy,
        customDerivatives,
        GetVertexColor(IN));
}

Surface EvaluateSurface_StandardPBR(VsOutput IN, PixelGeometryData geoData)
{
    return EvaluateSurface_StandardPBR(
        geoData.positionWS,
        geoData.vertexNormal,
        geoData.tangents,
        geoData.bitangents,
        geoData.uvs,
        geoData.isFrontFace,
        geoData.isDisplacementClipped,
        float4(0.0f, 0.0f, 0.0f, 0.0f),
        false,
        GetVertexColor(IN));
}
