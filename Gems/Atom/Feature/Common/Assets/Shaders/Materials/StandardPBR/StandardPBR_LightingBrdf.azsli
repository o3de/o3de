/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the GetDiffuseLighting & GetSpecularLighting functions in this file without making them the final functions
// used in your shader. Simply #define GetDiffuseLighting & GetSpecularLighting to your custom definition before including this file
//
#ifndef GetDiffuseLighting
#define GetDiffuseLighting(surface, lightingData, lightIntensity, dirToLight)       GetDiffuseLighting_StandardPBR(surface, lightingData, lightIntensity, dirToLight)
#endif

#ifndef GetSpecularLighting
#define GetSpecularLighting(surface, lightingData, lightIntensity, dirToLight)      GetSpecularLighting_StandardPBR(surface, lightingData, lightIntensity, dirToLight)
#endif

#include <Atom/Features/PBR/Microfacet/Brdf.azsli>

#ifndef LightingData
#error LightingData must be defined before including this file.
#endif

#ifndef Surface
#error Surface must be defined before including this file.
#endif

// Then define the Diffuse and Specular lighting functions
float3 GetDiffuseLighting_StandardPBR(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    float3 diffuse = DiffuseLambertian(surface.albedo, surface.normal, dirToLight, lightingData.diffuseResponse);

    if(o_clearCoat_feature_enabled)
    {
        // Attenuate diffuse term by clear coat's fresnel term to account for energy loss
        float HdotV = saturate(dot(normalize(dirToLight + lightingData.dirToCamera), lightingData.dirToCamera));
        diffuse *= 1.0 - (FresnelSchlick(HdotV, 0.04) * surface.clearCoat.factor);
    }
    
    diffuse *= lightIntensity;
    return diffuse;
}

float3 GetSpecularLighting_StandardPBR(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    float3 specular = SpecularGGX(lightingData.dirToCamera, dirToLight, surface.normal, surface.specularF0, lightingData.NdotV, surface.roughnessA2, lightingData.multiScatterCompensation);

    if(o_clearCoat_feature_enabled)
    {
        float3 halfVector = normalize(dirToLight + lightingData.dirToCamera);
        float NdotH = saturate(dot(surface.clearCoat.normal, halfVector));
        float NdotL = saturate(dot(surface.clearCoat.normal, dirToLight));
        float HdotL = saturate(dot(halfVector, dirToLight));

        // HdotV = HdotL due to the definition of half vector
        float3 clearCoatF = FresnelSchlick(HdotL, 0.04) * surface.clearCoat.factor;
        float clearCoatRoughness = max(surface.clearCoat.roughness * surface.clearCoat.roughness, 0.0005f);
        float3 clearCoatSpecular = ClearCoatGGX(NdotH, HdotL, NdotL, surface.clearCoat.normal, clearCoatRoughness, clearCoatF);

        specular = specular * (1.0 - clearCoatF) + clearCoatSpecular;
    }
    
    specular *= lightIntensity;
    return specular;
}
