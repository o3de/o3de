/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateLighting function in this file without making it the final EvaluateLighting
// used in your shader. Simply #define EvaluateLighting to your custom definition before including this file
//
#ifndef EvaluateLighting
#define EvaluateLighting EvaluateLighting_StandardPBR
#endif

#include "../BasePBR/BasePBR_LightingEval.azsli"

void InitializeLightingData_StandardPBR(inout Surface surface, float4 screenPosition, inout LightingData lightingData)
{
    // --- Base PBR ---
    InitializeLightingData_BasePBR(surface, screenPosition, lightingData);

    // --- Standard PBR ---

    lightingData.emissiveLighting = surface.emissiveLighting;
    lightingData.diffuseAmbientOcclusion = surface.diffuseAmbientOcclusion;
    lightingData.specularOcclusion = surface.specularOcclusion;

#if ENABLE_CLEAR_COAT
    if(o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        lightingData.diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(lightingData.NdotV, real3(0.04, 0.04, 0.04), surface.clearCoat.roughness) * surface.clearCoat.factor);
    }
#endif
}

LightingData EvaluateLighting_StandardPBR(inout Surface surface, float4 screenPosition)
{
    LightingData lightingData;
    InitializeLightingData_StandardPBR(surface, screenPosition, lightingData);
    CalculateLighting_BasePBR(surface, screenPosition, lightingData);
    return lightingData;
}
