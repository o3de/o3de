/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic lets you use the EvaluateLighting function in this file without making it the final EvaluateLighting
// used in your shader. Simply #define EvaluateLighting to your custom definition before including this file
//
#ifndef EvaluateLighting
#define EvaluateLighting(surface, screenPosition)       EvaluateLighting_StandardPBR(surface, screenPosition)
#endif

#include "../BasePBR/BasePBR_LightingEval.azsli"

void InitializeLightingData_StandardPBR(inout Surface surface, float4 screenPosition, inout LightingData lightingData)
{
    // --- Base PBR ---
    InitializeLightingData_BasePBR(surface, screenPosition, lightingData);

    // --- Standard PBR ---

    lightingData.emissiveLighting = surface.emissiveLighting;
    lightingData.diffuseAmbientOcclusion = surface.diffuseAmbientOcclusion;
    lightingData.specularOcclusion = surface.specularOcclusion;

    if(o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        lightingData.diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(lightingData.NdotV, float3(0.04, 0.04, 0.04), surface.clearCoat.roughness) * surface.clearCoat.factor);
    }
}

void HandleOpacity(inout Surface surface, inout LightingData lightingData)
{
    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        lightingData.diffuseLighting.rgb *= surface.alpha; // pre-multiply diffuse
        
        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingData.specularLighting.rgb;
        specular = lerp(specular, specular * surface.alpha, surface.opacityAffectsSpecularFactor);
        lightingData.diffuseLighting.rgb += specular;

        // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
        // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
        // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
        // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
        // not apply.
        float fresnelAlpha = FresnelSchlickWithRoughness(lightingData.NdotV, surface.alpha, surface.roughnessLinear).x;
        float alpha = lerp(fresnelAlpha, surface.alpha, surface.opacityAffectsSpecularFactor);

        if (o_opacity_mode == OpacityMode::Blended)
        {
            // [GFX_TODO ATOM-13187] PbrLighting shouldn't be writing directly to render targets. It's confusing when
            // specular is being added to diffuse just because we're calling render target 0 "diffuse".

            // For blended mode, we do (dest * alpha) + (source * 1.0). This allows the specular
            // to be added on top of the diffuse, but then the diffuse must be pre-multiplied.
            // It's done this way because surface transparency doesn't really change specular response (eg, glass).

            surface.alpha = alpha;
        }
        else if (o_opacity_mode == OpacityMode::TintedTransparent)
        {
            // See OpacityMode::Blended above for the basic method. TintedTransparent adds onto the above concept by supporting
            // colored alpha. This is currently a very basic calculation that uses the baseColor as a multiplier with strength
            // determined by the alpha. We'll modify this later to be more physically accurate and allow surface depth,
            // absorption, and interior color to be specified.
            //
            // The technique uses dual source blending to allow two separate sources to be part of the blending equation
            // even though ultimately only a single render target is being written to. m_diffuseColor is render target 0 and
            // m_specularColor render target 1, and the blend mode is (dest * source1color) + (source * 1.0).
            //
            // This means that m_specularColor.rgb (source 1) is multiplied against the destination, then
            // m_diffuseColor.rgb (source) is added to that, and the final result is stored in render target 0.

            lightingData.specularLighting.rgb = surface.baseColor * (1.0 - alpha); 
        }
    }
    else
    {
        surface.alpha = -1; // Disable subsurface scattering
    }
}

LightingData EvaluateLighting_StandardPBR(inout Surface surface, float4 screenPosition)
{
    LightingData lightingData;
    InitializeLightingData_StandardPBR(surface, screenPosition, lightingData);
    CalculateLighting_BasePBR(surface, screenPosition, lightingData);
    HandleOpacity(surface, lightingData);
    return lightingData;
}
