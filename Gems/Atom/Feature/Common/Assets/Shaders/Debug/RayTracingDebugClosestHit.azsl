/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/RayTracing/RayTracingSrgs.azsli>
#include <Atom/Features/RayTracing/RayTracingSceneUtils.azsli>
#include <RayTracingDebugCommon.azsli>

VsInput GetVertexData(float2 barycentrics)
{
    return GetHitInterpolatedVertexData(InstanceID(), PrimitiveIndex(), barycentrics);
}

float3 GetBarycentricColor(float2 barycentrics)
{
    return float3(barycentrics, 1.f - barycentrics.x - barycentrics.y);
}

float3 GetNormalColor(float2 barycentrics)
{
    VsInput vertexData = GetVertexData(barycentrics);
    return vertexData.normal * 0.5f + 0.5f;
}

float3 GetUVColor(float2 barycentrics)
{
    VsInput vertexData = GetVertexData(barycentrics);
    return float3(vertexData.uv0, 0.f);
}

#include <Atom/Features/FallbackPBRMaterial/MaterialInfoUtil.azsli>
float3 GetFallbackPBRAlbedo(float2 barycentrics)
{
    MaterialInfo materialInfo;
    if(!GetMaterialInfoEntry(InstanceID(), materialInfo))
    {
        return float3(0, 0, 0);
    }
    VsInput vertexData = GetVertexData(barycentrics);

    TextureData textureData = GetFallbackPBRMaterialTextureData(materialInfo, RayTracingGlobalSrg::LinearSampler, vertexData.uv0);
    return textureData.m_baseColor;
}

[shader("closesthit")]
void ClosestHit(inout PayloadData payload, BuiltInTriangleIntersectionAttributes attrib)
{
    switch (GetRayTracingDebugViewMode())
    {
    case RayTracingDebugViewMode::InstanceID:     payload.m_color = GetRandomColor(InstanceID());             break;
    case RayTracingDebugViewMode::InstanceIndex:  payload.m_color = GetRandomColor(InstanceIndex());          break;
    case RayTracingDebugViewMode::PrimitiveIndex: payload.m_color = GetRandomColor(PrimitiveIndex());         break;
    case RayTracingDebugViewMode::Barycentrics:   payload.m_color = GetBarycentricColor(attrib.barycentrics); break;
    case RayTracingDebugViewMode::Normals:        payload.m_color = GetNormalColor(attrib.barycentrics);      break;
    case RayTracingDebugViewMode::UVs:            payload.m_color = GetUVColor(attrib.barycentrics);          break;
    case RayTracingDebugViewMode::FallbackPBRAlbedo:    payload.m_color = GetFallbackPBRAlbedo(attrib.barycentrics); break;
    default:                                      payload.m_noData = true;                                    break;
    }
}
