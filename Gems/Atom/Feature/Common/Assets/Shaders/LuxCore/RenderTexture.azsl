/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D  m_sourceTexture;

    Sampler TextureSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

float4 RestoreNormalMap(float4 normalMapSample)
{
    float4 restoredNormal;

    // [GFX TODO][ATOM-2404] For some reason, the image build pipeline swaps the R and G channels so we swap them back here.
    restoredNormal.xy = normalMapSample.yx; 

    // The image build pipeline drops the B channel so we have to reconstruct it here.
    restoredNormal.z = sqrt(1 - dot(restoredNormal.xy, restoredNormal.xy));

    restoredNormal.xyz = restoredNormal.xyz * 0.5 + 0.5;
    restoredNormal.a = 1;

    return restoredNormal;
}

option bool o_isNormal;

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;
    
    if(o_isNormal)
    {
        float4 sampledValue = PassSrg::m_sourceTexture.SampleLevel(PassSrg::TextureSampler, IN.m_texCoord, 0);
        OUT.m_color = RestoreNormalMap(sampledValue);
    }
    else
    {
        OUT.m_color = PassSrg::m_sourceTexture.SampleLevel(PassSrg::TextureSampler, IN.m_texCoord, 0);
    }

    return OUT;
}
