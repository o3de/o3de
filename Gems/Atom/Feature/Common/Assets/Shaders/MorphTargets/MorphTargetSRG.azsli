/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup MorphTargetPassSrg : SRG_PerPass
{
    //Since we do Interlocked atomic operations on this buffer it can not be RWBuffer due to broken MetalSL generation.
    //It stems from the fact that typed buffers gets converted to textures and that breaks with atomic operations.
    //In future we can handle this under the hood via our metal shader pipeline
    RWStructuredBuffer<int> m_accumulatedDeltas;    
}

// This class represents the data that is passed to the morph target compute shader of an individual delta
// See MorphTargetDelta.h for the corresponding cpu struct
struct MorphTargetDelta
{
    // The index of the vertex being modified by this delta
    uint m_morphedVertexIndex;
    // 16 bits per component for position deltas
    uint m_compressedPositionDeltaXY;
    // Position z plus 8 bits per component for normal deltas
    uint m_compressedPositionDeltaZNormalDeltaXY;
    // Normal z plus 8 bits per component for tangent deltas
    uint m_compressedNormalDeltaZTangentDelta;
    // 8 bit padding plus 8 bits per component for bitangent deltas
    uint m_compressedPadBitangentDeltaXYZ;
    // Extra padding so the struct is 16 byte aligned for structured buffers
    uint3 m_pad;
};

// Input to the morph target compute shader
ShaderResourceGroup MorphTargetInstanceSrg : SRG_PerDraw
{
    StructuredBuffer<MorphTargetDelta> m_vertexDeltas;
}
