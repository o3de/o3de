/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#pragma once

#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup MorphTargetPassSrg : SRG_PerPass
{
    RWBuffer<int> m_accumulatedDeltas;    
}

// This class represents the data that is passed to the morph target compute shader of an individual delta
// See MorphTargetDelta.h for the corresponding cpu struct
struct MorphTargetDelta
{
    // The index of the vertex being modified by this delta
    uint m_morphedVertexIndex;
    // 16 bits per component for position deltas
    uint m_compressedPositionDeltaXY;
    // Position z plus 8 bits per component for normal deltas
    uint m_compressedPositionDeltaZNormalDeltaXY;
    // Normal z plus 8 bits per component for tangent deltas
    uint m_compressedNormalDeltaZTangentDelta;
    // 8 bit padding plus 8 bits per component for bitangent deltas
    uint m_compressedPadBitangentDeltaXYZ;
    // 8 bits per component for color delta
    uint m_compressedColorDeltaRGBA;
    // Extra padding so the struct is 16 byte aligned for structured buffers
    uint2 m_pad;
};

// Input to the morph target compute shader
ShaderResourceGroup MorphTargetInstanceSrg : SRG_PerDraw
{
    StructuredBuffer<MorphTargetDelta> m_vertexDeltas;
}
