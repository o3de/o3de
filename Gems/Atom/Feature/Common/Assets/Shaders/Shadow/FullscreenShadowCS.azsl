/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define THREADS 16

// Todo: test Compute Shader version with async compute and LDS optimizations
#define USING_COMPUTE_SHADER_DIRECTIONAL_LIGHT 1

#include <Atom/Features/Shadow/FullscreenShadowCommon.azsli>

void ComputeWorldNormalAndPositionCS(const uint2 screenPos, out float3 outPositionWS, out float3 outNormalWS)
{
    const float2 pixelSize = rcp(PassSrg::m_constantData.m_screenSize.xy);  // How big a pixel is in screen UV space
    const float2 halfPixel = pixelSize * 0.5f;                              // The coordinates of the screen pixel being shaded
    const float2 screenUV  = screenPos * pixelSize + halfPixel;             // The UV value [0, 1] of the screen pixel

    ComputeWorldNormalAndPosition(pixelSize, screenUV, outPositionWS, outNormalWS);
}

[numthreads(THREADS, THREADS, 1)]
void MainCS(uint3 thread_id : SV_GroupThreadID, uint3 group_id : SV_GroupID, uint3 dispatch_id: SV_DispatchThreadID, uint linear_id : SV_GroupIndex)
{
    float3 positionWS;
    float3 normalWS;
    ComputeWorldNormalAndPositionCS(dispatch_id.xy, positionWS, normalWS);
   
    DirectionalShadowCalculator calc;
    calc.SetLightIndex(PassSrg::m_constantData.m_lightIndex);
    calc.SetWorldNormal(normalWS);
    calc.SetReceiverShadowPlaneBiasEnable(PassSrg::m_constantData.m_receiverShadowPlaneBiasEnable);
    calc.SetFilterMode((ShadowFilterMethod)PassSrg::m_constantData.m_filterMode);
    calc.SetBlendBetweenCascadesEnable(PassSrg::m_constantData.m_blendBetweenCascadesEnable);
    calc.SetShadowmaps(PassSrg::m_directionalShadowmaps, PassSrg::m_directionalShadowmapsESM);
    calc.SetWorldPos(positionWS);

    PassSrg::m_fullscreenShadowOutput[dispatch_id.xy] = calc.GetVisibility();
}
