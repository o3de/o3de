/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <viewsrg.srgi>

#include <Atom/Features/SrgSemantics.azsli> 
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

//! Returns the linear depth value of the specified non-linear depth value.
float CalculateLinearDepth(const float zDepth)
{
    return abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * zDepth - ViewSrg::GetFarZ()))); 
}

//! Returns the calculated color after blending original framebuffer color with the calculated feedback effect.
float4 CalculateOutputColor(const float3 inColor, const float3 finalEffect, const float t)
{
    float4 outColor;
    outColor.rgb = lerp(inColor, finalEffect, t);
    outColor.a = 1.0;
    return outColor;
}

partial ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    //! The color buffer to apply the editor mode feedback effects to.
    Texture2D<float4> m_framebuffer;

    //! The non-linear depth buffer data for fragments in the color buffer.
    Texture2D<float4> m_depth;

    //! The entity mask containing the visible fragments of entities of interest.
    //! @note Red channel contains the visible fragments, green channel contains the visible and occluded fragments.
    Texture2D<float2> m_entityMask;

    //! Dimensions of mask texture (xy is width and height, zw is 1/width and 1/height).
    float4 m_maskDimensions;

    //! The final blend amount that is used to scale the calculated blend values.
    float m_finalBlendAmount;
    
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    //! Returns the final blend amount after the final blend amount scale is applied.
    float CalculateFinalBlendAmount(const float t)
    {
        // Apply the final blend amount modifier
        return lerp(0.0, t, PassSrg::m_finalBlendAmount);
    }

    //! Calculates the final blend anount and returns the blended output color.
    float4 CalculateFinalBlendAmountAndOutputColor(const float3 inColor, const float3 finalEffect, const float t)
    {
        return CalculateOutputColor(inColor, finalEffect, PassSrg::CalculateFinalBlendAmount(t));
    }
}