/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include "DepthOfField.azsli"
#include "NewDepthOfFieldCommon.azsli"

#include <viewsrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_colorAndCoc;
    Texture2D<float2> m_minMaxCocTile;

    // Texture dimensions. XY channels are width and height and ZW channels are 1 / width and 1 / height 
    // Auto-filled by the pass system when "ShaderImageDimensionsConstant" is specified in the .pass file
    float4 m_textureDimensions;

    NewDepthOfFieldConstants m_dofConstants;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

float3 GetOffset(uint index, float2 offsetUVMultiplier)
{
    float3 offset = PassSrg::m_dofConstants.samplePositions[index].xyz;
    offset.xy *= offsetUVMultiplier;
    return offset;
}

float CalculateWeight(float offsetRadius, float samplingRadius, float sampleCoc, float centerCoc)
{
    // The maximum distance for which samples are valid is the min of the sample CoC and the center CoC
    float maxRadius = abs(min(sampleCoc, centerCoc));
    
    // Easy human readable calculations: 
    // radius = samplingRadius * offsetRadius;
    // falloff = maxRadius - radius;
    // weight = 1 + (4 * falloff)
    //
    // The same thing in mad form:
    float falloff = mad(-samplingRadius, offsetRadius, maxRadius);
    return saturate(mad(4, falloff, 1));
}

// This shader attempts to fill the gaps left by the large filter by sampling 8 pixels around the center pixel
// See http://advances.realtimerendering.com/s2013/Sousa_Graphics_Gems_CryENGINE3.pptx
// for a detailed overview of the technique
PSOutput MainPS(VSOutput IN)
{
    // Get center sample
    float2 pixelUV = IN.m_texCoord.xy;
    float4 color = PassSrg::m_colorAndCoc.Sample(PassSrg::PointSampler, pixelUV).rgba;
    float centerCoc = color.a;

    // Get tile min CoC
    int2 tile = int2(IN.m_position.xy) / 16;
    float minCoc = PassSrg::m_minMaxCocTile[tile].x;

    // Aspect ratio is needed because sample offsets are calculated in a perfect circle, but
    // UV space is stretched due to normalized device coordinates. Correct this with aspect ratio
    // Aspect ratio = texture.x / texture.y = dimensions.x * dimensions.w
    float aspectRatio = PassSrg::m_textureDimensions.x * PassSrg::m_textureDimensions.w;

    // Sampling radius
    float cocRadius = max( abs(centerCoc), -minCoc) * 0.5f; // Small filter pass so half the radius
    float screenRadius = cocRadius * ViewSrg::m_dof.m_cocToScreenRatio * 0.5f;
    float2 offsetMultiplier = float2(screenRadius / aspectRatio, screenRadius);

    // Weight accumulation. Start with 1 for center pixel.
    float totalWeight = 1;

    for(uint i = 0; i < SAMPLES_LOOP_1; ++i)
    {
        // Calculate sample offset
        float3 offset = GetOffset(i, offsetMultiplier);

        // Get sample
        float4 sampleColorCoc = PassSrg::m_colorAndCoc.Sample(PassSrg::PointSampler, pixelUV + offset.xy).rgba;

        // Calculate weight
        float weight = CalculateWeight(offset.z, cocRadius, sampleColorCoc.a, centerCoc);

        // Accumulate sample and weight
        color.rgb += sampleColorCoc.rgb * weight;
        totalWeight += weight;
    }


    // Normalize accumulated sample
    color.rgb /= totalWeight;

    PSOutput OUT;
    OUT.m_color.rgb = color.rgb;
    OUT.m_color.a = centerCoc;
    return OUT;
}
