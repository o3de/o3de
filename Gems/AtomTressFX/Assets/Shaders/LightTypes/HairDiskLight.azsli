/*
* Modifications Copyright (c) Contributors to the Open 3D Engine Project.
* For complete copyright and license terms please see the LICENSE at the root of this distribution.
*
* SPDX-License-Identifier: Apache-2.0 OR MIT
*
*/
// Note: Adapted from LightUtilTemplate.azsli
#pragma once

#ifndef DiskLightUtil
#define DiskLightUtil DiskLightUtil_Hair
#endif

#include <Atom/Features/PBR/Lights/DiskLight.azsli>

// DiskLightUtil_Hair behaves exactly as DiskLightUtil_PBR except the Apply() - function, where it modifies the surface and lighting params before the 
// base PBR - light is applied. This somewhat weird construct exists because inheritance and overloading doesn't work properly
class DiskLightUtil_Hair
{
    DiskLightUtil_PBR base;

    static DiskLightUtil_Hair Init(DiskLight light, Surface surface, float3 cameraPositionWS)
    {
        DiskLightUtil_Hair result;
        result.base = DiskLightUtil_PBR::Init(light, surface, cameraPositionWS);
        return result; 
    }

#if ENABLE_TRANSMISSION
    void SetTransmissionDistance(real distance)
    {
        base.SetTransmissionDistance(distance);
    }
#endif

    real3 GetSurfaceToLightDirection()
    {
        return base.GetSurfaceToLightDirection();
    }

    real3 GetDirectionToConeTip()
    {
        return base.GetDirectionToConeTip();
    }

    real GetFalloff()
    {
        return base.GetFalloff();
    }

    void Apply(DiskLight light, Surface surface, real litRatio, inout LightingData lightingData)
    {
        SetNormalAndUpdateLightingParams(surface.tangent, lightingData.dirToCamera, surface, lightingData);
        base.Apply(light, surface, litRatio, lightingData);
    }

    void ApplySampled(DiskLight light, Surface surface, inout LightingData lightingData, const uint sampleCount = 512)
    {
        SetNormalAndUpdateLightingParams(surface.tangent, lightingData.dirToCamera, surface, lightingData);
        base.ApplySampled(light, surface, lightingData, sampleCount);
    }
};
