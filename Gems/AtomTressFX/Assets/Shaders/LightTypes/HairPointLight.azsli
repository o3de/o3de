/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
// Note: Adapted from LightUtilTemplate.azsli

#pragma once

#ifndef PointLightUtil
#define PointLightUtil PointLightUtil_Hair
#endif

#include <Atom/Features/PBR/Lights/PointLight.azsli>

class PointLightUtil_Hair
{
    PointLightUtil_PBR base;

    static PointLightUtil_Hair Init(PointLight light, Surface surface, float3 cameraPositionWS)
    {
        PointLightUtil_Hair result;
        result.base = PointLightUtil_PBR::Init(light, surface, cameraPositionWS);
        return result;
    }

#if ENABLE_TRANSMISSION
    void SetTransmissionDistance(real distance)
    {
        base.SetTransmissionDistance(distance);
    }
#endif

    real3 GetSurfaceToLightDirection()
    {
        return base.GetSurfaceToLightDirection();
    }

    real GetFalloff()
    {
        return base.GetFalloff();
    }

    void Apply(PointLight light, Surface surface, real litRatio, inout LightingData lightingData)
    {
        SetNormalAndUpdateLightingParams(surface.tangent, GetSurfaceToLightDirection(), surface, lightingData);

        base.Apply(light, surface, litRatio, lightingData);

        // Tranmission contribution
        lightingData.translucentBackLighting += GetBackLighting_Hair(surface, lightingData, base.lightIntensity, GetSurfaceToLightDirection(), 1.0);
    }

    void ApplySampled(PointLight light, Surface surface, inout LightingData lightingData, const uint sampleCount = 512)
    {
        base.ApplySampled(light, surface, lightingData, sampleCount);
    }
};

#endif // ENABLE_DISK_LIGHTS
