/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/PBR/MaterialUtils.azsli>
#include <Atom/Features/PBR/SpecularAA.azsli>
#include <Atom/Features/PBR/Surfaces/TransmissionSurfaceData.azsli>

class Surface
{
#if ENABLE_TRANSMISSION
    TransmissionSurfaceData transmission;
#endif

    // ------- BasePbrSurfaceData -------
    float3 position;            //!< Position in world-space
    float3 normal;              //!< Normal in world-space
    float3 vertexNormal;        //!< Vertex normal in world-space
    float3 albedo;              //!< Albedo color of the non-metallic material, will be multiplied against the diffuse lighting value
    float3 specularF0;          //!< Fresnel f0 spectral value of the surface
    float roughnessLinear;      //!< Perceptually linear roughness value authored by artists. Must be remapped to roughnessA before use
    float roughnessA;           //!< Actual roughness value ( a.k.a. "alpha roughness") to be used in microfacet calculations
    float roughnessA2;          //!< Alpha roughness ^ 2 (i.e. roughnessA * roughnessA), used in GGX, cached here for perfromance

    // ------- Hair Surface Data -------
    float3 tangent;
    float3 cuticleTilt;
    float thickness;

    //! Calculates roughnessA and roughnessA2 after roughness has been set
    void CalculateRoughnessA();

    //! Sets albedo and specularF0 using metallic workflow
    void SetAlbedoAndSpecularF0(float3 baseColor, float specularF0Factor);

    real3 GetDiffuseNormal() { return normal; }
    real3 GetSpecularNormal() { return normal; }
    real3 GetDefaultNormal() { return normal; }
    real3 GetVertexNormal() { return vertexNormal; }
    real3 GetSpecularF0() { return specularF0; }
};

void Surface::CalculateRoughnessA()
{
    CalculateRoughnessValues(normal, roughnessLinear, roughnessA, roughnessA2);
}

void Surface::SetAlbedoAndSpecularF0(float3 baseColor, float specularF0Factor)
{
    albedo = baseColor;
    specularF0 = MaxDielectricSpecularF0 * specularF0Factor;
}
