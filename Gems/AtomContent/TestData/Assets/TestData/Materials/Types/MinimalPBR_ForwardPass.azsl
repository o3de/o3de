/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define FORCE_OPAQUE 1

#include <Atom/Features/SrgSemantics.azsli>
#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

ShaderResourceGroup MinimalPBRSrg : SRG_PerMaterial
{
    float3 m_baseColor;
    float m_metallic;
    float m_roughness;
}

// Control which fields we get in the VsInput and VsOutput
#define PIPELINE_VERTEX_POSITION 1
#define PIPELINE_VERTEX_POSITIONWS 1
// #define PIPELINE_VERTEX_LOCALPOSITION 1
// #define PIPELINE_VERTEX_PREV_POSITION 1
#define PIPELINE_VERTEX_NORMAL 1
#define PIPELINE_VERTEX_TANGENT 1
// #define PIPELINE_VERTEX_BITANGENT 1
// #define PIPELINE_VERTEX_UV 1
// #define PIPELINE_VERTEX_DETAIL_UV 1
// #define PIPELINE_VERTEX_COLOR 1
// #define PIPELINE_VERTEX_BLENDMASK 1

#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassVertexData.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassPipelineCallbacks.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>

#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/PBR/Lights/IblForward.azsli>
#include <Atom/Features/PBR/Decals.azsli>

VsOutput MinimalPBR_MainPassVS(VsInput IN, uint instanceId : SV_InstanceID)
{
    VsOutput OUT;

    VsSystemValues SV;
    SV.m_instanceId = instanceId;

    float3 worldPosition = mul(GetObjectToWorldMatrix(SV), float4(IN.position, 1.0)).xyz;
 
    OUT.worldPosition = worldPosition;
    OUT.position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.worldPosition, 1.0));
    OUT.normal = IN.normal;
    OUT.tangent = IN.tangent;

    OUT.m_instanceId = SV.m_instanceId;

    return OUT;
}

ForwardPassOutput MinimalPBR_MainPassPS(VsOutput IN)
{

    VsSystemValues SV;
    SV.m_instanceId = IN.m_instanceId;

    real4x4 objectToWorld = real4x4(GetObjectToWorldMatrix(SV));
    real3x3 objectToWorldIT = real3x3(GetObjectToWorldMatrixInverseTranspose(SV));

    float3 normalWS, tangentWS, bitangentWS;
    ConstructTBN(real3(IN.normal), real4(IN.tangent), objectToWorld, objectToWorldIT, normalWS, tangentWS, bitangentWS);

    // ------- Surface -------

    Surface surface;
    
    // Position, Normal, Roughness
    surface.position = IN.worldPosition.xyz;
    surface.normal = normalWS;
    surface.vertexNormal = normalWS;
    surface.roughnessLinear = MinimalPBRSrg::m_roughness;
    surface.CalculateRoughnessA();

    // Albedo, SpecularF0
    float3 baseColor = MinimalPBRSrg::m_baseColor;
    float metallic = MinimalPBRSrg::m_metallic;
    float specularF0Factor = 0.5f;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // Clear Coat
    surface.clearCoat.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear, ViewSrg::m_worldPosition.xyz);


    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.position);

    // Apply Image Based Lighting (IBL)
    ApplyIblForward(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}

