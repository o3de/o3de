/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define FORCE_OPAQUE 1

#include <Atom/Features/SrgSemantics.azsli>
#include <scenesrg_all.srgi>
#include <viewsrg_all.srgi>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include "AutoBrick_Common.azsli"  // MaterialSrg

// Control which fields we get in the VsInput and VsOutput
#define UvSetCount 1
#define PIPELINE_VERTEX_POSITION 1
#define PIPELINE_VERTEX_POSITIONWS 1
// #define PIPELINE_VERTEX_LOCALPOSITION 1
// #define PIPELINE_VERTEX_PREV_POSITION 1
#define PIPELINE_VERTEX_NORMAL 1
#define PIPELINE_VERTEX_TANGENT 1
// #define PIPELINE_VERTEX_BITANGENT 1
#define PIPELINE_VERTEX_UV 1
// #define PIPELINE_VERTEX_DETAIL_UV 1
// #define PIPELINE_VERTEX_COLOR 1
// #define PIPELINE_VERTEX_BLENDMASK 1

#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassVertexData.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassPipelineCallbacks.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>

#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/ParallaxMapping.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/PBR/Lights/IblForward.azsli>
#include <Atom/Features/PBR/Decals.azsli>


VsOutput AutoBrick_ForwardPassVS(VsInput IN, uint instanceId : SV_InstanceID)
{
    VsOutput OUT;
 
    VsSystemValues SV;
    SV.m_instanceId = instanceId;

    float3 worldPosition = mul(GetObjectToWorldMatrix(SV), float4(IN.position, 1.0)).xyz;
 
    OUT.uvs[0] = IN.uv0;

    OUT.worldPosition = worldPosition;
    OUT.position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.worldPosition, 1.0));
    OUT.normal = IN.normal;
    OUT.tangent = IN.tangent;
    
    OUT.m_instanceId = SV.m_instanceId;
    
    return OUT;
}

// Returns the brick size including half the grout line on each side
float2 GetBrickSpan()
{
    return float2(AutoBrickSrg::m_brickWidth, AutoBrickSrg::m_brickHeight);
}

// The size of the actual block not including the grout lines
float2 GetBrickSize()
{
    return float2( AutoBrickSrg::m_brickWidth - AutoBrickSrg::m_lineWidth,
                   AutoBrickSrg::m_brickHeight - AutoBrickSrg::m_lineWidth);
}

// Returns coordinates within the nearest brick, in UV units, where (0.0,0.0) is the center of the brick.
float2 ToBrickCoords(float2 uv)
{
    float2 brickSpan = GetBrickSpan(); 

    float stackIndex = floor(uv.y / brickSpan.y);
    uv.x += stackIndex * AutoBrickSrg::m_brickOffset * brickSpan.x;

    return fmod(uv, brickSpan) - sign(uv) * (brickSpan * 0.5);
}

// Returns grout-line coordinates normalized to half the width of the grout line, 
// such that (1.0,1.0) is the center of the grout line to top-right of a brick,
// (0.0,0.0) is anywhere inside a brick,
// and (-1.0,-1.0) is the center of the grout line to the bottom-left of a brick.
float2 GetNormalizedGroutLinePosition(float2 uv)
{
    const float2 brickPosition = ToBrickCoords(uv);
    float2 brickEdge = GetBrickSize() * 0.5;
    float2 groutLineCenter = GetBrickSpan() * 0.5;
    float2 groutLinePosition = clamp(abs(brickPosition) - brickEdge, 0, 100000);
    float2 normalized = groutLinePosition / (AutoBrickSrg::m_lineWidth * 0.5);
    return sign(brickPosition) * normalized;
}

// Returns the distance from the nearest brick, 
// where 0.0 is inside (or on the edge) of a brick, 
// and 1.0 is the exact middle of a grout line.
float GetNormalizedDistanceFromBrick(float2 uv)
{
    float2 distance = abs(GetNormalizedGroutLinePosition(uv));
    return max(distance.x, distance.y);
}

// Returns the depth value (range 0-1) and normal vector (in TBN space) at any uv point on the surface. 
void GetSurfaceShape(float2 uv, out float depth, out float3 normal)
{
    float2 pos = GetNormalizedGroutLinePosition(uv);

    depth = max(abs(pos).x, abs(pos).y);

    if(abs(pos).x > abs(pos).y)
    {
        normal = normalize(float3(sign(pos.x), 0, 1));
    }
    else
    {
        normal = normalize(float3(0, sign(pos.y), 1));
    }
}

// Callback function for ParallaxMapping.azsli
DepthResult GetDepth(const MaterialParameters params, Texture2D heightmap, sampler mapSampler, float2 uv, float2 uv_ddx, float2 uv_ddy)
{
    float depth;
    float3 normal;
    GetSurfaceShape(uv, depth, normal);
    return DepthResultNormalized(depth);
}

ForwardPassOutput AutoBrick_ForwardPassPS(VsOutput IN)
{
    VsSystemValues SV;
    SV.m_instanceId = IN.m_instanceId;

    real4x4 objectToWorld = real4x4(GetObjectToWorldMatrix(SV));
    real3x3 objectToWorldIT = real3x3(GetObjectToWorldMatrixInverseTranspose(SV));

    float3 normalWS, tangentWS, bitangentWS;
    ConstructTBN(real3(IN.normal), real4(IN.tangent), objectToWorld, objectToWorldIT, normalWS, tangentWS, bitangentWS);

    float3x3 identityUvMatrix = 
        { 1,0,0,
          0,1,0,
          0,0,1 };
          
    float depthOffset = 0.0;

    // empty MaterialParameters struct; GetParallaxOffset() expects it but just passes it through to GetDepth() unchange
    MaterialParameters params;

    // the texture and sampler don't matter here, since they are passed to the GetDepth function, where they are ignored
    ParallaxOffset tangentOffset = GetParallaxOffset( params,
                                                      AutoBrickSrg::m_noise,
                                                      AutoBrickSrg::m_sampler,
                                                      AutoBrickSrg::m_lineDepth,
                                                      depthOffset,
                                                      IN.uvs[0],
                                                      ViewSrg::m_worldPosition.xyz - IN.worldPosition, 
                                                      tangentWS,
                                                      bitangentWS,
                                                      normalWS,
                                                      identityUvMatrix);
    
    IN.uvs[0] += tangentOffset.m_offsetTS.xy;
 
    float3 baseColor = float3(1,1,1);
    const float noise = AutoBrickSrg::m_noise.Sample(AutoBrickSrg::m_sampler, IN.uvs[0]).r;

    float distanceFromBrick = GetNormalizedDistanceFromBrick(IN.uvs[0]);
    if(distanceFromBrick > AutoBrickSrg::m_brickColorBleed) 
    {
        baseColor = AutoBrickSrg::m_lineColor * lerp(1.0, noise, AutoBrickSrg::m_lineNoiseFactor);
    }
    else
    {
        baseColor = AutoBrickSrg::m_brickColor * lerp(1.0, noise, AutoBrickSrg::m_brickNoiseFactor);
    }

    float surfaceDepth;
    float3 surfaceNormal;
    GetSurfaceShape(IN.uvs[0], surfaceDepth, surfaceNormal);
    const float3 surfaceNormalWorld = TangentSpaceToWorld(surfaceNormal, normalWS, tangentWS, bitangentWS);
    
    // ------- Surface -------

    Surface surface;
    
    // Position, Normal, Roughness
    surface.position = IN.worldPosition.xyz;
    surface.normal = normalize(surfaceNormalWorld);
    surface.vertexNormal = surfaceNormal;
    surface.roughnessLinear = 1.0f;
    surface.CalculateRoughnessA();

    // Albedo, SpecularF0
    const float metallic = 0.0f;
    const float specularF0Factor = 0.5f;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // Clear Coat
    surface.clearCoat.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear, ViewSrg::m_worldPosition.xyz);

    // Shadow
    lightingData.diffuseAmbientOcclusion = 1.0f - surfaceDepth * AutoBrickSrg::m_aoFactor;

    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.position);

    // Apply Image Based Lighting (IBL)
    ApplyIblForward(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}

