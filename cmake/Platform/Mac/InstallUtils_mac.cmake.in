#
# Copyright (c) Contributors to the Open 3D Engine Project.
# For complete copyright and license terms please see the LICENSE at the root of this distribution.
#
# SPDX-License-Identifier: Apache-2.0 OR MIT
#
#

cmake_policy(PUSH)
cmake_policy(SET CMP0012 NEW)

function(fixup_qt_framework lib_name framework_path)

    file(REMOVE_RECURSE
        ${framework_path}/Headers
        ${framework_path}/Resources
        ${framework_path}/${lib_name}
        ${framework_path}/Versions/Current
        ${framework_path}/Versions/5/Headers
    )

    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink 5 Current
        WORKING_DIRECTORY ${framework_path}/Versions
    )
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/5/${lib_name} ${lib_name}
        WORKING_DIRECTORY ${framework_path}
    )

endfunction()

function(fixup_python_framework framework_path)

    file(REMOVE_RECURSE
        ${framework_path}/Versions/Current
        ${framework_path}/Versions/3.7/Headers
        ${framework_path}/Versions/3.7/lib/Python
        ${framework_path}/Versions/3.7/lib/python3.7/test
        ${framework_path}/Versions/3.7/lib/python3.7/site-packages/scipy/io/tests
        ${framework_path}/Python
        ${framework_path}/Resources
        ${framework_path}/Headers
    )
    
    file(GLOB_RECURSE exe_file_list "${framework_path}/**/*.exe")
    if(exe_file_list)
        file(REMOVE_RECURSE ${exe_file_list})
    endif()
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink include/python3.7m Headers
        WORKING_DIRECTORY ${framework_path}/Versions/3.7
    )
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink 3.7 Current
        WORKING_DIRECTORY ${framework_path}/Versions/
    )
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Python Python
        WORKING_DIRECTORY ${framework_path}
    )
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Headers Headers
        WORKING_DIRECTORY ${framework_path}
    )
    execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Resources Resources
        WORKING_DIRECTORY ${framework_path}
    )
    file(CHMOD ${framework_path}/Versions/Current/Python 
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE 
    )

endfunction()

function(codesign_file file entitlement_file)

    if(EXISTS ${entitlement_file})

        execute_process(COMMAND "/usr/bin/codesign" "--force" "--sign" "@LY_CODE_SIGN_IDENTITY@" "--deep" "-o" "runtime" "--timestamp" "--entitlements" "${entitlement_file}" "${file}"
            TIMEOUT 300
            OUTPUT_VARIABLE codesign_out
            RESULT_VARIABLE codesign_ret
        )
    else()
        execute_process(COMMAND "/usr/bin/codesign" "--force" "--sign" "@LY_CODE_SIGN_IDENTITY@" "--deep" "-o" "runtime" "--timestamp" "${file}"
            TIMEOUT 300
            OUTPUT_VARIABLE codesign_out
            RESULT_VARIABLE codesign_ret
        )
    endif()

    if(NOT ${codesign_ret} EQUAL "0")
        message("Codesign operation for ${file_path} returned ${codesign_ret} with message ${codesign_out}")
    endif()

endfunction()

function(codesign_python_framework_binaries framework_path)

    # The codesign "--deep" flag will only codesign binaries in folders with specific names.
    # We need to codesign all the binaries that the "--deep" flag will miss.
    file(GLOB_RECURSE files
        LIST_DIRECTORIES false
        "${framework_path}/Versions/3.7/bin/**"
        "${framework_path}/Versions/3.7/lib/**"
        "${framework_path}/Versions/3.7/Resources/**")

    foreach(file ${files})
        if(NOT EXISTS ${file})
            file(REMOVE ${file})
            continue()
        endif()
        cmake_path(SET path_var "${file}")
        cmake_path(GET path_var EXTENSION LAST_ONLY extension)
        set(should_codesign FALSE)
        if (NOT extension)
            set(should_codesign TRUE)
        elseif(${extension} STREQUAL ".dylib" OR ${extension} STREQUAL ".so" OR ${extension} STREQUAL ".7m")
            set(should_codesign TRUE)
        endif()
        if(${should_codesign})
            codesign_file(${file} "none")
        endif()
    endforeach()

endfunction()

function(ly_copy source_file target_directory)
    
    if("${source_file}" MATCHES "\\.[Ff]ramework[^\\.]")

        # fixup origin to copy the whole Framework folder
        string(REGEX REPLACE "(.*\\.[Ff]ramework).*" "\\1" source_file "${source_file}")

    endif()
    file(COPY "${source_file}" DESTINATION "${target_directory}" FILE_PERMISSIONS @LY_COPY_PERMISSIONS@ FOLLOW_SYMLINK_CHAIN)

    # Codesigning is only required if hardened runtime is enabled.
    if(@LY_ENABLE_HARDENED_RUNTIME@)
        get_filename_component(target_filename "${source_file}" NAME)

        # Our Qt and Python frameworks aren't in the correct bundle format to be codesigned.
        if("${target_filename}" MATCHES "(Qt[^\\.]+)\\.[Ff]ramework")
            fixup_qt_framework(${CMAKE_MATCH_1} ${target_directory}/${target_filename})
        elseif("${target_filename}" MATCHES "Python.framework")
            fixup_python_framework(${target_directory}/${target_filename})
            codesign_python_framework_binaries(${target_directory}/${target_filename})
        endif()

        codesign_file(${target_directory}/${target_filename} "none")
    endif()

endfunction()

cmake_policy(POP)
