/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#pragma once

#include <AzCore/EBus/EBus.h>
#include <AzCore/std/string/string.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
namespace AzFramework
{
    ////////////////////////////////////////////////////////////////////////////////////////////////
    //! EBus interface used to listen for input text events that are broadcast from input devices or
    //! channels. Most text input consumers should derive instead from InputTextEventListener (which
    //! respects the 'o_hasBeenConsumed' parameter passed to OnInputTextEvent) to ensure text events
    //! are processed once. However, if for some reason a system needs to process text regardless of
    //! whether it has been consumed by a higher priority listener, they are free to derive directly
    //! from InputTextEventNotificationsBus::Handler and simply ignore the 'o_hasBeenConsumed' flag.
    class InputTextNotifications : public AZ::EBusTraits
    {
    public:
        ////////////////////////////////////////////////////////////////////////////////////////////
        //! EBus Trait: input notifications are addressed to a single address
        static const AZ::EBusAddressPolicy AddressPolicy = AZ::EBusAddressPolicy::Single;

        ////////////////////////////////////////////////////////////////////////////////////////////
        //! EBus Trait: input notifications can be handled by multiple (ordered) listeners
        static const AZ::EBusHandlerPolicy HandlerPolicy = AZ::EBusHandlerPolicy::MultipleAndOrdered;

        ////////////////////////////////////////////////////////////////////////////////////////////
        //! Default destructor
        virtual ~InputTextNotifications() = default;

        ////////////////////////////////////////////////////////////////////////////////////////////
        //! Override to be notified when unicode text input is generated by an input device
        //! \param[in] textUTF8 The text emitted by the input device (encoded using UTF-8)
        //! \param[in,out] o_hasBeenConsumed Check and/or set whether the text has been handled
        virtual void OnInputTextEvent(const AZStd::string& /*textUTF8*/,
                                      bool& /*o_hasBeenConsumed*/) {}

        ////////////////////////////////////////////////////////////////////////////////////////////
        //! Access to the priority of the input notification handler (sorted from highest to lowest)
        //! \return Priority of the input notification handler
        virtual AZ::s32 GetPriority() const { return 0; }

        ////////////////////////////////////////////////////////////////////////////////////////////
        //! Compare function required by BusHandlerOrderCompare = BusHandlerCompareDefault
        //! \param[in] other Another instance of the class to compare
        //! \return True if the priority of this handler is greater than the other, false otherwise
        inline bool Compare(const InputTextNotifications* other) const
        {
            return GetPriority() > other->GetPriority();
        }
    };
    using InputTextNotificationBus = AZ::EBus<InputTextNotifications>;
} // namespace AzFramework
